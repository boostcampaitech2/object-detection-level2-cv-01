{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.3\nMMCV: 1.3.14\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.17.0+044cccd", "config": "dataset_type = 'CocoDataset'\ndata_root = '/opt/ml/detection/dataset/'\nclasses = [\n    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\nimg_norm_cfg = dict(mean=[0, 0, 0], std=[255.0, 255.0, 255.0], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(300, 300), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[0, 0, 0],\n        std=[255.0, 255.0, 255.0],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(300, 300),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/train_kfold1.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(300, 300), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/val_kfold1.json',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(300, 300),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/test.json',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(300, 300),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP_50')\ncheckpoint_config = dict(interval=100)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(type='WandbLoggerHook', init_kwargs=dict(project='mmdetection'))\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\noptimizer = dict(type='SGD', lr=0.002, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='CosineAnnealing',\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=0.01,\n    min_lr=1e-06)\nrunner = dict(type='EpochBasedRunner', max_epochs=50)\nmodel = dict(\n    type='CenterNet',\n    backbone=dict(\n        type='ResNet',\n        depth=18,\n        norm_eval=False,\n        norm_cfg=dict(type='BN'),\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet18')),\n    neck=dict(\n        type='CTResNetNeck',\n        in_channel=512,\n        num_deconv_filters=(256, 128, 64),\n        num_deconv_kernels=(4, 4, 4),\n        use_dcn=True),\n    bbox_head=dict(\n        type='CenterNetHead',\n        num_classes=10,\n        in_channel=64,\n        feat_channel=64,\n        loss_center_heatmap=dict(type='GaussianFocalLoss', loss_weight=1.0),\n        loss_wh=dict(type='L1Loss', loss_weight=0.1),\n        loss_offset=dict(type='L1Loss', loss_weight=1.0)),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\nwork_dir = './work_dirs/CenterNet_R50'\ngpu_ids = range(0, 1)\n", "seed": 2021, "exp_name": "CenterNet_R50.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00012, "memory": 390, "data_time": 0.04837, "loss_center_heatmap": 11.2297, "loss_wh": 2.33688, "loss_offset": 0.49724, "loss": 14.06382, "time": 0.17032}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00022, "memory": 390, "data_time": 0.00504, "loss_center_heatmap": 3.62836, "loss_wh": 2.36789, "loss_offset": 0.47172, "loss": 6.46797, "time": 0.11213}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00032, "memory": 390, "data_time": 0.00481, "loss_center_heatmap": 3.48445, "loss_wh": 2.38054, "loss_offset": 0.42909, "loss": 6.29407, "time": 0.11173}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00041, "memory": 390, "data_time": 0.00465, "loss_center_heatmap": 3.38787, "loss_wh": 2.09187, "loss_offset": 0.38116, "loss": 5.8609, "time": 0.11746}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00051, "memory": 390, "data_time": 0.00436, "loss_center_heatmap": 3.4015, "loss_wh": 2.26691, "loss_offset": 0.35024, "loss": 6.01864, "time": 0.10661}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00061, "memory": 390, "data_time": 0.00494, "loss_center_heatmap": 3.37008, "loss_wh": 2.29959, "loss_offset": 0.29214, "loss": 5.96181, "time": 0.1222}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00071, "memory": 390, "data_time": 0.00503, "loss_center_heatmap": 3.41541, "loss_wh": 2.29743, "loss_offset": 0.26917, "loss": 5.982, "time": 0.11396}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00081, "memory": 390, "data_time": 0.0048, "loss_center_heatmap": 3.42806, "loss_wh": 2.47695, "loss_offset": 0.25723, "loss": 6.16223, "time": 0.1088}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00091, "memory": 390, "data_time": 0.00484, "loss_center_heatmap": 3.36658, "loss_wh": 2.34883, "loss_offset": 0.25021, "loss": 5.96562, "time": 0.1076}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00101, "memory": 390, "data_time": 0.00495, "loss_center_heatmap": 3.33411, "loss_wh": 2.31956, "loss_offset": 0.24737, "loss": 5.90104, "time": 0.10486}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00111, "memory": 390, "data_time": 0.00495, "loss_center_heatmap": 3.32868, "loss_wh": 2.42401, "loss_offset": 0.24601, "loss": 5.9987, "time": 0.10453}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00121, "memory": 390, "data_time": 0.00492, "loss_center_heatmap": 3.33226, "loss_wh": 2.39727, "loss_offset": 0.25168, "loss": 5.98121, "time": 0.10691}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00131, "memory": 390, "data_time": 0.00511, "loss_center_heatmap": 3.27913, "loss_wh": 2.19116, "loss_offset": 0.25583, "loss": 5.72612, "time": 0.11694}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.0014, "memory": 390, "data_time": 0.005, "loss_center_heatmap": 3.34251, "loss_wh": 2.18199, "loss_offset": 0.25017, "loss": 5.77467, "time": 0.10837}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.0015, "memory": 390, "data_time": 0.00507, "loss_center_heatmap": 3.28858, "loss_wh": 2.27011, "loss_offset": 0.25269, "loss": 5.81138, "time": 0.11662}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.0016, "memory": 390, "data_time": 0.00507, "loss_center_heatmap": 3.29727, "loss_wh": 2.28914, "loss_offset": 0.24956, "loss": 5.83597, "time": 0.1115}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.0017, "memory": 390, "data_time": 0.00492, "loss_center_heatmap": 3.34559, "loss_wh": 2.22126, "loss_offset": 0.25353, "loss": 5.82037, "time": 0.11085}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.0018, "memory": 390, "data_time": 0.00494, "loss_center_heatmap": 3.28657, "loss_wh": 2.3293, "loss_offset": 0.24491, "loss": 5.86078, "time": 0.10992}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.0019, "memory": 390, "data_time": 0.0049, "loss_center_heatmap": 3.27135, "loss_wh": 2.16488, "loss_offset": 0.24932, "loss": 5.68555, "time": 0.11623}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.002, "memory": 390, "data_time": 0.00512, "loss_center_heatmap": 3.277, "loss_wh": 2.22988, "loss_offset": 0.2529, "loss": 5.75979, "time": 0.11288}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.002, "memory": 390, "data_time": 0.00518, "loss_center_heatmap": 3.3153, "loss_wh": 2.29215, "loss_offset": 0.24375, "loss": 5.8512, "time": 0.10602}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.002, "memory": 390, "data_time": 0.00492, "loss_center_heatmap": 3.27678, "loss_wh": 2.08209, "loss_offset": 0.252, "loss": 5.61087, "time": 0.11647}
