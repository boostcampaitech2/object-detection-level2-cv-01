{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.3\nMMCV: 1.3.14\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.17.0+044cccd", "config": "dataset_type = 'CocoDataset'\ndata_root = '/opt/ml/detection/dataset/'\nclasses = [\n    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\nimg_norm_cfg = dict(mean=[0, 0, 0], std=[255.0, 255.0, 255.0], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(300, 300), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[0, 0, 0],\n        std=[255.0, 255.0, 255.0],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(\n        type='Collect',\n        meta_keys=('filename', 'ori_shape', 'img_shape', 'pad_shape',\n                   'scale_factor', 'flip', 'flip_direction', 'img_norm_cfg',\n                   'border'),\n        keys=['img'])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/train_kfold1.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(300, 300), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/val_kfold1.json',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(300, 300),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/test.json',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(300, 300),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP_50')\ncheckpoint_config = dict(interval=100)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(type='WandbLoggerHook', init_kwargs=dict(project='mmdetection'))\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\noptimizer = dict(type='SGD', lr=0.002, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='CosineAnnealing',\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=0.01,\n    min_lr=1e-06)\nrunner = dict(type='EpochBasedRunner', max_epochs=50)\nmodel = dict(\n    type='CenterNet',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        norm_eval=False,\n        norm_cfg=dict(type='BN'),\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='CTResNetNeck',\n        in_channel=2048,\n        num_deconv_filters=(256, 128, 64),\n        num_deconv_kernels=(4, 4, 4),\n        use_dcn=True),\n    bbox_head=dict(\n        type='CenterNetHead',\n        num_classes=10,\n        in_channel=64,\n        feat_channel=64,\n        loss_center_heatmap=dict(type='GaussianFocalLoss', loss_weight=1.0),\n        loss_wh=dict(type='L1Loss', loss_weight=0.1),\n        loss_offset=dict(type='L1Loss', loss_weight=1.0)),\n    train_cfg=None,\n    test_cfg=dict(topk=100, local_maximum_kernel=3, max_per_img=100))\nwork_dir = './work_dirs/CenterNet_R50'\ngpu_ids = range(0, 1)\n", "seed": 2021, "exp_name": "CenterNet_R50.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00012, "memory": 1027, "data_time": 0.04887, "loss_center_heatmap": 10.55921, "loss_wh": 2.33689, "loss_offset": 0.49712, "loss": 13.39322, "time": 0.22078}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00022, "memory": 1027, "data_time": 0.00478, "loss_center_heatmap": 3.63008, "loss_wh": 2.3679, "loss_offset": 0.47168, "loss": 6.46966, "time": 0.15874}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00032, "memory": 1027, "data_time": 0.0048, "loss_center_heatmap": 3.48279, "loss_wh": 2.38054, "loss_offset": 0.42909, "loss": 6.29243, "time": 0.15911}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00041, "memory": 1027, "data_time": 0.0047, "loss_center_heatmap": 3.31932, "loss_wh": 2.09187, "loss_offset": 0.38131, "loss": 5.79251, "time": 0.16475}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00051, "memory": 1027, "data_time": 0.00489, "loss_center_heatmap": 3.33328, "loss_wh": 2.26692, "loss_offset": 0.35082, "loss": 5.95102, "time": 0.15667}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00061, "memory": 1027, "data_time": 0.00468, "loss_center_heatmap": 3.28674, "loss_wh": 2.2996, "loss_offset": 0.29355, "loss": 5.8799, "time": 0.15799}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00071, "memory": 1027, "data_time": 0.00483, "loss_center_heatmap": 3.32573, "loss_wh": 2.29744, "loss_offset": 0.27184, "loss": 5.89501, "time": 0.15786}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00081, "memory": 1027, "data_time": 0.00463, "loss_center_heatmap": 3.37833, "loss_wh": 2.47695, "loss_offset": 0.25929, "loss": 6.11457, "time": 0.15584}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00091, "memory": 1027, "data_time": 0.00461, "loss_center_heatmap": 3.3462, "loss_wh": 2.34884, "loss_offset": 0.25187, "loss": 5.94691, "time": 0.15761}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00101, "memory": 1027, "data_time": 0.0049, "loss_center_heatmap": 3.25347, "loss_wh": 2.31957, "loss_offset": 0.24738, "loss": 5.82042, "time": 0.15181}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00111, "memory": 1027, "data_time": 0.00492, "loss_center_heatmap": 3.29861, "loss_wh": 2.42404, "loss_offset": 0.24605, "loss": 5.9687, "time": 0.15333}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00121, "memory": 1027, "data_time": 0.0048, "loss_center_heatmap": 3.34662, "loss_wh": 2.39732, "loss_offset": 0.25152, "loss": 5.99546, "time": 0.15315}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00131, "memory": 1027, "data_time": 0.00472, "loss_center_heatmap": 3.22144, "loss_wh": 2.19122, "loss_offset": 0.25526, "loss": 5.66791, "time": 0.16567}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.0014, "memory": 1027, "data_time": 0.00481, "loss_center_heatmap": 3.25335, "loss_wh": 2.18209, "loss_offset": 0.25037, "loss": 5.68581, "time": 0.15583}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.0015, "memory": 1027, "data_time": 0.0047, "loss_center_heatmap": 3.27681, "loss_wh": 2.27028, "loss_offset": 0.25304, "loss": 5.80013, "time": 0.16334}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.0016, "memory": 1027, "data_time": 0.00484, "loss_center_heatmap": 3.2512, "loss_wh": 2.28952, "loss_offset": 0.2496, "loss": 5.79031, "time": 0.15711}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.0017, "memory": 1027, "data_time": 0.0048, "loss_center_heatmap": 3.33606, "loss_wh": 2.22195, "loss_offset": 0.25374, "loss": 5.81175, "time": 0.15774}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.0018, "memory": 1027, "data_time": 0.00473, "loss_center_heatmap": 3.27637, "loss_wh": 2.33024, "loss_offset": 0.2448, "loss": 5.85141, "time": 0.15503}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.0019, "memory": 1027, "data_time": 0.00471, "loss_center_heatmap": 3.28278, "loss_wh": 2.1667, "loss_offset": 0.24918, "loss": 5.69867, "time": 0.16007}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.002, "memory": 1027, "data_time": 0.00458, "loss_center_heatmap": 3.34537, "loss_wh": 2.23279, "loss_offset": 0.25249, "loss": 5.83066, "time": 0.15729}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.002, "memory": 1027, "data_time": 0.00474, "loss_center_heatmap": 3.37468, "loss_wh": 2.30026, "loss_offset": 0.24379, "loss": 5.91873, "time": 0.15643}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.002, "memory": 1027, "data_time": 0.00478, "loss_center_heatmap": 3.28716, "loss_wh": 2.10663, "loss_offset": 0.25183, "loss": 5.64562, "time": 0.16247}
