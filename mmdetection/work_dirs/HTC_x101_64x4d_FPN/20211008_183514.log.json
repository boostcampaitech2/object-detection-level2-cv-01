{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.3\nMMCV: 1.3.14\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.17.0+044cccd", "config": "dataset_type = 'CocoDataset'\ndata_root = '/opt/ml/detection/dataset/'\nclasses = [\n    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\nimg_norm_cfg = dict(mean=[0, 0, 0], std=[255.0, 255.0, 255.0], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(300, 300), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[0, 0, 0],\n        std=[255.0, 255.0, 255.0],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(300, 300),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/train_kfold1.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(300, 300), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/val_kfold1.json',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(300, 300),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/test.json',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(300, 300),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP_50')\ncheckpoint_config = dict(interval=100)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(type='WandbLoggerHook', init_kwargs=dict(project='mmdetection'))\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\noptimizer = dict(type='SGD', lr=0.0002, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='CosineAnnealing',\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=0.01,\n    min_lr=1e-06)\nrunner = dict(type='EpochBasedRunner', max_epochs=50)\nmodel = dict(\n    type='HybridTaskCascade',\n    backbone=dict(\n        type='ResNeXt',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(\n            type='Pretrained', checkpoint='open-mmlab://resnext101_64x4d'),\n        groups=64,\n        base_width=4),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='HybridTaskCascadeRoIHead',\n        interleaved=True,\n        mask_info_flow=False,\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.001,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\nwork_dir = './work_dirs/HTC_x101_64x4d_FPN'\ngpu_ids = range(0, 1)\n", "seed": 2021, "exp_name": "HTC_x101_64x4d_FPN.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 1e-05, "memory": 3367, "data_time": 0.04844, "loss_rpn_cls": 0.68499, "loss_rpn_bbox": 0.04367, "s0.loss_cls": 1.08791, "s0.acc": 73.04395, "s0.loss_bbox": 0.11617, "s1.loss_cls": 0.73256, "s1.acc": 51.01367, "s1.loss_bbox": 0.03499, "s2.loss_cls": 0.58906, "s2.acc": 24.68848, "s2.loss_bbox": 0.00991, "loss": 3.29927, "time": 0.44277}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 2e-05, "memory": 3367, "data_time": 0.00497, "loss_rpn_cls": 0.66172, "loss_rpn_bbox": 0.03998, "s0.loss_cls": 0.2659, "s0.acc": 96.60352, "s0.loss_bbox": 0.08993, "s1.loss_cls": 0.1342, "s1.acc": 96.18359, "s1.loss_bbox": 0.03238, "s2.loss_cls": 0.15208, "s2.acc": 87.65039, "s2.loss_bbox": 0.01083, "loss": 1.38702, "time": 0.39008}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 3e-05, "memory": 3367, "data_time": 0.0048, "loss_rpn_cls": 0.60789, "loss_rpn_bbox": 0.03712, "s0.loss_cls": 0.24207, "s0.acc": 96.5752, "s0.loss_bbox": 0.09242, "s1.loss_cls": 0.09091, "s1.acc": 98.01074, "s1.loss_bbox": 0.03501, "s2.loss_cls": 0.05709, "s2.acc": 96.73535, "s2.loss_bbox": 0.01071, "loss": 1.17321, "time": 0.38827}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 4e-05, "memory": 3367, "data_time": 0.00474, "loss_rpn_cls": 0.52646, "loss_rpn_bbox": 0.04493, "s0.loss_cls": 0.26645, "s0.acc": 95.60156, "s0.loss_bbox": 0.11437, "s1.loss_cls": 0.08897, "s1.acc": 97.74512, "s1.loss_bbox": 0.03476, "s2.loss_cls": 0.03903, "s2.acc": 98.15039, "s2.loss_bbox": 0.01113, "loss": 1.1261, "time": 0.39372}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 5e-05, "memory": 3367, "data_time": 0.00498, "loss_rpn_cls": 0.37998, "loss_rpn_bbox": 0.03606, "s0.loss_cls": 0.2465, "s0.acc": 95.73145, "s0.loss_bbox": 0.11435, "s1.loss_cls": 0.08032, "s1.acc": 97.92285, "s1.loss_bbox": 0.03572, "s2.loss_cls": 0.02734, "s2.acc": 98.60938, "s2.loss_bbox": 0.00858, "loss": 0.92885, "time": 0.39348}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 6e-05, "memory": 3367, "data_time": 0.00498, "loss_rpn_cls": 0.24619, "loss_rpn_bbox": 0.0387, "s0.loss_cls": 0.26725, "s0.acc": 94.92383, "s0.loss_bbox": 0.13566, "s1.loss_cls": 0.08295, "s1.acc": 97.7168, "s1.loss_bbox": 0.03903, "s2.loss_cls": 0.02983, "s2.acc": 98.58594, "s2.loss_bbox": 0.00911, "loss": 0.84872, "time": 0.40367}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 7e-05, "memory": 3367, "data_time": 0.00498, "loss_rpn_cls": 0.19047, "loss_rpn_bbox": 0.03337, "s0.loss_cls": 0.25424, "s0.acc": 94.99121, "s0.loss_bbox": 0.12766, "s1.loss_cls": 0.0766, "s1.acc": 97.69824, "s1.loss_bbox": 0.03885, "s2.loss_cls": 0.02646, "s2.acc": 98.72559, "s2.loss_bbox": 0.00714, "loss": 0.75479, "time": 0.39459}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 8e-05, "memory": 3367, "data_time": 0.00491, "loss_rpn_cls": 0.17646, "loss_rpn_bbox": 0.03463, "s0.loss_cls": 0.25699, "s0.acc": 94.87988, "s0.loss_bbox": 0.12751, "s1.loss_cls": 0.07477, "s1.acc": 97.72461, "s1.loss_bbox": 0.03768, "s2.loss_cls": 0.02464, "s2.acc": 98.72949, "s2.loss_bbox": 0.00709, "loss": 0.73976, "time": 0.39495}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 9e-05, "memory": 3367, "data_time": 0.0049, "loss_rpn_cls": 0.16644, "loss_rpn_bbox": 0.03155, "s0.loss_cls": 0.27309, "s0.acc": 94.63672, "s0.loss_bbox": 0.13046, "s1.loss_cls": 0.07709, "s1.acc": 97.65234, "s1.loss_bbox": 0.03908, "s2.loss_cls": 0.02363, "s2.acc": 98.75488, "s2.loss_bbox": 0.00661, "loss": 0.74794, "time": 0.39547}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.0001, "memory": 3367, "data_time": 0.00487, "loss_rpn_cls": 0.14799, "loss_rpn_bbox": 0.02829, "s0.loss_cls": 0.23883, "s0.acc": 95.04004, "s0.loss_bbox": 0.11685, "s1.loss_cls": 0.06827, "s1.acc": 97.77441, "s1.loss_bbox": 0.03656, "s2.loss_cls": 0.02156, "s2.acc": 98.8252, "s2.loss_bbox": 0.00631, "loss": 0.66466, "time": 0.3941}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00011, "memory": 3367, "data_time": 0.00494, "loss_rpn_cls": 0.14349, "loss_rpn_bbox": 0.02699, "s0.loss_cls": 0.25736, "s0.acc": 94.68848, "s0.loss_bbox": 0.12395, "s1.loss_cls": 0.07129, "s1.acc": 97.69434, "s1.loss_bbox": 0.03904, "s2.loss_cls": 0.0222, "s2.acc": 98.80664, "s2.loss_bbox": 0.00659, "loss": 0.69091, "time": 0.39608}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00012, "memory": 3367, "data_time": 0.00498, "loss_rpn_cls": 0.14805, "loss_rpn_bbox": 0.02842, "s0.loss_cls": 0.24954, "s0.acc": 94.39355, "s0.loss_bbox": 0.12524, "s1.loss_cls": 0.06993, "s1.acc": 97.5791, "s1.loss_bbox": 0.04024, "s2.loss_cls": 0.02216, "s2.acc": 98.76855, "s2.loss_bbox": 0.00648, "loss": 0.69006, "time": 0.39624}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00013, "memory": 3367, "data_time": 0.00478, "loss_rpn_cls": 0.1796, "loss_rpn_bbox": 0.03717, "s0.loss_cls": 0.30347, "s0.acc": 93.16602, "s0.loss_bbox": 0.1536, "s1.loss_cls": 0.08673, "s1.acc": 96.98828, "s1.loss_bbox": 0.04823, "s2.loss_cls": 0.0281, "s2.acc": 98.38281, "s2.loss_bbox": 0.00796, "loss": 0.84484, "time": 0.39942}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00014, "memory": 3367, "data_time": 0.00517, "loss_rpn_cls": 0.157, "loss_rpn_bbox": 0.03066, "s0.loss_cls": 0.26732, "s0.acc": 94.26855, "s0.loss_bbox": 0.12819, "s1.loss_cls": 0.07487, "s1.acc": 97.51465, "s1.loss_bbox": 0.04039, "s2.loss_cls": 0.02316, "s2.acc": 98.72168, "s2.loss_bbox": 0.0063, "loss": 0.72789, "time": 0.39633}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00015, "memory": 3367, "data_time": 0.00518, "loss_rpn_cls": 0.16044, "loss_rpn_bbox": 0.03308, "s0.loss_cls": 0.30026, "s0.acc": 93.18066, "s0.loss_bbox": 0.15304, "s1.loss_cls": 0.08801, "s1.acc": 96.88184, "s1.loss_bbox": 0.04999, "s2.loss_cls": 0.02757, "s2.acc": 98.37305, "s2.loss_bbox": 0.00812, "loss": 0.82053, "time": 0.39803}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.00016, "memory": 3367, "data_time": 0.00515, "loss_rpn_cls": 0.14681, "loss_rpn_bbox": 0.02978, "s0.loss_cls": 0.26269, "s0.acc": 93.98438, "s0.loss_bbox": 0.13, "s1.loss_cls": 0.07395, "s1.acc": 97.4082, "s1.loss_bbox": 0.04074, "s2.loss_cls": 0.02306, "s2.acc": 98.66211, "s2.loss_bbox": 0.00646, "loss": 0.71348, "time": 0.39629}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00017, "memory": 3367, "data_time": 0.00523, "loss_rpn_cls": 0.15638, "loss_rpn_bbox": 0.03261, "s0.loss_cls": 0.29241, "s0.acc": 93.43945, "s0.loss_bbox": 0.14502, "s1.loss_cls": 0.08305, "s1.acc": 97.08887, "s1.loss_bbox": 0.0488, "s2.loss_cls": 0.02527, "s2.acc": 98.53613, "s2.loss_bbox": 0.00818, "loss": 0.79171, "time": 0.39867}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00018, "memory": 3367, "data_time": 0.00517, "loss_rpn_cls": 0.13833, "loss_rpn_bbox": 0.02736, "s0.loss_cls": 0.2664, "s0.acc": 93.9541, "s0.loss_bbox": 0.12849, "s1.loss_cls": 0.07416, "s1.acc": 97.3916, "s1.loss_bbox": 0.04231, "s2.loss_cls": 0.0232, "s2.acc": 98.66113, "s2.loss_bbox": 0.00703, "loss": 0.70728, "time": 0.39775}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00019, "memory": 3367, "data_time": 0.00544, "loss_rpn_cls": 0.16293, "loss_rpn_bbox": 0.03862, "s0.loss_cls": 0.30872, "s0.acc": 92.76758, "s0.loss_bbox": 0.15825, "s1.loss_cls": 0.08441, "s1.acc": 96.98242, "s1.loss_bbox": 0.04882, "s2.loss_cls": 0.02595, "s2.acc": 98.45703, "s2.loss_bbox": 0.00791, "loss": 0.83562, "time": 0.39892}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.0002, "memory": 3367, "data_time": 0.00517, "loss_rpn_cls": 0.15304, "loss_rpn_bbox": 0.0362, "s0.loss_cls": 0.27377, "s0.acc": 93.69629, "s0.loss_bbox": 0.13126, "s1.loss_cls": 0.07531, "s1.acc": 97.26367, "s1.loss_bbox": 0.04333, "s2.loss_cls": 0.0236, "s2.acc": 98.58008, "s2.loss_bbox": 0.00687, "loss": 0.7434, "time": 0.39854}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.0002, "memory": 3367, "data_time": 0.00535, "loss_rpn_cls": 0.12042, "loss_rpn_bbox": 0.02628, "s0.loss_cls": 0.26084, "s0.acc": 94.13477, "s0.loss_bbox": 0.12017, "s1.loss_cls": 0.07042, "s1.acc": 97.49316, "s1.loss_bbox": 0.04038, "s2.loss_cls": 0.02108, "s2.acc": 98.76367, "s2.loss_bbox": 0.00646, "loss": 0.66605, "time": 0.40678}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.0002, "memory": 3367, "data_time": 0.00531, "loss_rpn_cls": 0.16008, "loss_rpn_bbox": 0.03695, "s0.loss_cls": 0.30013, "s0.acc": 92.99414, "s0.loss_bbox": 0.14892, "s1.loss_cls": 0.084, "s1.acc": 96.90039, "s1.loss_bbox": 0.04908, "s2.loss_cls": 0.02616, "s2.acc": 98.41602, "s2.loss_bbox": 0.0085, "loss": 0.81382, "time": 0.40351}
{"mode": "val", "epoch": 1, "iter": 448, "lr": 0.0002, "bbox_mAP": 0.009, "bbox_mAP_50": 0.03, "bbox_mAP_75": 0.002, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.011, "bbox_mAP_copypaste": "0.009 0.030 0.002 0.000 0.000 0.011"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.0002, "memory": 3367, "data_time": 0.049, "loss_rpn_cls": 0.13777, "loss_rpn_bbox": 0.03026, "s0.loss_cls": 0.26547, "s0.acc": 93.56152, "s0.loss_bbox": 0.13227, "s1.loss_cls": 0.0722, "s1.acc": 97.33496, "s1.loss_bbox": 0.04161, "s2.loss_cls": 0.02228, "s2.acc": 98.65625, "s2.loss_bbox": 0.00718, "loss": 0.70904, "time": 0.4445}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.0002, "memory": 3367, "data_time": 0.00554, "loss_rpn_cls": 0.13942, "loss_rpn_bbox": 0.03024, "s0.loss_cls": 0.27602, "s0.acc": 93.24121, "s0.loss_bbox": 0.13645, "s1.loss_cls": 0.07628, "s1.acc": 97.0791, "s1.loss_bbox": 0.04607, "s2.loss_cls": 0.02424, "s2.acc": 98.52051, "s2.loss_bbox": 0.00803, "loss": 0.73674, "time": 0.40777}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.0002, "memory": 3367, "data_time": 0.00526, "loss_rpn_cls": 0.15134, "loss_rpn_bbox": 0.03502, "s0.loss_cls": 0.28651, "s0.acc": 92.95508, "s0.loss_bbox": 0.14818, "s1.loss_cls": 0.08122, "s1.acc": 96.89258, "s1.loss_bbox": 0.04865, "s2.loss_cls": 0.02522, "s2.acc": 98.43457, "s2.loss_bbox": 0.00821, "loss": 0.78435, "time": 0.39986}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.0002, "memory": 3367, "data_time": 0.0053, "loss_rpn_cls": 0.13666, "loss_rpn_bbox": 0.03495, "s0.loss_cls": 0.24836, "s0.acc": 94.14453, "s0.loss_bbox": 0.11561, "s1.loss_cls": 0.06757, "s1.acc": 97.49902, "s1.loss_bbox": 0.03696, "s2.loss_cls": 0.02163, "s2.acc": 98.7002, "s2.loss_bbox": 0.00605, "loss": 0.66779, "time": 0.40002}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.0002, "memory": 3367, "data_time": 0.00533, "loss_rpn_cls": 0.1306, "loss_rpn_bbox": 0.03216, "s0.loss_cls": 0.26805, "s0.acc": 93.40234, "s0.loss_bbox": 0.13736, "s1.loss_cls": 0.07303, "s1.acc": 97.15918, "s1.loss_bbox": 0.04582, "s2.loss_cls": 0.0222, "s2.acc": 98.60352, "s2.loss_bbox": 0.0074, "loss": 0.71663, "time": 0.39862}
