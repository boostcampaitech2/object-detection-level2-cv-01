{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.3\nMMCV: 1.3.14\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.17.0+044cccd", "config": "dataset_type = 'CocoDataset'\ndata_root = '/opt/ml/detection/dataset/'\nclasses = [\n    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\nimg_norm_cfg = dict(mean=[0, 0, 0], std=[255.0, 255.0, 255.0], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(300, 300), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[0, 0, 0],\n        std=[255.0, 255.0, 255.0],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(300, 300),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/train_kfold1.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(300, 300), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/val_kfold1.json',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(300, 300),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/test.json',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(300, 300),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP_50')\ncheckpoint_config = dict(interval=100)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(type='WandbLoggerHook', init_kwargs=dict(project='mmdetection'))\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\noptimizer = dict(\n    type='Adam',\n    lr=0.0001,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='CosineAnnealing',\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=0.01,\n    min_lr=1e-06)\nrunner = dict(type='EpochBasedRunner', max_epochs=50)\nmodel = dict(\n    type='HybridTaskCascade',\n    backbone=dict(\n        type='ResNeXt',\n        depth=101,\n        groups=64,\n        base_width=4,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(\n            type='Pretrained', checkpoint='open-mmlab://resnext101_64x4d')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='CIoULoss', eps=1e-06)),\n    roi_head=dict(\n        type='HybridTaskCascadeRoIHead',\n        interleaved=True,\n        mask_info_flow=False,\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.001,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\nwork_dir = './work_dirs/HTC_x101_64x4d_FPN_CIoU'\ngpu_ids = range(0, 1)\n", "seed": 2021, "exp_name": "HTC_x101_64x4d_FPN_CIoU.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 1e-05, "memory": 3850, "data_time": 0.04887, "loss_rpn_cls": 0.6564, "loss_rpn_bbox": 0.1099, "s0.loss_cls": 0.59304, "s0.acc": 88.16992, "s0.loss_bbox": 0.10995, "s1.loss_cls": 0.31377, "s1.acc": 82.94336, "s1.loss_bbox": 0.0391, "s2.loss_cls": 0.21894, "s2.acc": 75.64551, "s2.loss_bbox": 0.01135, "loss": 2.05246, "time": 0.47316}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 3850, "data_time": 0.00497, "loss_rpn_cls": 0.43685, "loss_rpn_bbox": 0.09452, "s0.loss_cls": 0.25789, "s0.acc": 95.25098, "s0.loss_bbox": 0.12333, "s1.loss_cls": 0.07833, "s1.acc": 97.82031, "s1.loss_bbox": 0.03458, "s2.loss_cls": 0.02659, "s2.acc": 98.67676, "s2.loss_bbox": 0.00647, "loss": 1.05856, "time": 0.422}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 2e-05, "memory": 3850, "data_time": 0.00487, "loss_rpn_cls": 0.17963, "loss_rpn_bbox": 0.07189, "s0.loss_cls": 0.26364, "s0.acc": 94.85156, "s0.loss_bbox": 0.12743, "s1.loss_cls": 0.07535, "s1.acc": 97.63086, "s1.loss_bbox": 0.03877, "s2.loss_cls": 0.02517, "s2.acc": 98.65527, "s2.loss_bbox": 0.00719, "loss": 0.78907, "time": 0.42873}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 2e-05, "memory": 3850, "data_time": 0.00492, "loss_rpn_cls": 0.19464, "loss_rpn_bbox": 0.07718, "s0.loss_cls": 0.24434, "s0.acc": 94.96484, "s0.loss_bbox": 0.11144, "s1.loss_cls": 0.07321, "s1.acc": 97.57617, "s1.loss_bbox": 0.03296, "s2.loss_cls": 0.02648, "s2.acc": 98.52637, "s2.loss_bbox": 0.00596, "loss": 0.76622, "time": 0.42716}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 3e-05, "memory": 3850, "data_time": 0.00487, "loss_rpn_cls": 0.15258, "loss_rpn_bbox": 0.0648, "s0.loss_cls": 0.22422, "s0.acc": 95.13184, "s0.loss_bbox": 0.09572, "s1.loss_cls": 0.06388, "s1.acc": 97.82227, "s1.loss_bbox": 0.03131, "s2.loss_cls": 0.02161, "s2.acc": 98.79199, "s2.loss_bbox": 0.00532, "loss": 0.65944, "time": 0.43012}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 3e-05, "memory": 3850, "data_time": 0.00488, "loss_rpn_cls": 0.15963, "loss_rpn_bbox": 0.06765, "s0.loss_cls": 0.24633, "s0.acc": 94.79102, "s0.loss_bbox": 0.10174, "s1.loss_cls": 0.06903, "s1.acc": 97.61523, "s1.loss_bbox": 0.03339, "s2.loss_cls": 0.02349, "s2.acc": 98.68945, "s2.loss_bbox": 0.00522, "loss": 0.70649, "time": 0.43186}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 4e-05, "memory": 3850, "data_time": 0.00511, "loss_rpn_cls": 0.13981, "loss_rpn_bbox": 0.06195, "s0.loss_cls": 0.22486, "s0.acc": 95.18555, "s0.loss_bbox": 0.09465, "s1.loss_cls": 0.06167, "s1.acc": 97.79688, "s1.loss_bbox": 0.03006, "s2.loss_cls": 0.02107, "s2.acc": 98.75684, "s2.loss_bbox": 0.00479, "loss": 0.63887, "time": 0.43593}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 4e-05, "memory": 3850, "data_time": 0.00509, "loss_rpn_cls": 0.15196, "loss_rpn_bbox": 0.06273, "s0.loss_cls": 0.2454, "s0.acc": 95.10352, "s0.loss_bbox": 0.09664, "s1.loss_cls": 0.07075, "s1.acc": 97.64941, "s1.loss_bbox": 0.03293, "s2.loss_cls": 0.02321, "s2.acc": 98.69043, "s2.loss_bbox": 0.00575, "loss": 0.68938, "time": 0.43481}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 5e-05, "memory": 3850, "data_time": 0.00518, "loss_rpn_cls": 0.15457, "loss_rpn_bbox": 0.06088, "s0.loss_cls": 0.27474, "s0.acc": 94.67871, "s0.loss_bbox": 0.10552, "s1.loss_cls": 0.07393, "s1.acc": 97.59375, "s1.loss_bbox": 0.03463, "s2.loss_cls": 0.02328, "s2.acc": 98.72266, "s2.loss_bbox": 0.00577, "loss": 0.73332, "time": 0.44217}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 5e-05, "memory": 3850, "data_time": 0.00502, "loss_rpn_cls": 0.12897, "loss_rpn_bbox": 0.05461, "s0.loss_cls": 0.22063, "s0.acc": 95.28613, "s0.loss_bbox": 0.08658, "s1.loss_cls": 0.06082, "s1.acc": 97.83984, "s1.loss_bbox": 0.03072, "s2.loss_cls": 0.01958, "s2.acc": 98.83203, "s2.loss_bbox": 0.00512, "loss": 0.60703, "time": 0.44297}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 6e-05, "memory": 3850, "data_time": 0.00506, "loss_rpn_cls": 0.13204, "loss_rpn_bbox": 0.05475, "s0.loss_cls": 0.25307, "s0.acc": 94.93457, "s0.loss_bbox": 0.09977, "s1.loss_cls": 0.06926, "s1.acc": 97.68848, "s1.loss_bbox": 0.03365, "s2.loss_cls": 0.02062, "s2.acc": 98.81348, "s2.loss_bbox": 0.00506, "loss": 0.66822, "time": 0.4429}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 6e-05, "memory": 3850, "data_time": 0.00523, "loss_rpn_cls": 0.13655, "loss_rpn_bbox": 0.05775, "s0.loss_cls": 0.23068, "s0.acc": 95.18262, "s0.loss_bbox": 0.08795, "s1.loss_cls": 0.06232, "s1.acc": 97.7998, "s1.loss_bbox": 0.02944, "s2.loss_cls": 0.01945, "s2.acc": 98.82812, "s2.loss_bbox": 0.00433, "loss": 0.62846, "time": 0.43935}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 7e-05, "memory": 3850, "data_time": 0.00511, "loss_rpn_cls": 0.1832, "loss_rpn_bbox": 0.07345, "s0.loss_cls": 0.29624, "s0.acc": 94.31445, "s0.loss_bbox": 0.11435, "s1.loss_cls": 0.08437, "s1.acc": 97.28418, "s1.loss_bbox": 0.03707, "s2.loss_cls": 0.02683, "s2.acc": 98.47266, "s2.loss_bbox": 0.00531, "loss": 0.82081, "time": 0.44116}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 7e-05, "memory": 3850, "data_time": 0.00509, "loss_rpn_cls": 0.1595, "loss_rpn_bbox": 0.06132, "s0.loss_cls": 0.23338, "s0.acc": 95.61816, "s0.loss_bbox": 0.08733, "s1.loss_cls": 0.06506, "s1.acc": 97.89941, "s1.loss_bbox": 0.0283, "s2.loss_cls": 0.02076, "s2.acc": 98.80469, "s2.loss_bbox": 0.00421, "loss": 0.65986, "time": 0.43584}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 8e-05, "memory": 3850, "data_time": 0.00515, "loss_rpn_cls": 0.1799, "loss_rpn_bbox": 0.06876, "s0.loss_cls": 0.27131, "s0.acc": 95.08105, "s0.loss_bbox": 0.09929, "s1.loss_cls": 0.07918, "s1.acc": 97.54004, "s1.loss_bbox": 0.03222, "s2.loss_cls": 0.02606, "s2.acc": 98.50098, "s2.loss_bbox": 0.00551, "loss": 0.76224, "time": 0.43551}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 8e-05, "memory": 3850, "data_time": 0.00515, "loss_rpn_cls": 0.18336, "loss_rpn_bbox": 0.059, "s0.loss_cls": 0.20752, "s0.acc": 96.30566, "s0.loss_bbox": 0.07497, "s1.loss_cls": 0.06104, "s1.acc": 98.06836, "s1.loss_bbox": 0.02416, "s2.loss_cls": 0.02099, "s2.acc": 98.82324, "s2.loss_bbox": 0.00323, "loss": 0.63426, "time": 0.42642}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 9e-05, "memory": 3850, "data_time": 0.00521, "loss_rpn_cls": 0.18903, "loss_rpn_bbox": 0.06495, "s0.loss_cls": 0.23588, "s0.acc": 95.70996, "s0.loss_bbox": 0.09143, "s1.loss_cls": 0.06746, "s1.acc": 97.87305, "s1.loss_bbox": 0.02881, "s2.loss_cls": 0.0226, "s2.acc": 98.70215, "s2.loss_bbox": 0.00486, "loss": 0.70503, "time": 0.42868}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 9e-05, "memory": 3850, "data_time": 0.0054, "loss_rpn_cls": 0.17079, "loss_rpn_bbox": 0.0561, "s0.loss_cls": 0.24016, "s0.acc": 95.7168, "s0.loss_bbox": 0.09213, "s1.loss_cls": 0.06576, "s1.acc": 97.96973, "s1.loss_bbox": 0.02792, "s2.loss_cls": 0.02151, "s2.acc": 98.80176, "s2.loss_bbox": 0.0045, "loss": 0.67887, "time": 0.43034}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 9e-05, "memory": 3850, "data_time": 0.0054, "loss_rpn_cls": 0.20837, "loss_rpn_bbox": 0.07422, "s0.loss_cls": 0.24874, "s0.acc": 95.53516, "s0.loss_bbox": 0.09164, "s1.loss_cls": 0.07093, "s1.acc": 97.76855, "s1.loss_bbox": 0.02863, "s2.loss_cls": 0.02351, "s2.acc": 98.64746, "s2.loss_bbox": 0.00435, "loss": 0.75039, "time": 0.42785}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.0001, "memory": 3850, "data_time": 0.00537, "loss_rpn_cls": 0.20987, "loss_rpn_bbox": 0.06817, "s0.loss_cls": 0.2037, "s0.acc": 96.41992, "s0.loss_bbox": 0.06969, "s1.loss_cls": 0.06109, "s1.acc": 98.12207, "s1.loss_bbox": 0.02128, "s2.loss_cls": 0.02206, "s2.acc": 98.75879, "s2.loss_bbox": 0.00356, "loss": 0.65942, "time": 0.43114}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.0001, "memory": 3850, "data_time": 0.00529, "loss_rpn_cls": 0.1716, "loss_rpn_bbox": 0.05382, "s0.loss_cls": 0.18915, "s0.acc": 96.84375, "s0.loss_bbox": 0.06404, "s1.loss_cls": 0.05521, "s1.acc": 98.39844, "s1.loss_bbox": 0.01933, "s2.loss_cls": 0.01908, "s2.acc": 98.99414, "s2.loss_bbox": 0.00286, "loss": 0.5751, "time": 0.4324}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.0001, "memory": 3850, "data_time": 0.00532, "loss_rpn_cls": 0.2189, "loss_rpn_bbox": 0.07169, "s0.loss_cls": 0.25646, "s0.acc": 95.60352, "s0.loss_bbox": 0.09098, "s1.loss_cls": 0.07317, "s1.acc": 97.77441, "s1.loss_bbox": 0.02871, "s2.loss_cls": 0.02454, "s2.acc": 98.63867, "s2.loss_bbox": 0.00447, "loss": 0.76891, "time": 0.43208}
{"mode": "val", "epoch": 1, "iter": 448, "lr": 0.0001, "bbox_mAP": 0.001, "bbox_mAP_50": 0.003, "bbox_mAP_75": 0.001, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.001, "bbox_mAP_copypaste": "0.001 0.003 0.001 0.000 0.000 0.001"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.0001, "memory": 3850, "data_time": 0.04902, "loss_rpn_cls": 0.19235, "loss_rpn_bbox": 0.06164, "s0.loss_cls": 0.21543, "s0.acc": 96.2793, "s0.loss_bbox": 0.07657, "s1.loss_cls": 0.06041, "s1.acc": 98.16992, "s1.loss_bbox": 0.02283, "s2.loss_cls": 0.02028, "s2.acc": 98.87891, "s2.loss_bbox": 0.00323, "loss": 0.65273, "time": 0.47541}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.0001, "memory": 3850, "data_time": 0.00509, "loss_rpn_cls": 0.19106, "loss_rpn_bbox": 0.06097, "s0.loss_cls": 0.25094, "s0.acc": 95.46582, "s0.loss_bbox": 0.09873, "s1.loss_cls": 0.07039, "s1.acc": 97.82422, "s1.loss_bbox": 0.02935, "s2.loss_cls": 0.02349, "s2.acc": 98.70508, "s2.loss_bbox": 0.0046, "loss": 0.72953, "time": 0.42987}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.0001, "memory": 3850, "data_time": 0.00511, "loss_rpn_cls": 0.21441, "loss_rpn_bbox": 0.07149, "s0.loss_cls": 0.23667, "s0.acc": 95.89062, "s0.loss_bbox": 0.08613, "s1.loss_cls": 0.06658, "s1.acc": 97.97754, "s1.loss_bbox": 0.02449, "s2.loss_cls": 0.02302, "s2.acc": 98.72363, "s2.loss_bbox": 0.00345, "loss": 0.72624, "time": 0.43248}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.0001, "memory": 3850, "data_time": 0.00539, "loss_rpn_cls": 0.20098, "loss_rpn_bbox": 0.06403, "s0.loss_cls": 0.21541, "s0.acc": 96.3125, "s0.loss_bbox": 0.07612, "s1.loss_cls": 0.06166, "s1.acc": 98.15234, "s1.loss_bbox": 0.02306, "s2.loss_cls": 0.02111, "s2.acc": 98.85156, "s2.loss_bbox": 0.00337, "loss": 0.66572, "time": 0.43864}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.0001, "memory": 3850, "data_time": 0.00527, "loss_rpn_cls": 0.19595, "loss_rpn_bbox": 0.06338, "s0.loss_cls": 0.23248, "s0.acc": 96.0, "s0.loss_bbox": 0.08577, "s1.loss_cls": 0.06694, "s1.acc": 98.01465, "s1.loss_bbox": 0.02644, "s2.loss_cls": 0.02234, "s2.acc": 98.80078, "s2.loss_bbox": 0.00411, "loss": 0.69741, "time": 0.42643}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.0001, "memory": 3850, "data_time": 0.00527, "loss_rpn_cls": 0.18041, "loss_rpn_bbox": 0.05866, "s0.loss_cls": 0.23537, "s0.acc": 95.79688, "s0.loss_bbox": 0.09207, "s1.loss_cls": 0.06456, "s1.acc": 98.01367, "s1.loss_bbox": 0.02711, "s2.loss_cls": 0.02152, "s2.acc": 98.81152, "s2.loss_bbox": 0.00465, "loss": 0.68435, "time": 0.42933}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.0001, "memory": 3850, "data_time": 0.00525, "loss_rpn_cls": 0.20748, "loss_rpn_bbox": 0.06696, "s0.loss_cls": 0.22668, "s0.acc": 96.13965, "s0.loss_bbox": 0.07623, "s1.loss_cls": 0.06902, "s1.acc": 97.96973, "s1.loss_bbox": 0.02309, "s2.loss_cls": 0.02474, "s2.acc": 98.67383, "s2.loss_bbox": 0.00366, "loss": 0.69786, "time": 0.4394}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.0001, "memory": 3850, "data_time": 0.00521, "loss_rpn_cls": 0.22801, "loss_rpn_bbox": 0.07402, "s0.loss_cls": 0.26159, "s0.acc": 95.55273, "s0.loss_bbox": 0.09269, "s1.loss_cls": 0.0761, "s1.acc": 97.74121, "s1.loss_bbox": 0.0281, "s2.loss_cls": 0.02651, "s2.acc": 98.57812, "s2.loss_bbox": 0.00469, "loss": 0.79171, "time": 0.43021}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.0001, "memory": 3850, "data_time": 0.00513, "loss_rpn_cls": 0.20109, "loss_rpn_bbox": 0.06397, "s0.loss_cls": 0.22124, "s0.acc": 96.18848, "s0.loss_bbox": 0.08029, "s1.loss_cls": 0.06426, "s1.acc": 98.05859, "s1.loss_bbox": 0.02551, "s2.loss_cls": 0.02185, "s2.acc": 98.80859, "s2.loss_bbox": 0.00404, "loss": 0.68225, "time": 0.43124}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.0001, "memory": 3850, "data_time": 0.00522, "loss_rpn_cls": 0.18458, "loss_rpn_bbox": 0.05998, "s0.loss_cls": 0.19499, "s0.acc": 96.67188, "s0.loss_bbox": 0.06764, "s1.loss_cls": 0.05619, "s1.acc": 98.3291, "s1.loss_bbox": 0.01962, "s2.loss_cls": 0.02006, "s2.acc": 98.93555, "s2.loss_bbox": 0.00264, "loss": 0.60568, "time": 0.43009}
{"mode": "train", "epoch": 2, "iter": 550, "lr": 0.0001, "memory": 3850, "data_time": 0.00514, "loss_rpn_cls": 0.19164, "loss_rpn_bbox": 0.06134, "s0.loss_cls": 0.238, "s0.acc": 95.83301, "s0.loss_bbox": 0.08964, "s1.loss_cls": 0.06643, "s1.acc": 97.97559, "s1.loss_bbox": 0.02628, "s2.loss_cls": 0.02217, "s2.acc": 98.7793, "s2.loss_bbox": 0.00378, "loss": 0.69927, "time": 0.43161}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.0001, "memory": 3850, "data_time": 0.00512, "loss_rpn_cls": 0.17747, "loss_rpn_bbox": 0.0553, "s0.loss_cls": 0.24184, "s0.acc": 95.93652, "s0.loss_bbox": 0.08811, "s1.loss_cls": 0.0689, "s1.acc": 98.01758, "s1.loss_bbox": 0.02766, "s2.loss_cls": 0.02251, "s2.acc": 98.85352, "s2.loss_bbox": 0.00423, "loss": 0.68602, "time": 0.43404}
{"mode": "train", "epoch": 2, "iter": 650, "lr": 0.0001, "memory": 3850, "data_time": 0.00532, "loss_rpn_cls": 0.17812, "loss_rpn_bbox": 0.06067, "s0.loss_cls": 0.23196, "s0.acc": 95.93164, "s0.loss_bbox": 0.08712, "s1.loss_cls": 0.06612, "s1.acc": 97.99609, "s1.loss_bbox": 0.02602, "s2.loss_cls": 0.02261, "s2.acc": 98.78027, "s2.loss_bbox": 0.00407, "loss": 0.67669, "time": 0.45201}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.0001, "memory": 3850, "data_time": 0.00504, "loss_rpn_cls": 0.19489, "loss_rpn_bbox": 0.06229, "s0.loss_cls": 0.22349, "s0.acc": 96.09277, "s0.loss_bbox": 0.08003, "s1.loss_cls": 0.0662, "s1.acc": 97.96973, "s1.loss_bbox": 0.02601, "s2.loss_cls": 0.02249, "s2.acc": 98.75781, "s2.loss_bbox": 0.0036, "loss": 0.679, "time": 0.42912}
{"mode": "train", "epoch": 2, "iter": 750, "lr": 0.0001, "memory": 3850, "data_time": 0.00521, "loss_rpn_cls": 0.18433, "loss_rpn_bbox": 0.06048, "s0.loss_cls": 0.21502, "s0.acc": 96.18359, "s0.loss_bbox": 0.07923, "s1.loss_cls": 0.0618, "s1.acc": 98.10449, "s1.loss_bbox": 0.0239, "s2.loss_cls": 0.02132, "s2.acc": 98.83496, "s2.loss_bbox": 0.00336, "loss": 0.64945, "time": 0.43188}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.0001, "memory": 3850, "data_time": 0.00506, "loss_rpn_cls": 0.18129, "loss_rpn_bbox": 0.05931, "s0.loss_cls": 0.19067, "s0.acc": 96.74707, "s0.loss_bbox": 0.06635, "s1.loss_cls": 0.05802, "s1.acc": 98.29199, "s1.loss_bbox": 0.0204, "s2.loss_cls": 0.02056, "s2.acc": 98.91406, "s2.loss_bbox": 0.00282, "loss": 0.59943, "time": 0.4308}
{"mode": "train", "epoch": 2, "iter": 850, "lr": 0.0001, "memory": 3850, "data_time": 0.00508, "loss_rpn_cls": 0.21118, "loss_rpn_bbox": 0.06759, "s0.loss_cls": 0.22676, "s0.acc": 96.16504, "s0.loss_bbox": 0.0764, "s1.loss_cls": 0.06959, "s1.acc": 97.94531, "s1.loss_bbox": 0.02424, "s2.loss_cls": 0.02487, "s2.acc": 98.67871, "s2.loss_bbox": 0.0036, "loss": 0.70424, "time": 0.43487}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.0001, "memory": 3850, "data_time": 0.00529, "loss_rpn_cls": 0.19036, "loss_rpn_bbox": 0.06245, "s0.loss_cls": 0.2304, "s0.acc": 95.90039, "s0.loss_bbox": 0.08831, "s1.loss_cls": 0.06591, "s1.acc": 97.96484, "s1.loss_bbox": 0.02687, "s2.loss_cls": 0.02243, "s2.acc": 98.75586, "s2.loss_bbox": 0.00418, "loss": 0.69091, "time": 0.44082}
{"mode": "train", "epoch": 2, "iter": 950, "lr": 0.0001, "memory": 3850, "data_time": 0.00505, "loss_rpn_cls": 0.18402, "loss_rpn_bbox": 0.05874, "s0.loss_cls": 0.20203, "s0.acc": 96.48828, "s0.loss_bbox": 0.07402, "s1.loss_cls": 0.05588, "s1.acc": 98.30371, "s1.loss_bbox": 0.02092, "s2.loss_cls": 0.0194, "s2.acc": 98.94141, "s2.loss_bbox": 0.00318, "loss": 0.61819, "time": 0.43211}
{"mode": "train", "epoch": 2, "iter": 1000, "lr": 0.0001, "memory": 3850, "data_time": 0.00523, "loss_rpn_cls": 0.18702, "loss_rpn_bbox": 0.06069, "s0.loss_cls": 0.22976, "s0.acc": 95.98828, "s0.loss_bbox": 0.08439, "s1.loss_cls": 0.06447, "s1.acc": 98.04297, "s1.loss_bbox": 0.02484, "s2.loss_cls": 0.02157, "s2.acc": 98.82227, "s2.loss_bbox": 0.00339, "loss": 0.67613, "time": 0.44051}
{"mode": "train", "epoch": 2, "iter": 1050, "lr": 0.0001, "memory": 3850, "data_time": 0.00527, "loss_rpn_cls": 0.24065, "loss_rpn_bbox": 0.08131, "s0.loss_cls": 0.24676, "s0.acc": 95.49316, "s0.loss_bbox": 0.09173, "s1.loss_cls": 0.07459, "s1.acc": 97.62305, "s1.loss_bbox": 0.02896, "s2.loss_cls": 0.02636, "s2.acc": 98.47949, "s2.loss_bbox": 0.0044, "loss": 0.79476, "time": 0.43163}
{"mode": "train", "epoch": 2, "iter": 1100, "lr": 0.0001, "memory": 3850, "data_time": 0.00516, "loss_rpn_cls": 0.21421, "loss_rpn_bbox": 0.0683, "s0.loss_cls": 0.24101, "s0.acc": 95.76367, "s0.loss_bbox": 0.08713, "s1.loss_cls": 0.06999, "s1.acc": 97.85156, "s1.loss_bbox": 0.02694, "s2.loss_cls": 0.02424, "s2.acc": 98.64648, "s2.loss_bbox": 0.00424, "loss": 0.73607, "time": 0.43123}
{"mode": "val", "epoch": 2, "iter": 448, "lr": 0.0001, "bbox_mAP": 0.001, "bbox_mAP_50": 0.004, "bbox_mAP_75": 0.0, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.001, "bbox_mAP_copypaste": "0.001 0.004 0.000 0.000 0.000 0.001"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.0001, "memory": 3850, "data_time": 0.04885, "loss_rpn_cls": 0.16618, "loss_rpn_bbox": 0.05285, "s0.loss_cls": 0.22398, "s0.acc": 96.05078, "s0.loss_bbox": 0.08532, "s1.loss_cls": 0.06093, "s1.acc": 98.14941, "s1.loss_bbox": 0.02515, "s2.loss_cls": 0.02, "s2.acc": 98.92285, "s2.loss_bbox": 0.00416, "loss": 0.63857, "time": 0.47087}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.0001, "memory": 3850, "data_time": 0.00579, "loss_rpn_cls": 0.18449, "loss_rpn_bbox": 0.06078, "s0.loss_cls": 0.20844, "s0.acc": 96.37402, "s0.loss_bbox": 0.07435, "s1.loss_cls": 0.06131, "s1.acc": 98.11133, "s1.loss_bbox": 0.02348, "s2.loss_cls": 0.02127, "s2.acc": 98.80664, "s2.loss_bbox": 0.0038, "loss": 0.63791, "time": 0.44583}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.0001, "memory": 3850, "data_time": 0.00523, "loss_rpn_cls": 0.18314, "loss_rpn_bbox": 0.05841, "s0.loss_cls": 0.19826, "s0.acc": 96.60547, "s0.loss_bbox": 0.06943, "s1.loss_cls": 0.0565, "s1.acc": 98.29785, "s1.loss_bbox": 0.01976, "s2.loss_cls": 0.02008, "s2.acc": 98.90527, "s2.loss_bbox": 0.00316, "loss": 0.60873, "time": 0.429}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.0001, "memory": 3850, "data_time": 0.00515, "loss_rpn_cls": 0.20898, "loss_rpn_bbox": 0.06919, "s0.loss_cls": 0.25355, "s0.acc": 95.47559, "s0.loss_bbox": 0.09556, "s1.loss_cls": 0.07214, "s1.acc": 97.77832, "s1.loss_bbox": 0.02781, "s2.loss_cls": 0.02501, "s2.acc": 98.60449, "s2.loss_bbox": 0.00457, "loss": 0.75681, "time": 0.43091}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.0001, "memory": 3850, "data_time": 0.00518, "loss_rpn_cls": 0.18678, "loss_rpn_bbox": 0.05822, "s0.loss_cls": 0.20327, "s0.acc": 96.56055, "s0.loss_bbox": 0.06962, "s1.loss_cls": 0.05917, "s1.acc": 98.25488, "s1.loss_bbox": 0.02085, "s2.loss_cls": 0.02034, "s2.acc": 98.91895, "s2.loss_bbox": 0.00271, "loss": 0.62096, "time": 0.42859}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.0001, "memory": 3850, "data_time": 0.00522, "loss_rpn_cls": 0.17845, "loss_rpn_bbox": 0.05576, "s0.loss_cls": 0.21235, "s0.acc": 96.5166, "s0.loss_bbox": 0.0732, "s1.loss_cls": 0.06189, "s1.acc": 98.22656, "s1.loss_bbox": 0.02391, "s2.loss_cls": 0.0205, "s2.acc": 98.93359, "s2.loss_bbox": 0.0036, "loss": 0.62966, "time": 0.42876}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 0.0001, "memory": 3850, "data_time": 0.00525, "loss_rpn_cls": 0.19042, "loss_rpn_bbox": 0.06415, "s0.loss_cls": 0.22168, "s0.acc": 96.19629, "s0.loss_bbox": 0.08068, "s1.loss_cls": 0.0608, "s1.acc": 98.17773, "s1.loss_bbox": 0.02247, "s2.loss_cls": 0.02125, "s2.acc": 98.85938, "s2.loss_bbox": 0.0035, "loss": 0.66494, "time": 0.43282}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.0001, "memory": 3850, "data_time": 0.00524, "loss_rpn_cls": 0.18842, "loss_rpn_bbox": 0.06139, "s0.loss_cls": 0.21806, "s0.acc": 96.16211, "s0.loss_bbox": 0.08038, "s1.loss_cls": 0.06269, "s1.acc": 98.06641, "s1.loss_bbox": 0.02483, "s2.loss_cls": 0.02097, "s2.acc": 98.82715, "s2.loss_bbox": 0.00357, "loss": 0.66032, "time": 0.43926}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.0001, "memory": 3850, "data_time": 0.00531, "loss_rpn_cls": 0.2397, "loss_rpn_bbox": 0.08018, "s0.loss_cls": 0.25641, "s0.acc": 95.40527, "s0.loss_bbox": 0.09221, "s1.loss_cls": 0.07707, "s1.acc": 97.56738, "s1.loss_bbox": 0.02953, "s2.loss_cls": 0.02693, "s2.acc": 98.46582, "s2.loss_bbox": 0.00446, "loss": 0.80649, "time": 0.44048}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.0001, "memory": 3850, "data_time": 0.00525, "loss_rpn_cls": 0.21412, "loss_rpn_bbox": 0.07187, "s0.loss_cls": 0.26972, "s0.acc": 94.91016, "s0.loss_bbox": 0.11108, "s1.loss_cls": 0.0774, "s1.acc": 97.49414, "s1.loss_bbox": 0.03421, "s2.loss_cls": 0.02563, "s2.acc": 98.53125, "s2.loss_bbox": 0.00496, "loss": 0.80898, "time": 0.42916}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.0001, "memory": 3850, "data_time": 0.00529, "loss_rpn_cls": 0.22208, "loss_rpn_bbox": 0.07189, "s0.loss_cls": 0.23566, "s0.acc": 95.74707, "s0.loss_bbox": 0.08805, "s1.loss_cls": 0.06893, "s1.acc": 97.8125, "s1.loss_bbox": 0.02755, "s2.loss_cls": 0.02384, "s2.acc": 98.63965, "s2.loss_bbox": 0.00397, "loss": 0.74196, "time": 0.4326}
{"mode": "train", "epoch": 3, "iter": 600, "lr": 0.0001, "memory": 3850, "data_time": 0.0053, "loss_rpn_cls": 0.16977, "loss_rpn_bbox": 0.05261, "s0.loss_cls": 0.19811, "s0.acc": 96.72852, "s0.loss_bbox": 0.06813, "s1.loss_cls": 0.05838, "s1.acc": 98.31445, "s1.loss_bbox": 0.02123, "s2.loss_cls": 0.02031, "s2.acc": 98.93555, "s2.loss_bbox": 0.00338, "loss": 0.59192, "time": 0.43759}
{"mode": "train", "epoch": 3, "iter": 650, "lr": 0.0001, "memory": 3850, "data_time": 0.00502, "loss_rpn_cls": 0.19374, "loss_rpn_bbox": 0.06316, "s0.loss_cls": 0.20436, "s0.acc": 96.45898, "s0.loss_bbox": 0.0737, "s1.loss_cls": 0.05861, "s1.acc": 98.2373, "s1.loss_bbox": 0.02059, "s2.loss_cls": 0.02058, "s2.acc": 98.86621, "s2.loss_bbox": 0.00312, "loss": 0.63786, "time": 0.43442}
{"mode": "train", "epoch": 3, "iter": 700, "lr": 0.0001, "memory": 3850, "data_time": 0.00528, "loss_rpn_cls": 0.20306, "loss_rpn_bbox": 0.06832, "s0.loss_cls": 0.21392, "s0.acc": 96.38867, "s0.loss_bbox": 0.07209, "s1.loss_cls": 0.06486, "s1.acc": 98.09668, "s1.loss_bbox": 0.02165, "s2.loss_cls": 0.02355, "s2.acc": 98.73828, "s2.loss_bbox": 0.00346, "loss": 0.67091, "time": 0.43206}
{"mode": "train", "epoch": 3, "iter": 750, "lr": 0.0001, "memory": 3850, "data_time": 0.00514, "loss_rpn_cls": 0.21306, "loss_rpn_bbox": 0.06741, "s0.loss_cls": 0.23493, "s0.acc": 95.81641, "s0.loss_bbox": 0.08754, "s1.loss_cls": 0.06848, "s1.acc": 97.87402, "s1.loss_bbox": 0.0264, "s2.loss_cls": 0.02448, "s2.acc": 98.62109, "s2.loss_bbox": 0.00486, "loss": 0.72717, "time": 0.43662}
{"mode": "train", "epoch": 3, "iter": 800, "lr": 0.0001, "memory": 3850, "data_time": 0.00517, "loss_rpn_cls": 0.19378, "loss_rpn_bbox": 0.0627, "s0.loss_cls": 0.21625, "s0.acc": 96.19238, "s0.loss_bbox": 0.0806, "s1.loss_cls": 0.06228, "s1.acc": 98.08398, "s1.loss_bbox": 0.02377, "s2.loss_cls": 0.02153, "s2.acc": 98.79004, "s2.loss_bbox": 0.00377, "loss": 0.66468, "time": 0.43441}
{"mode": "train", "epoch": 3, "iter": 850, "lr": 0.0001, "memory": 3850, "data_time": 0.00509, "loss_rpn_cls": 0.20845, "loss_rpn_bbox": 0.07067, "s0.loss_cls": 0.24271, "s0.acc": 95.61035, "s0.loss_bbox": 0.0932, "s1.loss_cls": 0.07048, "s1.acc": 97.80957, "s1.loss_bbox": 0.02796, "s2.loss_cls": 0.02455, "s2.acc": 98.65137, "s2.loss_bbox": 0.00406, "loss": 0.74208, "time": 0.43268}
{"mode": "train", "epoch": 3, "iter": 900, "lr": 0.0001, "memory": 3850, "data_time": 0.00523, "loss_rpn_cls": 0.17533, "loss_rpn_bbox": 0.0554, "s0.loss_cls": 0.20417, "s0.acc": 96.37793, "s0.loss_bbox": 0.07885, "s1.loss_cls": 0.05688, "s1.acc": 98.25879, "s1.loss_bbox": 0.02248, "s2.loss_cls": 0.01929, "s2.acc": 98.94141, "s2.loss_bbox": 0.00343, "loss": 0.61583, "time": 0.43218}
{"mode": "train", "epoch": 3, "iter": 950, "lr": 0.0001, "memory": 3850, "data_time": 0.00517, "loss_rpn_cls": 0.20209, "loss_rpn_bbox": 0.06813, "s0.loss_cls": 0.23506, "s0.acc": 95.80957, "s0.loss_bbox": 0.08831, "s1.loss_cls": 0.06841, "s1.acc": 97.87695, "s1.loss_bbox": 0.02844, "s2.loss_cls": 0.0228, "s2.acc": 98.72656, "s2.loss_bbox": 0.0043, "loss": 0.71752, "time": 0.43005}
{"mode": "train", "epoch": 3, "iter": 1000, "lr": 0.0001, "memory": 3850, "data_time": 0.00517, "loss_rpn_cls": 0.19289, "loss_rpn_bbox": 0.06233, "s0.loss_cls": 0.2218, "s0.acc": 96.10156, "s0.loss_bbox": 0.08065, "s1.loss_cls": 0.06338, "s1.acc": 98.0791, "s1.loss_bbox": 0.02274, "s2.loss_cls": 0.02246, "s2.acc": 98.77246, "s2.loss_bbox": 0.00353, "loss": 0.66978, "time": 0.42906}
{"mode": "train", "epoch": 3, "iter": 1050, "lr": 0.0001, "memory": 3850, "data_time": 0.00517, "loss_rpn_cls": 0.17114, "loss_rpn_bbox": 0.05406, "s0.loss_cls": 0.19106, "s0.acc": 96.64258, "s0.loss_bbox": 0.07261, "s1.loss_cls": 0.05435, "s1.acc": 98.35449, "s1.loss_bbox": 0.02173, "s2.loss_cls": 0.01852, "s2.acc": 98.99707, "s2.loss_bbox": 0.00343, "loss": 0.58689, "time": 0.42843}
{"mode": "train", "epoch": 3, "iter": 1100, "lr": 0.0001, "memory": 3850, "data_time": 0.00533, "loss_rpn_cls": 0.20994, "loss_rpn_bbox": 0.06799, "s0.loss_cls": 0.20596, "s0.acc": 96.34082, "s0.loss_bbox": 0.07187, "s1.loss_cls": 0.06379, "s1.acc": 98.01367, "s1.loss_bbox": 0.02246, "s2.loss_cls": 0.02339, "s2.acc": 98.68262, "s2.loss_bbox": 0.00363, "loss": 0.66902, "time": 0.43043}
{"mode": "val", "epoch": 3, "iter": 448, "lr": 0.0001, "bbox_mAP": 0.001, "bbox_mAP_50": 0.003, "bbox_mAP_75": 0.0, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.001, "bbox_mAP_copypaste": "0.001 0.003 0.000 0.000 0.000 0.001"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.0001, "memory": 3850, "data_time": 0.04933, "loss_rpn_cls": 0.19024, "loss_rpn_bbox": 0.06078, "s0.loss_cls": 0.23504, "s0.acc": 95.97559, "s0.loss_bbox": 0.08494, "s1.loss_cls": 0.07035, "s1.acc": 97.93262, "s1.loss_bbox": 0.02752, "s2.loss_cls": 0.02401, "s2.acc": 98.73242, "s2.loss_bbox": 0.00441, "loss": 0.69729, "time": 0.4796}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.0001, "memory": 3850, "data_time": 0.00493, "loss_rpn_cls": 0.17678, "loss_rpn_bbox": 0.05654, "s0.loss_cls": 0.21065, "s0.acc": 96.31055, "s0.loss_bbox": 0.07867, "s1.loss_cls": 0.06154, "s1.acc": 98.15039, "s1.loss_bbox": 0.02478, "s2.loss_cls": 0.02104, "s2.acc": 98.88574, "s2.loss_bbox": 0.00389, "loss": 0.6339, "time": 0.43001}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.0001, "memory": 3850, "data_time": 0.00509, "loss_rpn_cls": 0.19035, "loss_rpn_bbox": 0.06183, "s0.loss_cls": 0.22004, "s0.acc": 96.23145, "s0.loss_bbox": 0.0786, "s1.loss_cls": 0.06213, "s1.acc": 98.16602, "s1.loss_bbox": 0.02233, "s2.loss_cls": 0.02215, "s2.acc": 98.83301, "s2.loss_bbox": 0.00346, "loss": 0.66089, "time": 0.42906}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.0001, "memory": 3850, "data_time": 0.00504, "loss_rpn_cls": 0.19447, "loss_rpn_bbox": 0.06424, "s0.loss_cls": 0.21222, "s0.acc": 96.26953, "s0.loss_bbox": 0.07773, "s1.loss_cls": 0.06228, "s1.acc": 98.0957, "s1.loss_bbox": 0.02404, "s2.loss_cls": 0.02149, "s2.acc": 98.83008, "s2.loss_bbox": 0.00346, "loss": 0.65993, "time": 0.43279}
{"mode": "train", "epoch": 4, "iter": 250, "lr": 0.0001, "memory": 3850, "data_time": 0.00494, "loss_rpn_cls": 0.21528, "loss_rpn_bbox": 0.06863, "s0.loss_cls": 0.23133, "s0.acc": 95.87988, "s0.loss_bbox": 0.08661, "s1.loss_cls": 0.06776, "s1.acc": 97.91992, "s1.loss_bbox": 0.02527, "s2.loss_cls": 0.02396, "s2.acc": 98.67676, "s2.loss_bbox": 0.00377, "loss": 0.72263, "time": 0.43537}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 0.0001, "memory": 3850, "data_time": 0.00532, "loss_rpn_cls": 0.18389, "loss_rpn_bbox": 0.06004, "s0.loss_cls": 0.18552, "s0.acc": 96.79688, "s0.loss_bbox": 0.06524, "s1.loss_cls": 0.05398, "s1.acc": 98.37012, "s1.loss_bbox": 0.01955, "s2.loss_cls": 0.01891, "s2.acc": 98.98145, "s2.loss_bbox": 0.00258, "loss": 0.5897, "time": 0.44598}
{"mode": "train", "epoch": 4, "iter": 350, "lr": 0.0001, "memory": 3850, "data_time": 0.00527, "loss_rpn_cls": 0.22599, "loss_rpn_bbox": 0.07548, "s0.loss_cls": 0.24164, "s0.acc": 95.71094, "s0.loss_bbox": 0.08688, "s1.loss_cls": 0.07138, "s1.acc": 97.7793, "s1.loss_bbox": 0.02527, "s2.loss_cls": 0.02561, "s2.acc": 98.54102, "s2.loss_bbox": 0.00397, "loss": 0.75621, "time": 0.43123}
{"mode": "train", "epoch": 4, "iter": 400, "lr": 0.0001, "memory": 3850, "data_time": 0.00518, "loss_rpn_cls": 0.18733, "loss_rpn_bbox": 0.05971, "s0.loss_cls": 0.20893, "s0.acc": 96.35156, "s0.loss_bbox": 0.0778, "s1.loss_cls": 0.05785, "s1.acc": 98.25293, "s1.loss_bbox": 0.02158, "s2.loss_cls": 0.02006, "s2.acc": 98.90918, "s2.loss_bbox": 0.00329, "loss": 0.63656, "time": 0.43451}
{"mode": "train", "epoch": 4, "iter": 450, "lr": 0.0001, "memory": 3850, "data_time": 0.00488, "loss_rpn_cls": 0.18231, "loss_rpn_bbox": 0.06026, "s0.loss_cls": 0.2292, "s0.acc": 95.85156, "s0.loss_bbox": 0.08877, "s1.loss_cls": 0.06538, "s1.acc": 97.94629, "s1.loss_bbox": 0.02705, "s2.loss_cls": 0.02227, "s2.acc": 98.74414, "s2.loss_bbox": 0.00454, "loss": 0.67977, "time": 0.43491}
{"mode": "train", "epoch": 4, "iter": 500, "lr": 0.0001, "memory": 3850, "data_time": 0.00491, "loss_rpn_cls": 0.2077, "loss_rpn_bbox": 0.06788, "s0.loss_cls": 0.22971, "s0.acc": 96.05176, "s0.loss_bbox": 0.08429, "s1.loss_cls": 0.06639, "s1.acc": 97.99707, "s1.loss_bbox": 0.025, "s2.loss_cls": 0.02278, "s2.acc": 98.74316, "s2.loss_bbox": 0.00374, "loss": 0.70749, "time": 0.43761}
{"mode": "train", "epoch": 4, "iter": 550, "lr": 0.0001, "memory": 3850, "data_time": 0.00515, "loss_rpn_cls": 0.21371, "loss_rpn_bbox": 0.06818, "s0.loss_cls": 0.21732, "s0.acc": 96.14355, "s0.loss_bbox": 0.07829, "s1.loss_cls": 0.06483, "s1.acc": 97.99512, "s1.loss_bbox": 0.02405, "s2.loss_cls": 0.02314, "s2.acc": 98.70703, "s2.loss_bbox": 0.00402, "loss": 0.69353, "time": 0.43411}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 0.0001, "memory": 3850, "data_time": 0.0052, "loss_rpn_cls": 0.18901, "loss_rpn_bbox": 0.06144, "s0.loss_cls": 0.21879, "s0.acc": 96.21289, "s0.loss_bbox": 0.07871, "s1.loss_cls": 0.06319, "s1.acc": 98.10254, "s1.loss_bbox": 0.02387, "s2.loss_cls": 0.02183, "s2.acc": 98.81348, "s2.loss_bbox": 0.00377, "loss": 0.66061, "time": 0.43226}
{"mode": "train", "epoch": 4, "iter": 650, "lr": 0.0001, "memory": 3850, "data_time": 0.00524, "loss_rpn_cls": 0.1951, "loss_rpn_bbox": 0.06329, "s0.loss_cls": 0.2002, "s0.acc": 96.5918, "s0.loss_bbox": 0.06985, "s1.loss_cls": 0.05742, "s1.acc": 98.30176, "s1.loss_bbox": 0.0197, "s2.loss_cls": 0.02057, "s2.acc": 98.89941, "s2.loss_bbox": 0.0032, "loss": 0.62934, "time": 0.43131}
{"mode": "train", "epoch": 4, "iter": 700, "lr": 0.0001, "memory": 3850, "data_time": 0.00519, "loss_rpn_cls": 0.18743, "loss_rpn_bbox": 0.05948, "s0.loss_cls": 0.208, "s0.acc": 96.28027, "s0.loss_bbox": 0.07974, "s1.loss_cls": 0.06003, "s1.acc": 98.15039, "s1.loss_bbox": 0.02273, "s2.loss_cls": 0.02115, "s2.acc": 98.82422, "s2.loss_bbox": 0.00358, "loss": 0.64214, "time": 0.43672}
{"mode": "train", "epoch": 4, "iter": 750, "lr": 0.0001, "memory": 3850, "data_time": 0.00504, "loss_rpn_cls": 0.21616, "loss_rpn_bbox": 0.06919, "s0.loss_cls": 0.2376, "s0.acc": 95.83496, "s0.loss_bbox": 0.08646, "s1.loss_cls": 0.07023, "s1.acc": 97.8584, "s1.loss_bbox": 0.02609, "s2.loss_cls": 0.02476, "s2.acc": 98.62207, "s2.loss_bbox": 0.00442, "loss": 0.73491, "time": 0.42971}
{"mode": "train", "epoch": 4, "iter": 800, "lr": 0.0001, "memory": 3850, "data_time": 0.005, "loss_rpn_cls": 0.18984, "loss_rpn_bbox": 0.06002, "s0.loss_cls": 0.21669, "s0.acc": 96.29004, "s0.loss_bbox": 0.07702, "s1.loss_cls": 0.06286, "s1.acc": 98.14355, "s1.loss_bbox": 0.02297, "s2.loss_cls": 0.02223, "s2.acc": 98.81738, "s2.loss_bbox": 0.00391, "loss": 0.65554, "time": 0.42713}
{"mode": "train", "epoch": 4, "iter": 850, "lr": 0.0001, "memory": 3850, "data_time": 0.00518, "loss_rpn_cls": 0.20484, "loss_rpn_bbox": 0.06605, "s0.loss_cls": 0.24137, "s0.acc": 95.72754, "s0.loss_bbox": 0.09025, "s1.loss_cls": 0.07079, "s1.acc": 97.81934, "s1.loss_bbox": 0.02795, "s2.loss_cls": 0.02441, "s2.acc": 98.6543, "s2.loss_bbox": 0.00423, "loss": 0.7299, "time": 0.42921}
{"mode": "train", "epoch": 4, "iter": 900, "lr": 0.0001, "memory": 3850, "data_time": 0.00517, "loss_rpn_cls": 0.18711, "loss_rpn_bbox": 0.06058, "s0.loss_cls": 0.21959, "s0.acc": 96.18066, "s0.loss_bbox": 0.08196, "s1.loss_cls": 0.06335, "s1.acc": 98.10547, "s1.loss_bbox": 0.02398, "s2.loss_cls": 0.02216, "s2.acc": 98.81641, "s2.loss_bbox": 0.00379, "loss": 0.66251, "time": 0.42982}
{"mode": "train", "epoch": 4, "iter": 950, "lr": 0.0001, "memory": 3850, "data_time": 0.00533, "loss_rpn_cls": 0.19011, "loss_rpn_bbox": 0.06238, "s0.loss_cls": 0.22601, "s0.acc": 96.00684, "s0.loss_bbox": 0.08529, "s1.loss_cls": 0.06418, "s1.acc": 98.02441, "s1.loss_bbox": 0.02585, "s2.loss_cls": 0.02211, "s2.acc": 98.79004, "s2.loss_bbox": 0.00402, "loss": 0.67994, "time": 0.43156}
{"mode": "train", "epoch": 4, "iter": 1000, "lr": 0.0001, "memory": 3850, "data_time": 0.00527, "loss_rpn_cls": 0.19643, "loss_rpn_bbox": 0.06462, "s0.loss_cls": 0.22166, "s0.acc": 96.05273, "s0.loss_bbox": 0.08118, "s1.loss_cls": 0.06377, "s1.acc": 98.02832, "s1.loss_bbox": 0.02305, "s2.loss_cls": 0.02282, "s2.acc": 98.72656, "s2.loss_bbox": 0.00379, "loss": 0.67731, "time": 0.44309}
{"mode": "train", "epoch": 4, "iter": 1050, "lr": 0.0001, "memory": 3850, "data_time": 0.00504, "loss_rpn_cls": 0.18639, "loss_rpn_bbox": 0.06156, "s0.loss_cls": 0.2054, "s0.acc": 96.36719, "s0.loss_bbox": 0.07629, "s1.loss_cls": 0.05864, "s1.acc": 98.20508, "s1.loss_bbox": 0.0207, "s2.loss_cls": 0.02103, "s2.acc": 98.8252, "s2.loss_bbox": 0.00322, "loss": 0.63323, "time": 0.43686}
{"mode": "train", "epoch": 4, "iter": 1100, "lr": 0.0001, "memory": 3850, "data_time": 0.00511, "loss_rpn_cls": 0.19659, "loss_rpn_bbox": 0.06544, "s0.loss_cls": 0.21541, "s0.acc": 96.26074, "s0.loss_bbox": 0.07862, "s1.loss_cls": 0.06231, "s1.acc": 98.12695, "s1.loss_bbox": 0.02311, "s2.loss_cls": 0.02204, "s2.acc": 98.80957, "s2.loss_bbox": 0.00391, "loss": 0.66742, "time": 0.43005}
{"mode": "val", "epoch": 4, "iter": 448, "lr": 0.0001, "bbox_mAP": 0.001, "bbox_mAP_50": 0.003, "bbox_mAP_75": 0.0, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.001, "bbox_mAP_copypaste": "0.001 0.003 0.000 0.000 0.000 0.001"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.0001, "memory": 3850, "data_time": 0.04913, "loss_rpn_cls": 0.14629, "loss_rpn_bbox": 0.04789, "s0.loss_cls": 0.21484, "s0.acc": 96.10547, "s0.loss_bbox": 0.08682, "s1.loss_cls": 0.05929, "s1.acc": 98.14746, "s1.loss_bbox": 0.02702, "s2.loss_cls": 0.01863, "s2.acc": 98.97559, "s2.loss_bbox": 0.0039, "loss": 0.60468, "time": 0.47887}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.0001, "memory": 3850, "data_time": 0.0053, "loss_rpn_cls": 0.19477, "loss_rpn_bbox": 0.06415, "s0.loss_cls": 0.22894, "s0.acc": 95.99219, "s0.loss_bbox": 0.08719, "s1.loss_cls": 0.06701, "s1.acc": 97.98438, "s1.loss_bbox": 0.02564, "s2.loss_cls": 0.0237, "s2.acc": 98.70703, "s2.loss_bbox": 0.00469, "loss": 0.69608, "time": 0.43001}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 0.0001, "memory": 3850, "data_time": 0.00526, "loss_rpn_cls": 0.19044, "loss_rpn_bbox": 0.05954, "s0.loss_cls": 0.20206, "s0.acc": 96.44238, "s0.loss_bbox": 0.07229, "s1.loss_cls": 0.05978, "s1.acc": 98.16406, "s1.loss_bbox": 0.02192, "s2.loss_cls": 0.02126, "s2.acc": 98.81836, "s2.loss_bbox": 0.00363, "loss": 0.63093, "time": 0.43057}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.0001, "memory": 3850, "data_time": 0.00528, "loss_rpn_cls": 0.19892, "loss_rpn_bbox": 0.06684, "s0.loss_cls": 0.22152, "s0.acc": 96.125, "s0.loss_bbox": 0.07963, "s1.loss_cls": 0.06424, "s1.acc": 98.03711, "s1.loss_bbox": 0.02326, "s2.loss_cls": 0.02296, "s2.acc": 98.72461, "s2.loss_bbox": 0.00396, "loss": 0.68135, "time": 0.43528}
{"mode": "train", "epoch": 5, "iter": 250, "lr": 0.0001, "memory": 3850, "data_time": 0.00527, "loss_rpn_cls": 0.21299, "loss_rpn_bbox": 0.07014, "s0.loss_cls": 0.23757, "s0.acc": 95.79688, "s0.loss_bbox": 0.08876, "s1.loss_cls": 0.06792, "s1.acc": 97.9209, "s1.loss_bbox": 0.02503, "s2.loss_cls": 0.02416, "s2.acc": 98.66309, "s2.loss_bbox": 0.0043, "loss": 0.73086, "time": 0.43005}
{"mode": "train", "epoch": 5, "iter": 300, "lr": 0.0001, "memory": 3850, "data_time": 0.00518, "loss_rpn_cls": 0.1839, "loss_rpn_bbox": 0.05905, "s0.loss_cls": 0.21589, "s0.acc": 96.28516, "s0.loss_bbox": 0.07808, "s1.loss_cls": 0.0623, "s1.acc": 98.14258, "s1.loss_bbox": 0.02287, "s2.loss_cls": 0.02198, "s2.acc": 98.81152, "s2.loss_bbox": 0.00403, "loss": 0.64809, "time": 0.43354}
{"mode": "train", "epoch": 5, "iter": 350, "lr": 0.0001, "memory": 3850, "data_time": 0.00527, "loss_rpn_cls": 0.19386, "loss_rpn_bbox": 0.06044, "s0.loss_cls": 0.21476, "s0.acc": 96.33594, "s0.loss_bbox": 0.07577, "s1.loss_cls": 0.06334, "s1.acc": 98.13281, "s1.loss_bbox": 0.02325, "s2.loss_cls": 0.02176, "s2.acc": 98.84277, "s2.loss_bbox": 0.00347, "loss": 0.65666, "time": 0.42938}
