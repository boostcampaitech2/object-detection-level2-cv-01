{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.3\nMMCV: 1.3.14\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.17.0+044cccd", "config": "dataset_type = 'CocoDataset'\ndata_root = '/opt/ml/detection/dataset/'\nclasses = [\n    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\nimg_norm_cfg = dict(mean=[0, 0, 0], std=[255.0, 255.0, 255.0], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(300, 300), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[0, 0, 0],\n        std=[255.0, 255.0, 255.0],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(300, 300),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/train_kfold1.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(300, 300), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/val_kfold1.json',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(300, 300),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/test.json',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(300, 300),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP_50')\ncheckpoint_config = dict(interval=100)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(type='WandbLoggerHook', init_kwargs=dict(project='mmdetection'))\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\noptimizer = dict(\n    type='Adam',\n    lr=0.0001,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='CosineAnnealing',\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=0.01,\n    min_lr=1e-06)\nrunner = dict(type='EpochBasedRunner', max_epochs=50)\nmodel = dict(\n    type='HybridTaskCascade',\n    backbone=dict(\n        type='ResNeXt',\n        depth=101,\n        groups=64,\n        base_width=4,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(\n            type='Pretrained', checkpoint='open-mmlab://resnext101_64x4d')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='CIoULoss', eps=1e-06)),\n    roi_head=dict(\n        type='HybridTaskCascadeRoIHead',\n        interleaved=True,\n        mask_info_flow=False,\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='CIoULoss', eps=1e-06)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='CIoULoss', eps=1e-06)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='CIoULoss', eps=1e-06))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.001,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\nwork_dir = './work_dirs/HTC_x101_64x4d_FPN_CIoU'\ngpu_ids = range(0, 1)\n", "seed": 2021, "exp_name": "HTC_x101_64x4d_FPN_CIoU.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 1e-05, "memory": 3850, "data_time": 0.04866, "loss_rpn_cls": 0.65391, "loss_rpn_bbox": 0.10966, "s0.loss_cls": 0.59215, "s0.acc": 88.36035, "s0.loss_bbox": 0.053, "s1.loss_cls": 0.31327, "s1.acc": 83.08398, "s1.loss_bbox": 0.01588, "s2.loss_cls": 0.21753, "s2.acc": 75.73242, "s2.loss_bbox": 0.00558, "loss": 1.96097, "time": 0.47964}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 3850, "data_time": 0.00498, "loss_rpn_cls": 0.40063, "loss_rpn_bbox": 0.09207, "s0.loss_cls": 0.24463, "s0.acc": 95.64453, "s0.loss_bbox": 0.04683, "s1.loss_cls": 0.07617, "s1.acc": 98.01758, "s1.loss_bbox": 0.01329, "s2.loss_cls": 0.02656, "s2.acc": 98.76562, "s2.loss_bbox": 0.00454, "loss": 0.90472, "time": 0.44086}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 2e-05, "memory": 3850, "data_time": 0.00497, "loss_rpn_cls": 0.17206, "loss_rpn_bbox": 0.06984, "s0.loss_cls": 0.25433, "s0.acc": 95.17676, "s0.loss_bbox": 0.04689, "s1.loss_cls": 0.07281, "s1.acc": 97.79297, "s1.loss_bbox": 0.01165, "s2.loss_cls": 0.02541, "s2.acc": 98.68945, "s2.loss_bbox": 0.00366, "loss": 0.65665, "time": 0.43096}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 2e-05, "memory": 3850, "data_time": 0.00489, "loss_rpn_cls": 0.19091, "loss_rpn_bbox": 0.07695, "s0.loss_cls": 0.23846, "s0.acc": 95.14746, "s0.loss_bbox": 0.04764, "s1.loss_cls": 0.06786, "s1.acc": 97.71777, "s1.loss_bbox": 0.01205, "s2.loss_cls": 0.02642, "s2.acc": 98.55859, "s2.loss_bbox": 0.00382, "loss": 0.66409, "time": 0.43106}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 3e-05, "memory": 3850, "data_time": 0.00486, "loss_rpn_cls": 0.15095, "loss_rpn_bbox": 0.06478, "s0.loss_cls": 0.22347, "s0.acc": 95.33398, "s0.loss_bbox": 0.04471, "s1.loss_cls": 0.0617, "s1.acc": 97.97656, "s1.loss_bbox": 0.01071, "s2.loss_cls": 0.02218, "s2.acc": 98.83691, "s2.loss_bbox": 0.00307, "loss": 0.58157, "time": 0.43396}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 3e-05, "memory": 3850, "data_time": 0.00504, "loss_rpn_cls": 0.15962, "loss_rpn_bbox": 0.06738, "s0.loss_cls": 0.22959, "s0.acc": 95.12598, "s0.loss_bbox": 0.04949, "s1.loss_cls": 0.06417, "s1.acc": 97.75879, "s1.loss_bbox": 0.0118, "s2.loss_cls": 0.02259, "s2.acc": 98.71387, "s2.loss_bbox": 0.00339, "loss": 0.60802, "time": 0.43883}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 4e-05, "memory": 3850, "data_time": 0.00503, "loss_rpn_cls": 0.14414, "loss_rpn_bbox": 0.06217, "s0.loss_cls": 0.22834, "s0.acc": 95.3291, "s0.loss_bbox": 0.04677, "s1.loss_cls": 0.06419, "s1.acc": 97.86719, "s1.loss_bbox": 0.01135, "s2.loss_cls": 0.02275, "s2.acc": 98.7002, "s2.loss_bbox": 0.0033, "loss": 0.58301, "time": 0.44218}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 4e-05, "memory": 3850, "data_time": 0.00518, "loss_rpn_cls": 0.15272, "loss_rpn_bbox": 0.06277, "s0.loss_cls": 0.24274, "s0.acc": 95.27344, "s0.loss_bbox": 0.04739, "s1.loss_cls": 0.07083, "s1.acc": 97.74512, "s1.loss_bbox": 0.01184, "s2.loss_cls": 0.02327, "s2.acc": 98.73438, "s2.loss_bbox": 0.00341, "loss": 0.61496, "time": 0.43966}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 5e-05, "memory": 3850, "data_time": 0.00498, "loss_rpn_cls": 0.15956, "loss_rpn_bbox": 0.06166, "s0.loss_cls": 0.25683, "s0.acc": 95.23145, "s0.loss_bbox": 0.04879, "s1.loss_cls": 0.07074, "s1.acc": 97.76074, "s1.loss_bbox": 0.01206, "s2.loss_cls": 0.02313, "s2.acc": 98.78223, "s2.loss_bbox": 0.00329, "loss": 0.63606, "time": 0.44367}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 5e-05, "memory": 3850, "data_time": 0.00519, "loss_rpn_cls": 0.12907, "loss_rpn_bbox": 0.05511, "s0.loss_cls": 0.21832, "s0.acc": 95.63574, "s0.loss_bbox": 0.04471, "s1.loss_cls": 0.05812, "s1.acc": 98.05273, "s1.loss_bbox": 0.01044, "s2.loss_cls": 0.01847, "s2.acc": 98.89258, "s2.loss_bbox": 0.00298, "loss": 0.53721, "time": 0.44942}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 6e-05, "memory": 3850, "data_time": 0.00529, "loss_rpn_cls": 0.1332, "loss_rpn_bbox": 0.05471, "s0.loss_cls": 0.24955, "s0.acc": 95.22559, "s0.loss_bbox": 0.04844, "s1.loss_cls": 0.06702, "s1.acc": 97.82422, "s1.loss_bbox": 0.01162, "s2.loss_cls": 0.02049, "s2.acc": 98.82617, "s2.loss_bbox": 0.00318, "loss": 0.58822, "time": 0.44717}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 6e-05, "memory": 3850, "data_time": 0.00522, "loss_rpn_cls": 0.14499, "loss_rpn_bbox": 0.05783, "s0.loss_cls": 0.22222, "s0.acc": 95.75098, "s0.loss_bbox": 0.04332, "s1.loss_cls": 0.06068, "s1.acc": 98.02051, "s1.loss_bbox": 0.01051, "s2.loss_cls": 0.01963, "s2.acc": 98.8623, "s2.loss_bbox": 0.00304, "loss": 0.56223, "time": 0.44356}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 7e-05, "memory": 3850, "data_time": 0.0052, "loss_rpn_cls": 0.19691, "loss_rpn_bbox": 0.07337, "s0.loss_cls": 0.30184, "s0.acc": 94.72656, "s0.loss_bbox": 0.05417, "s1.loss_cls": 0.08309, "s1.acc": 97.42969, "s1.loss_bbox": 0.0138, "s2.loss_cls": 0.0272, "s2.acc": 98.45996, "s2.loss_bbox": 0.00417, "loss": 0.75455, "time": 0.4397}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 7e-05, "memory": 3850, "data_time": 0.00519, "loss_rpn_cls": 0.16678, "loss_rpn_bbox": 0.06123, "s0.loss_cls": 0.23494, "s0.acc": 95.77051, "s0.loss_bbox": 0.04332, "s1.loss_cls": 0.06437, "s1.acc": 97.99707, "s1.loss_bbox": 0.01069, "s2.loss_cls": 0.02083, "s2.acc": 98.82617, "s2.loss_bbox": 0.00318, "loss": 0.60535, "time": 0.44391}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 8e-05, "memory": 3850, "data_time": 0.00512, "loss_rpn_cls": 0.17904, "loss_rpn_bbox": 0.06883, "s0.loss_cls": 0.2714, "s0.acc": 95.14844, "s0.loss_bbox": 0.04963, "s1.loss_cls": 0.07761, "s1.acc": 97.55273, "s1.loss_bbox": 0.01305, "s2.loss_cls": 0.02577, "s2.acc": 98.5127, "s2.loss_bbox": 0.00401, "loss": 0.68934, "time": 0.44207}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 8e-05, "memory": 3850, "data_time": 0.00518, "loss_rpn_cls": 0.18157, "loss_rpn_bbox": 0.0589, "s0.loss_cls": 0.21026, "s0.acc": 96.22754, "s0.loss_bbox": 0.03854, "s1.loss_cls": 0.06116, "s1.acc": 98.07812, "s1.loss_bbox": 0.01021, "s2.loss_cls": 0.02145, "s2.acc": 98.77344, "s2.loss_bbox": 0.0033, "loss": 0.58539, "time": 0.43643}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 9e-05, "memory": 3850, "data_time": 0.00495, "loss_rpn_cls": 0.18518, "loss_rpn_bbox": 0.06492, "s0.loss_cls": 0.23122, "s0.acc": 95.82422, "s0.loss_bbox": 0.04287, "s1.loss_cls": 0.06685, "s1.acc": 97.90527, "s1.loss_bbox": 0.01136, "s2.loss_cls": 0.02217, "s2.acc": 98.73047, "s2.loss_bbox": 0.00346, "loss": 0.62804, "time": 0.43837}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 9e-05, "memory": 3850, "data_time": 0.00499, "loss_rpn_cls": 0.16789, "loss_rpn_bbox": 0.05596, "s0.loss_cls": 0.22523, "s0.acc": 95.91504, "s0.loss_bbox": 0.04185, "s1.loss_cls": 0.06264, "s1.acc": 98.03906, "s1.loss_bbox": 0.01055, "s2.loss_cls": 0.02057, "s2.acc": 98.81445, "s2.loss_bbox": 0.00327, "loss": 0.58797, "time": 0.43802}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 9e-05, "memory": 3850, "data_time": 0.00522, "loss_rpn_cls": 0.20714, "loss_rpn_bbox": 0.07423, "s0.loss_cls": 0.24833, "s0.acc": 95.58887, "s0.loss_bbox": 0.04525, "s1.loss_cls": 0.07095, "s1.acc": 97.80859, "s1.loss_bbox": 0.01181, "s2.loss_cls": 0.02388, "s2.acc": 98.64258, "s2.loss_bbox": 0.0037, "loss": 0.68528, "time": 0.44503}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.0001, "memory": 3850, "data_time": 0.00507, "loss_rpn_cls": 0.20833, "loss_rpn_bbox": 0.06818, "s0.loss_cls": 0.19796, "s0.acc": 96.53125, "s0.loss_bbox": 0.03558, "s1.loss_cls": 0.06079, "s1.acc": 98.13574, "s1.loss_bbox": 0.01002, "s2.loss_cls": 0.02208, "s2.acc": 98.75, "s2.loss_bbox": 0.00341, "loss": 0.60636, "time": 0.44891}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.0001, "memory": 3850, "data_time": 0.00496, "loss_rpn_cls": 0.16933, "loss_rpn_bbox": 0.05394, "s0.loss_cls": 0.18896, "s0.acc": 96.85156, "s0.loss_bbox": 0.03253, "s1.loss_cls": 0.05469, "s1.acc": 98.41211, "s1.loss_bbox": 0.00865, "s2.loss_cls": 0.01919, "s2.acc": 98.98633, "s2.loss_bbox": 0.00278, "loss": 0.53009, "time": 0.4374}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.0001, "memory": 3850, "data_time": 0.00531, "loss_rpn_cls": 0.21529, "loss_rpn_bbox": 0.07166, "s0.loss_cls": 0.24814, "s0.acc": 95.71582, "s0.loss_bbox": 0.04445, "s1.loss_cls": 0.07278, "s1.acc": 97.7998, "s1.loss_bbox": 0.01205, "s2.loss_cls": 0.02446, "s2.acc": 98.63379, "s2.loss_bbox": 0.0038, "loss": 0.69262, "time": 0.43641}
{"mode": "val", "epoch": 1, "iter": 448, "lr": 0.0001, "bbox_mAP": 0.0, "bbox_mAP_50": 0.001, "bbox_mAP_75": 0.0, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.000 0.001 0.000 0.000 0.000 0.000"}
