2021-10-08 10:55:56,753 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]
CUDA available: True
GPU 0: Tesla V100-PCIE-32GB
CUDA_HOME: None
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.5.3
MMCV: 1.3.14
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.0
MMDetection: 2.17.0+044cccd
------------------------------------------------------------

2021-10-08 10:55:57,253 - mmdet - INFO - Distributed training: False
2021-10-08 10:55:57,744 - mmdet - INFO - Config:
dataset_type = 'CocoDataset'
data_root = '/opt/ml/detection/dataset/'
classes = [
    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',
    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
]
img_norm_cfg = dict(mean=[0, 0, 0], std=[255.0, 255.0, 255.0], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(300, 300), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[0, 0, 0],
        std=[255.0, 255.0, 255.0],
        to_rgb=True),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(300, 300),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[0, 0, 0],
                std=[255.0, 255.0, 255.0],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/train_kfold1.json',
        img_prefix='/opt/ml/detection/dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(300, 300), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[0, 0, 0],
                std=[255.0, 255.0, 255.0],
                to_rgb=True),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/val_kfold1.json',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        img_prefix='/opt/ml/detection/dataset/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(300, 300),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[0, 0, 0],
                        std=[255.0, 255.0, 255.0],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/test.json',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        img_prefix='/opt/ml/detection/dataset/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(300, 300),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[0, 0, 0],
                        std=[255.0, 255.0, 255.0],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP_50')
checkpoint_config = dict(interval=100)
log_config = dict(
    interval=50,
    hooks=[
        dict(type='TextLoggerHook'),
        dict(type='WandbLoggerHook', init_kwargs=dict(project='mmdetection'))
    ])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
optimizer = dict(type='SGD', lr=0.0002, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='CosineAnnealing',
    warmup='linear',
    warmup_iters=1000,
    warmup_ratio=0.01,
    min_lr=1e-06)
runner = dict(type='EpochBasedRunner', max_epochs=50)
model = dict(
    type='HybridTaskCascade',
    backbone=dict(
        type='ResNeXt',
        depth=101,
        groups=64,
        base_width=4,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(
            type='Pretrained', checkpoint='open-mmlab://resnext101_64x4d')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type='CIoULoss', eps=1e-06)),
    roi_head=dict(
        type='HybridTaskCascadeRoIHead',
        interleaved=True,
        mask_info_flow=False,
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='CIoULoss', eps=1e-06)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='CIoULoss', eps=1e-06)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='CIoULoss', eps=1e-06))
        ]),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.001,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100,
            mask_thr_binary=0.5)))
work_dir = './work_dirs/HTC_x101_64x4d_FPN_CIoU'
gpu_ids = range(0, 1)

2021-10-08 10:55:57,745 - mmdet - INFO - Set random seed to 2021, deterministic: True
2021-10-08 10:55:59,230 - mmdet - INFO - initialize ResNeXt with init_cfg {'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnext101_64x4d'}
2021-10-08 10:55:59,523 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2021-10-08 10:55:59,549 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2021-10-08 10:55:59,557 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-08 10:55:59,876 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-08 10:56:00,194 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.conv1.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.conv2.weight - torch.Size([256, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.conv3.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.conv1.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.conv2.weight - torch.Size([256, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.conv3.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.conv1.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.conv2.weight - torch.Size([256, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.conv3.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.conv1.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.conv2.weight - torch.Size([512, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.conv3.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.conv1.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.conv2.weight - torch.Size([512, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.conv3.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.conv1.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.conv2.weight - torch.Size([512, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.conv3.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.conv1.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.conv2.weight - torch.Size([512, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.conv3.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.conv1.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.conv1.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.conv2.weight - torch.Size([2048, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn2.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn2.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.conv3.weight - torch.Size([2048, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.conv1.weight - torch.Size([2048, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.conv2.weight - torch.Size([2048, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn2.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn2.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.conv3.weight - torch.Size([2048, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.conv1.weight - torch.Size([2048, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.conv2.weight - torch.Size([2048, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn2.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn2.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.conv3.weight - torch.Size([2048, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 
2021-10-08 10:56:04,201 - mmdet - INFO - Start running, host: root@00a46a6c3ac0, work_dir: /opt/ml/detection/object-detection-level2-cv-01/work_dirs/HTC_x101_64x4d_FPN_CIoU
2021-10-08 10:56:04,201 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_run:
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
2021-10-08 10:56:04,201 - mmdet - INFO - workflow: [('train', 1)], max: 50 epochs
2021-10-08 10:56:33,741 - mmdet - INFO - Epoch [1][50/1109]	lr: 1.170e-05, eta: 7:03:00, time: 0.458, data_time: 0.048, memory: 3371, loss_rpn_cls: 0.6849, loss_rpn_bbox: 0.1123, s0.loss_cls: 1.0831, s0.acc: 73.1094, s0.loss_bbox: 0.0541, s1.loss_cls: 0.7295, s1.acc: 51.1182, s1.loss_bbox: 0.0159, s2.loss_cls: 0.5890, s2.acc: 24.6152, s2.loss_bbox: 0.0052, loss: 3.2740
2021-10-08 10:56:53,698 - mmdet - INFO - Epoch [1][100/1109]	lr: 2.160e-05, eta: 6:35:24, time: 0.399, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.6597, loss_rpn_bbox: 0.1022, s0.loss_cls: 0.2651, s0.acc: 96.6660, s0.loss_bbox: 0.0445, s1.loss_cls: 0.1338, s1.acc: 96.1797, s1.loss_bbox: 0.0132, s2.loss_cls: 0.1495, s2.acc: 87.8506, s2.loss_bbox: 0.0047, loss: 1.3726
2021-10-08 10:57:13,997 - mmdet - INFO - Epoch [1][150/1109]	lr: 3.150e-05, eta: 6:28:05, time: 0.406, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.5995, loss_rpn_bbox: 0.0950, s0.loss_cls: 0.2469, s0.acc: 96.6416, s0.loss_bbox: 0.0477, s1.loss_cls: 0.0942, s1.acc: 98.0352, s1.loss_bbox: 0.0149, s2.loss_cls: 0.0564, s2.acc: 96.6543, s2.loss_bbox: 0.0049, loss: 1.1596
2021-10-08 10:57:34,230 - mmdet - INFO - Epoch [1][200/1109]	lr: 4.140e-05, eta: 6:23:58, time: 0.405, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.4991, loss_rpn_bbox: 0.1090, s0.loss_cls: 0.2625, s0.acc: 95.8320, s0.loss_bbox: 0.0552, s1.loss_cls: 0.0911, s1.acc: 97.8564, s1.loss_bbox: 0.0169, s2.loss_cls: 0.0391, s2.acc: 98.2617, s2.loss_bbox: 0.0059, loss: 1.0789
2021-10-08 10:57:54,315 - mmdet - INFO - Epoch [1][250/1109]	lr: 5.130e-05, eta: 6:20:47, time: 0.402, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.3293, loss_rpn_bbox: 0.0857, s0.loss_cls: 0.2291, s0.acc: 96.1523, s0.loss_bbox: 0.0450, s1.loss_cls: 0.0793, s1.acc: 98.1025, s1.loss_bbox: 0.0145, s2.loss_cls: 0.0294, s2.acc: 98.7207, s2.loss_bbox: 0.0048, loss: 0.8173
2021-10-08 10:58:14,364 - mmdet - INFO - Epoch [1][300/1109]	lr: 6.120e-05, eta: 6:18:28, time: 0.401, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.2179, loss_rpn_bbox: 0.0832, s0.loss_cls: 0.2405, s0.acc: 95.4648, s0.loss_bbox: 0.0488, s1.loss_cls: 0.0810, s1.acc: 97.8818, s1.loss_bbox: 0.0155, s2.loss_cls: 0.0323, s2.acc: 98.6670, s2.loss_bbox: 0.0052, loss: 0.7244
2021-10-08 10:58:34,474 - mmdet - INFO - Epoch [1][350/1109]	lr: 7.110e-05, eta: 6:16:52, time: 0.402, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1803, loss_rpn_bbox: 0.0710, s0.loss_cls: 0.2144, s0.acc: 95.7734, s0.loss_bbox: 0.0445, s1.loss_cls: 0.0699, s1.acc: 97.9990, s1.loss_bbox: 0.0140, s2.loss_cls: 0.0260, s2.acc: 98.7822, s2.loss_bbox: 0.0047, loss: 0.6248
2021-10-08 10:58:54,656 - mmdet - INFO - Epoch [1][400/1109]	lr: 8.100e-05, eta: 6:15:45, time: 0.404, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1718, loss_rpn_bbox: 0.0671, s0.loss_cls: 0.2264, s0.acc: 95.5088, s0.loss_bbox: 0.0460, s1.loss_cls: 0.0717, s1.acc: 97.8867, s1.loss_bbox: 0.0146, s2.loss_cls: 0.0245, s2.acc: 98.7607, s2.loss_bbox: 0.0043, loss: 0.6265
2021-10-08 10:59:14,859 - mmdet - INFO - Epoch [1][450/1109]	lr: 9.090e-05, eta: 6:14:51, time: 0.404, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1658, loss_rpn_bbox: 0.0647, s0.loss_cls: 0.2262, s0.acc: 95.5557, s0.loss_bbox: 0.0455, s1.loss_cls: 0.0687, s1.acc: 97.9541, s1.loss_bbox: 0.0135, s2.loss_cls: 0.0238, s2.acc: 98.7969, s2.loss_bbox: 0.0038, loss: 0.6119
2021-10-08 10:59:35,109 - mmdet - INFO - Epoch [1][500/1109]	lr: 1.008e-04, eta: 6:14:09, time: 0.405, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1484, loss_rpn_bbox: 0.0577, s0.loss_cls: 0.1900, s0.acc: 96.0898, s0.loss_bbox: 0.0403, s1.loss_cls: 0.0580, s1.acc: 98.1631, s1.loss_bbox: 0.0109, s2.loss_cls: 0.0199, s2.acc: 98.9414, s2.loss_bbox: 0.0032, loss: 0.5284
2021-10-08 10:59:55,387 - mmdet - INFO - Epoch [1][550/1109]	lr: 1.107e-04, eta: 6:13:33, time: 0.406, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1449, loss_rpn_bbox: 0.0576, s0.loss_cls: 0.2072, s0.acc: 95.8438, s0.loss_bbox: 0.0422, s1.loss_cls: 0.0611, s1.acc: 98.0879, s1.loss_bbox: 0.0108, s2.loss_cls: 0.0209, s2.acc: 98.9053, s2.loss_bbox: 0.0032, loss: 0.5478
2021-10-08 11:00:15,883 - mmdet - INFO - Epoch [1][600/1109]	lr: 1.206e-04, eta: 6:13:20, time: 0.410, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1493, loss_rpn_bbox: 0.0609, s0.loss_cls: 0.1926, s0.acc: 95.7100, s0.loss_bbox: 0.0431, s1.loss_cls: 0.0581, s1.acc: 98.0156, s1.loss_bbox: 0.0109, s2.loss_cls: 0.0204, s2.acc: 98.8906, s2.loss_bbox: 0.0032, loss: 0.5385
2021-10-08 11:00:36,485 - mmdet - INFO - Epoch [1][650/1109]	lr: 1.305e-04, eta: 6:13:15, time: 0.412, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1790, loss_rpn_bbox: 0.0769, s0.loss_cls: 0.2400, s0.acc: 94.6865, s0.loss_bbox: 0.0545, s1.loss_cls: 0.0735, s1.acc: 97.4814, s1.loss_bbox: 0.0137, s2.loss_cls: 0.0263, s2.acc: 98.5107, s2.loss_bbox: 0.0043, loss: 0.6681
2021-10-08 11:00:57,227 - mmdet - INFO - Epoch [1][700/1109]	lr: 1.404e-04, eta: 6:13:19, time: 0.415, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1576, loss_rpn_bbox: 0.0637, s0.loss_cls: 0.2083, s0.acc: 95.6133, s0.loss_bbox: 0.0447, s1.loss_cls: 0.0615, s1.acc: 98.0107, s1.loss_bbox: 0.0109, s2.loss_cls: 0.0213, s2.acc: 98.8467, s2.loss_bbox: 0.0032, loss: 0.5712
2021-10-08 11:01:18,144 - mmdet - INFO - Epoch [1][750/1109]	lr: 1.503e-04, eta: 6:13:32, time: 0.418, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1601, loss_rpn_bbox: 0.0717, s0.loss_cls: 0.2317, s0.acc: 94.8271, s0.loss_bbox: 0.0528, s1.loss_cls: 0.0729, s1.acc: 97.4951, s1.loss_bbox: 0.0135, s2.loss_cls: 0.0252, s2.acc: 98.5264, s2.loss_bbox: 0.0041, loss: 0.6320
2021-10-08 11:01:38,910 - mmdet - INFO - Epoch [1][800/1109]	lr: 1.602e-04, eta: 6:13:31, time: 0.415, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1461, loss_rpn_bbox: 0.0612, s0.loss_cls: 0.1957, s0.acc: 95.6738, s0.loss_bbox: 0.0437, s1.loss_cls: 0.0585, s1.acc: 97.9971, s1.loss_bbox: 0.0107, s2.loss_cls: 0.0210, s2.acc: 98.7803, s2.loss_bbox: 0.0033, loss: 0.5403
2021-10-08 11:01:59,623 - mmdet - INFO - Epoch [1][850/1109]	lr: 1.701e-04, eta: 6:13:23, time: 0.414, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1553, loss_rpn_bbox: 0.0673, s0.loss_cls: 0.2154, s0.acc: 95.3477, s0.loss_bbox: 0.0473, s1.loss_cls: 0.0648, s1.acc: 97.7949, s1.loss_bbox: 0.0118, s2.loss_cls: 0.0229, s2.acc: 98.7051, s2.loss_bbox: 0.0036, loss: 0.5884
2021-10-08 11:02:20,387 - mmdet - INFO - Epoch [1][900/1109]	lr: 1.800e-04, eta: 6:13:18, time: 0.415, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1372, loss_rpn_bbox: 0.0581, s0.loss_cls: 0.1905, s0.acc: 95.7734, s0.loss_bbox: 0.0422, s1.loss_cls: 0.0586, s1.acc: 97.9580, s1.loss_bbox: 0.0108, s2.loss_cls: 0.0210, s2.acc: 98.7979, s2.loss_bbox: 0.0033, loss: 0.5217
2021-10-08 11:02:41,300 - mmdet - INFO - Epoch [1][950/1109]	lr: 1.899e-04, eta: 6:13:19, time: 0.418, data_time: 0.006, memory: 3371, loss_rpn_cls: 0.1616, loss_rpn_bbox: 0.0772, s0.loss_cls: 0.2118, s0.acc: 95.2793, s0.loss_bbox: 0.0478, s1.loss_cls: 0.0636, s1.acc: 97.7305, s1.loss_bbox: 0.0119, s2.loss_cls: 0.0227, s2.acc: 98.6582, s2.loss_bbox: 0.0036, loss: 0.6001
2021-10-08 11:03:02,253 - mmdet - INFO - Exp name: HTC_x101_64x4d_FPN_CIoU.py
2021-10-08 11:03:02,253 - mmdet - INFO - Epoch [1][1000/1109]	lr: 1.998e-04, eta: 6:13:21, time: 0.419, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1531, loss_rpn_bbox: 0.0705, s0.loss_cls: 0.2043, s0.acc: 95.5488, s0.loss_bbox: 0.0442, s1.loss_cls: 0.0589, s1.acc: 97.9062, s1.loss_bbox: 0.0110, s2.loss_cls: 0.0210, s2.acc: 98.7354, s2.loss_bbox: 0.0034, loss: 0.5664
2021-10-08 11:03:23,418 - mmdet - INFO - Epoch [1][1050/1109]	lr: 2.000e-04, eta: 6:13:31, time: 0.423, data_time: 0.006, memory: 3371, loss_rpn_cls: 0.1193, loss_rpn_bbox: 0.0556, s0.loss_cls: 0.1748, s0.acc: 96.2803, s0.loss_bbox: 0.0374, s1.loss_cls: 0.0512, s1.acc: 98.2451, s1.loss_bbox: 0.0092, s2.loss_cls: 0.0178, s2.acc: 98.9512, s2.loss_bbox: 0.0028, loss: 0.4680
2021-10-08 11:03:44,639 - mmdet - INFO - Epoch [1][1100/1109]	lr: 2.000e-04, eta: 6:13:41, time: 0.424, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1587, loss_rpn_bbox: 0.0742, s0.loss_cls: 0.2058, s0.acc: 95.3281, s0.loss_bbox: 0.0478, s1.loss_cls: 0.0633, s1.acc: 97.7246, s1.loss_bbox: 0.0119, s2.loss_cls: 0.0223, s2.acc: 98.6475, s2.loss_bbox: 0.0037, loss: 0.5877
2021-10-08 11:04:20,396 - mmdet - INFO - Evaluating bbox...
2021-10-08 11:04:26,609 - mmdet - INFO - Now best checkpoint is saved as best_bbox_mAP_50_epoch_1.pth.
2021-10-08 11:04:26,609 - mmdet - INFO - Best bbox_mAP_50 is 0.0120 at 1 epoch.
2021-10-08 11:04:26,611 - mmdet - INFO - Exp name: HTC_x101_64x4d_FPN_CIoU.py
2021-10-08 11:04:26,611 - mmdet - INFO - Epoch(val) [1][448]	bbox_mAP: 0.0030, bbox_mAP_50: 0.0120, bbox_mAP_75: 0.0000, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0000, bbox_mAP_l: 0.0030, bbox_mAP_copypaste: 0.003 0.012 0.000 0.000 0.000 0.003
2021-10-08 11:04:49,985 - mmdet - INFO - Epoch [2][50/1109]	lr: 1.998e-04, eta: 6:12:31, time: 0.467, data_time: 0.049, memory: 3371, loss_rpn_cls: 0.1355, loss_rpn_bbox: 0.0637, s0.loss_cls: 0.1617, s0.acc: 96.2979, s0.loss_bbox: 0.0365, s1.loss_cls: 0.0490, s1.acc: 98.2207, s1.loss_bbox: 0.0092, s2.loss_cls: 0.0184, s2.acc: 98.8867, s2.loss_bbox: 0.0029, loss: 0.4770
2021-10-08 11:05:11,493 - mmdet - INFO - Epoch [2][100/1109]	lr: 1.998e-04, eta: 6:12:52, time: 0.430, data_time: 0.006, memory: 3371, loss_rpn_cls: 0.1389, loss_rpn_bbox: 0.0626, s0.loss_cls: 0.1937, s0.acc: 95.5742, s0.loss_bbox: 0.0448, s1.loss_cls: 0.0562, s1.acc: 97.9219, s1.loss_bbox: 0.0108, s2.loss_cls: 0.0209, s2.acc: 98.7275, s2.loss_bbox: 0.0034, loss: 0.5313
2021-10-08 11:05:32,691 - mmdet - INFO - Epoch [2][150/1109]	lr: 1.998e-04, eta: 6:12:56, time: 0.424, data_time: 0.006, memory: 3371, loss_rpn_cls: 0.1494, loss_rpn_bbox: 0.0737, s0.loss_cls: 0.1970, s0.acc: 95.5889, s0.loss_bbox: 0.0453, s1.loss_cls: 0.0581, s1.acc: 97.8828, s1.loss_bbox: 0.0111, s2.loss_cls: 0.0205, s2.acc: 98.7188, s2.loss_bbox: 0.0034, loss: 0.5584
2021-10-08 11:05:53,871 - mmdet - INFO - Epoch [2][200/1109]	lr: 1.998e-04, eta: 6:12:57, time: 0.424, data_time: 0.006, memory: 3371, loss_rpn_cls: 0.1361, loss_rpn_bbox: 0.0660, s0.loss_cls: 0.1674, s0.acc: 96.3193, s0.loss_bbox: 0.0369, s1.loss_cls: 0.0499, s1.acc: 98.1895, s1.loss_bbox: 0.0093, s2.loss_cls: 0.0181, s2.acc: 98.8848, s2.loss_bbox: 0.0030, loss: 0.4866
2021-10-08 11:06:15,252 - mmdet - INFO - Epoch [2][250/1109]	lr: 1.998e-04, eta: 6:13:05, time: 0.428, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1279, loss_rpn_bbox: 0.0654, s0.loss_cls: 0.1755, s0.acc: 95.7793, s0.loss_bbox: 0.0427, s1.loss_cls: 0.0527, s1.acc: 97.9639, s1.loss_bbox: 0.0106, s2.loss_cls: 0.0188, s2.acc: 98.7881, s2.loss_bbox: 0.0032, loss: 0.4969
2021-10-08 11:06:36,557 - mmdet - INFO - Epoch [2][300/1109]	lr: 1.998e-04, eta: 6:13:08, time: 0.426, data_time: 0.006, memory: 3371, loss_rpn_cls: 0.1303, loss_rpn_bbox: 0.0596, s0.loss_cls: 0.1809, s0.acc: 95.7158, s0.loss_bbox: 0.0423, s1.loss_cls: 0.0531, s1.acc: 97.9893, s1.loss_bbox: 0.0104, s2.loss_cls: 0.0183, s2.acc: 98.8184, s2.loss_bbox: 0.0032, loss: 0.4982
2021-10-08 11:06:57,860 - mmdet - INFO - Epoch [2][350/1109]	lr: 1.998e-04, eta: 6:13:09, time: 0.426, data_time: 0.006, memory: 3371, loss_rpn_cls: 0.1439, loss_rpn_bbox: 0.0683, s0.loss_cls: 0.1769, s0.acc: 95.8232, s0.loss_bbox: 0.0427, s1.loss_cls: 0.0540, s1.acc: 97.8828, s1.loss_bbox: 0.0110, s2.loss_cls: 0.0202, s2.acc: 98.6533, s2.loss_bbox: 0.0035, loss: 0.5206
2021-10-08 11:07:19,204 - mmdet - INFO - Epoch [2][400/1109]	lr: 1.998e-04, eta: 6:13:10, time: 0.427, data_time: 0.006, memory: 3371, loss_rpn_cls: 0.1600, loss_rpn_bbox: 0.0752, s0.loss_cls: 0.2115, s0.acc: 95.1357, s0.loss_bbox: 0.0498, s1.loss_cls: 0.0642, s1.acc: 97.5791, s1.loss_bbox: 0.0127, s2.loss_cls: 0.0228, s2.acc: 98.5547, s2.loss_bbox: 0.0039, loss: 0.6001
2021-10-08 11:07:40,235 - mmdet - INFO - Epoch [2][450/1109]	lr: 1.998e-04, eta: 6:12:59, time: 0.421, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1321, loss_rpn_bbox: 0.0651, s0.loss_cls: 0.1666, s0.acc: 96.0186, s0.loss_bbox: 0.0402, s1.loss_cls: 0.0505, s1.acc: 98.0254, s1.loss_bbox: 0.0103, s2.loss_cls: 0.0183, s2.acc: 98.7910, s2.loss_bbox: 0.0032, loss: 0.4861
2021-10-08 11:08:01,425 - mmdet - INFO - Epoch [2][500/1109]	lr: 1.998e-04, eta: 6:12:52, time: 0.424, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1225, loss_rpn_bbox: 0.0609, s0.loss_cls: 0.1497, s0.acc: 96.4326, s0.loss_bbox: 0.0351, s1.loss_cls: 0.0425, s1.acc: 98.3447, s1.loss_bbox: 0.0085, s2.loss_cls: 0.0164, s2.acc: 98.9248, s2.loss_bbox: 0.0028, loss: 0.4384
2021-10-08 11:08:23,005 - mmdet - INFO - Epoch [2][550/1109]	lr: 1.998e-04, eta: 6:12:57, time: 0.432, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1264, loss_rpn_bbox: 0.0619, s0.loss_cls: 0.1691, s0.acc: 95.8984, s0.loss_bbox: 0.0413, s1.loss_cls: 0.0523, s1.acc: 97.9814, s1.loss_bbox: 0.0104, s2.loss_cls: 0.0186, s2.acc: 98.7773, s2.loss_bbox: 0.0032, loss: 0.4832
2021-10-08 11:08:44,245 - mmdet - INFO - Epoch [2][600/1109]	lr: 1.998e-04, eta: 6:12:50, time: 0.425, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1122, loss_rpn_bbox: 0.0561, s0.loss_cls: 0.1717, s0.acc: 95.8926, s0.loss_bbox: 0.0415, s1.loss_cls: 0.0495, s1.acc: 98.0137, s1.loss_bbox: 0.0101, s2.loss_cls: 0.0170, s2.acc: 98.8750, s2.loss_bbox: 0.0029, loss: 0.4611
2021-10-08 11:09:05,358 - mmdet - INFO - Epoch [2][650/1109]	lr: 1.998e-04, eta: 6:12:39, time: 0.422, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1164, loss_rpn_bbox: 0.0611, s0.loss_cls: 0.1795, s0.acc: 95.6549, s0.loss_bbox: 0.0442, s1.loss_cls: 0.0535, s1.acc: 97.8787, s1.loss_bbox: 0.0110, s2.loss_cls: 0.0186, s2.acc: 98.7548, s2.loss_bbox: 0.0033, loss: 0.4877
2021-10-08 11:09:26,379 - mmdet - INFO - Epoch [2][700/1109]	lr: 1.998e-04, eta: 6:12:24, time: 0.420, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1178, loss_rpn_bbox: 0.0628, s0.loss_cls: 0.1661, s0.acc: 95.9551, s0.loss_bbox: 0.0414, s1.loss_cls: 0.0495, s1.acc: 97.9678, s1.loss_bbox: 0.0105, s2.loss_cls: 0.0183, s2.acc: 98.7168, s2.loss_bbox: 0.0033, loss: 0.4698
2021-10-08 11:09:47,328 - mmdet - INFO - Epoch [2][750/1109]	lr: 1.998e-04, eta: 6:12:06, time: 0.419, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1201, loss_rpn_bbox: 0.0605, s0.loss_cls: 0.1560, s0.acc: 96.2761, s0.loss_bbox: 0.0373, s1.loss_cls: 0.0465, s1.acc: 98.1429, s1.loss_bbox: 0.0096, s2.loss_cls: 0.0170, s2.acc: 98.8297, s2.loss_bbox: 0.0031, loss: 0.4500
2021-10-08 11:10:09,287 - mmdet - INFO - Epoch [2][800/1109]	lr: 1.998e-04, eta: 6:12:17, time: 0.439, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1148, loss_rpn_bbox: 0.0598, s0.loss_cls: 0.1596, s0.acc: 96.1566, s0.loss_bbox: 0.0393, s1.loss_cls: 0.0468, s1.acc: 98.1187, s1.loss_bbox: 0.0097, s2.loss_cls: 0.0172, s2.acc: 98.8308, s2.loss_bbox: 0.0031, loss: 0.4503
2021-10-08 11:10:30,988 - mmdet - INFO - Epoch [2][850/1109]	lr: 1.998e-04, eta: 6:12:19, time: 0.434, data_time: 0.006, memory: 3371, loss_rpn_cls: 0.1318, loss_rpn_bbox: 0.0680, s0.loss_cls: 0.1837, s0.acc: 95.6890, s0.loss_bbox: 0.0443, s1.loss_cls: 0.0559, s1.acc: 97.8329, s1.loss_bbox: 0.0112, s2.loss_cls: 0.0206, s2.acc: 98.6301, s2.loss_bbox: 0.0036, loss: 0.5190
2021-10-08 11:10:52,073 - mmdet - INFO - Epoch [2][900/1109]	lr: 1.998e-04, eta: 6:12:04, time: 0.422, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1269, loss_rpn_bbox: 0.0624, s0.loss_cls: 0.1881, s0.acc: 95.5948, s0.loss_bbox: 0.0443, s1.loss_cls: 0.0565, s1.acc: 97.8131, s1.loss_bbox: 0.0112, s2.loss_cls: 0.0193, s2.acc: 98.7013, s2.loss_bbox: 0.0034, loss: 0.5122
2021-10-08 11:11:13,118 - mmdet - INFO - Epoch [2][950/1109]	lr: 1.998e-04, eta: 6:11:47, time: 0.421, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1149, loss_rpn_bbox: 0.0591, s0.loss_cls: 0.1464, s0.acc: 96.4765, s0.loss_bbox: 0.0367, s1.loss_cls: 0.0422, s1.acc: 98.2558, s1.loss_bbox: 0.0090, s2.loss_cls: 0.0154, s2.acc: 98.9248, s2.loss_bbox: 0.0028, loss: 0.4264
2021-10-08 11:11:34,190 - mmdet - INFO - Epoch [2][1000/1109]	lr: 1.998e-04, eta: 6:11:31, time: 0.421, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1192, loss_rpn_bbox: 0.0608, s0.loss_cls: 0.1619, s0.acc: 96.1658, s0.loss_bbox: 0.0386, s1.loss_cls: 0.0479, s1.acc: 98.0898, s1.loss_bbox: 0.0098, s2.loss_cls: 0.0172, s2.acc: 98.8357, s2.loss_bbox: 0.0030, loss: 0.4585
2021-10-08 11:11:55,498 - mmdet - INFO - Epoch [2][1050/1109]	lr: 1.998e-04, eta: 6:11:20, time: 0.426, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1431, loss_rpn_bbox: 0.0818, s0.loss_cls: 0.1949, s0.acc: 95.1684, s0.loss_bbox: 0.0492, s1.loss_cls: 0.0589, s1.acc: 97.5272, s1.loss_bbox: 0.0127, s2.loss_cls: 0.0218, s2.acc: 98.4217, s2.loss_bbox: 0.0041, loss: 0.5665
2021-10-08 11:12:16,697 - mmdet - INFO - Epoch [2][1100/1109]	lr: 1.998e-04, eta: 6:11:06, time: 0.424, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1248, loss_rpn_bbox: 0.0690, s0.loss_cls: 0.1783, s0.acc: 95.5365, s0.loss_bbox: 0.0449, s1.loss_cls: 0.0526, s1.acc: 97.8230, s1.loss_bbox: 0.0112, s2.loss_cls: 0.0192, s2.acc: 98.6220, s2.loss_bbox: 0.0036, loss: 0.5037
2021-10-08 11:12:51,128 - mmdet - INFO - Evaluating bbox...
2021-10-08 11:12:56,748 - mmdet - INFO - Now best checkpoint is saved as best_bbox_mAP_50_epoch_2.pth.
2021-10-08 11:12:56,748 - mmdet - INFO - Best bbox_mAP_50 is 0.0180 at 2 epoch.
2021-10-08 11:12:56,760 - mmdet - INFO - Exp name: HTC_x101_64x4d_FPN_CIoU.py
2021-10-08 11:12:56,760 - mmdet - INFO - Epoch(val) [2][448]	bbox_mAP: 0.0050, bbox_mAP_50: 0.0180, bbox_mAP_75: 0.0010, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0000, bbox_mAP_l: 0.0050, bbox_mAP_copypaste: 0.005 0.018 0.001 0.000 0.000 0.005
2021-10-08 11:13:20,023 - mmdet - INFO - Epoch [3][50/1109]	lr: 1.992e-04, eta: 6:10:08, time: 0.465, data_time: 0.049, memory: 3371, loss_rpn_cls: 0.0999, loss_rpn_bbox: 0.0529, s0.loss_cls: 0.1430, s0.acc: 96.4068, s0.loss_bbox: 0.0372, s1.loss_cls: 0.0419, s1.acc: 98.2448, s1.loss_bbox: 0.0089, s2.loss_cls: 0.0148, s2.acc: 98.9709, s2.loss_bbox: 0.0027, loss: 0.4013
2021-10-08 11:13:41,481 - mmdet - INFO - Epoch [3][100/1109]	lr: 1.992e-04, eta: 6:10:00, time: 0.429, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1163, loss_rpn_bbox: 0.0609, s0.loss_cls: 0.1499, s0.acc: 96.2212, s0.loss_bbox: 0.0388, s1.loss_cls: 0.0451, s1.acc: 98.1076, s1.loss_bbox: 0.0098, s2.loss_cls: 0.0167, s2.acc: 98.7918, s2.loss_bbox: 0.0031, loss: 0.4406
2021-10-08 11:14:02,606 - mmdet - INFO - Epoch [3][150/1109]	lr: 1.992e-04, eta: 6:09:45, time: 0.422, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1070, loss_rpn_bbox: 0.0587, s0.loss_cls: 0.1445, s0.acc: 96.4814, s0.loss_bbox: 0.0354, s1.loss_cls: 0.0426, s1.acc: 98.2563, s1.loss_bbox: 0.0089, s2.loss_cls: 0.0153, s2.acc: 98.9032, s2.loss_bbox: 0.0028, loss: 0.4152
2021-10-08 11:14:23,761 - mmdet - INFO - Epoch [3][200/1109]	lr: 1.992e-04, eta: 6:09:29, time: 0.423, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1211, loss_rpn_bbox: 0.0697, s0.loss_cls: 0.1863, s0.acc: 95.3990, s0.loss_bbox: 0.0472, s1.loss_cls: 0.0551, s1.acc: 97.7742, s1.loss_bbox: 0.0115, s2.loss_cls: 0.0196, s2.acc: 98.6230, s2.loss_bbox: 0.0036, loss: 0.5141
2021-10-08 11:14:44,921 - mmdet - INFO - Epoch [3][250/1109]	lr: 1.992e-04, eta: 6:09:14, time: 0.423, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1041, loss_rpn_bbox: 0.0585, s0.loss_cls: 0.1425, s0.acc: 96.6300, s0.loss_bbox: 0.0343, s1.loss_cls: 0.0429, s1.acc: 98.2647, s1.loss_bbox: 0.0089, s2.loss_cls: 0.0155, s2.acc: 98.8933, s2.loss_bbox: 0.0029, loss: 0.4096
2021-10-08 11:15:06,123 - mmdet - INFO - Epoch [3][300/1109]	lr: 1.992e-04, eta: 6:08:59, time: 0.424, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0979, loss_rpn_bbox: 0.0559, s0.loss_cls: 0.1471, s0.acc: 96.3305, s0.loss_bbox: 0.0376, s1.loss_cls: 0.0424, s1.acc: 98.2340, s1.loss_bbox: 0.0092, s2.loss_cls: 0.0151, s2.acc: 98.9048, s2.loss_bbox: 0.0029, loss: 0.4082
2021-10-08 11:15:27,542 - mmdet - INFO - Epoch [3][350/1109]	lr: 1.992e-04, eta: 6:08:49, time: 0.428, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1096, loss_rpn_bbox: 0.0643, s0.loss_cls: 0.1475, s0.acc: 96.2958, s0.loss_bbox: 0.0384, s1.loss_cls: 0.0426, s1.acc: 98.1826, s1.loss_bbox: 0.0094, s2.loss_cls: 0.0157, s2.acc: 98.8525, s2.loss_bbox: 0.0030, loss: 0.4305
2021-10-08 11:15:48,598 - mmdet - INFO - Epoch [3][400/1109]	lr: 1.992e-04, eta: 6:08:30, time: 0.421, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1101, loss_rpn_bbox: 0.0612, s0.loss_cls: 0.1608, s0.acc: 95.8889, s0.loss_bbox: 0.0423, s1.loss_cls: 0.0473, s1.acc: 97.9808, s1.loss_bbox: 0.0104, s2.loss_cls: 0.0168, s2.acc: 98.7647, s2.loss_bbox: 0.0032, loss: 0.4520
2021-10-08 11:16:09,754 - mmdet - INFO - Epoch [3][450/1109]	lr: 1.992e-04, eta: 6:08:14, time: 0.423, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1431, loss_rpn_bbox: 0.0805, s0.loss_cls: 0.1832, s0.acc: 95.3699, s0.loss_bbox: 0.0476, s1.loss_cls: 0.0565, s1.acc: 97.5965, s1.loss_bbox: 0.0124, s2.loss_cls: 0.0213, s2.acc: 98.4527, s2.loss_bbox: 0.0040, loss: 0.5486
2021-10-08 11:16:30,956 - mmdet - INFO - Epoch [3][500/1109]	lr: 1.992e-04, eta: 6:07:58, time: 0.424, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1267, loss_rpn_bbox: 0.0720, s0.loss_cls: 0.1849, s0.acc: 95.0790, s0.loss_bbox: 0.0506, s1.loss_cls: 0.0553, s1.acc: 97.5756, s1.loss_bbox: 0.0126, s2.loss_cls: 0.0198, s2.acc: 98.5151, s2.loss_bbox: 0.0039, loss: 0.5259
2021-10-08 11:16:52,300 - mmdet - INFO - Epoch [3][550/1109]	lr: 1.992e-04, eta: 6:07:45, time: 0.427, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1224, loss_rpn_bbox: 0.0724, s0.loss_cls: 0.1668, s0.acc: 95.8061, s0.loss_bbox: 0.0428, s1.loss_cls: 0.0513, s1.acc: 97.8382, s1.loss_bbox: 0.0111, s2.loss_cls: 0.0189, s2.acc: 98.6078, s2.loss_bbox: 0.0036, loss: 0.4894
2021-10-08 11:17:13,297 - mmdet - INFO - Epoch [3][600/1109]	lr: 1.992e-04, eta: 6:07:25, time: 0.420, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0938, loss_rpn_bbox: 0.0526, s0.loss_cls: 0.1456, s0.acc: 96.5062, s0.loss_bbox: 0.0365, s1.loss_cls: 0.0431, s1.acc: 98.2094, s1.loss_bbox: 0.0093, s2.loss_cls: 0.0151, s2.acc: 98.9055, s2.loss_bbox: 0.0028, loss: 0.3989
2021-10-08 11:17:34,374 - mmdet - INFO - Epoch [3][650/1109]	lr: 1.992e-04, eta: 6:07:07, time: 0.422, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1102, loss_rpn_bbox: 0.0633, s0.loss_cls: 0.1523, s0.acc: 96.2848, s0.loss_bbox: 0.0385, s1.loss_cls: 0.0451, s1.acc: 98.1320, s1.loss_bbox: 0.0096, s2.loss_cls: 0.0162, s2.acc: 98.8109, s2.loss_bbox: 0.0031, loss: 0.4383
2021-10-08 11:17:55,450 - mmdet - INFO - Epoch [3][700/1109]	lr: 1.992e-04, eta: 6:06:48, time: 0.421, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1101, loss_rpn_bbox: 0.0684, s0.loss_cls: 0.1479, s0.acc: 96.2713, s0.loss_bbox: 0.0389, s1.loss_cls: 0.0462, s1.acc: 98.0254, s1.loss_bbox: 0.0103, s2.loss_cls: 0.0170, s2.acc: 98.6966, s2.loss_bbox: 0.0033, loss: 0.4423
2021-10-08 11:18:16,568 - mmdet - INFO - Epoch [3][750/1109]	lr: 1.992e-04, eta: 6:06:30, time: 0.422, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1202, loss_rpn_bbox: 0.0675, s0.loss_cls: 0.1602, s0.acc: 95.8864, s0.loss_bbox: 0.0424, s1.loss_cls: 0.0479, s1.acc: 97.8933, s1.loss_bbox: 0.0108, s2.loss_cls: 0.0179, s2.acc: 98.6444, s2.loss_bbox: 0.0035, loss: 0.4703
2021-10-08 11:18:37,528 - mmdet - INFO - Epoch [3][800/1109]	lr: 1.992e-04, eta: 6:06:09, time: 0.419, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1091, loss_rpn_bbox: 0.0629, s0.loss_cls: 0.1528, s0.acc: 96.1988, s0.loss_bbox: 0.0391, s1.loss_cls: 0.0465, s1.acc: 98.0588, s1.loss_bbox: 0.0100, s2.loss_cls: 0.0167, s2.acc: 98.7824, s2.loss_bbox: 0.0032, loss: 0.4402
2021-10-08 11:18:58,533 - mmdet - INFO - Epoch [3][850/1109]	lr: 1.992e-04, eta: 6:05:49, time: 0.420, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1112, loss_rpn_bbox: 0.0710, s0.loss_cls: 0.1671, s0.acc: 95.7478, s0.loss_bbox: 0.0441, s1.loss_cls: 0.0492, s1.acc: 97.8579, s1.loss_bbox: 0.0112, s2.loss_cls: 0.0178, s2.acc: 98.6325, s2.loss_bbox: 0.0036, loss: 0.4752
2021-10-08 11:19:19,586 - mmdet - INFO - Epoch [3][900/1109]	lr: 1.992e-04, eta: 6:05:30, time: 0.421, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0981, loss_rpn_bbox: 0.0554, s0.loss_cls: 0.1331, s0.acc: 96.6838, s0.loss_bbox: 0.0353, s1.loss_cls: 0.0402, s1.acc: 98.2342, s1.loss_bbox: 0.0091, s2.loss_cls: 0.0141, s2.acc: 98.9463, s2.loss_bbox: 0.0027, loss: 0.3881
2021-10-08 11:19:40,630 - mmdet - INFO - Epoch [3][950/1109]	lr: 1.992e-04, eta: 6:05:11, time: 0.421, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1165, loss_rpn_bbox: 0.0683, s0.loss_cls: 0.1667, s0.acc: 95.7053, s0.loss_bbox: 0.0443, s1.loss_cls: 0.0495, s1.acc: 97.8511, s1.loss_bbox: 0.0112, s2.loss_cls: 0.0178, s2.acc: 98.6781, s2.loss_bbox: 0.0034, loss: 0.4777
2021-10-08 11:20:01,650 - mmdet - INFO - Epoch [3][1000/1109]	lr: 1.992e-04, eta: 6:04:51, time: 0.420, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1046, loss_rpn_bbox: 0.0623, s0.loss_cls: 0.1464, s0.acc: 96.3189, s0.loss_bbox: 0.0368, s1.loss_cls: 0.0423, s1.acc: 98.1503, s1.loss_bbox: 0.0095, s2.loss_cls: 0.0158, s2.acc: 98.8130, s2.loss_bbox: 0.0030, loss: 0.4208
2021-10-08 11:20:22,677 - mmdet - INFO - Epoch [3][1050/1109]	lr: 1.992e-04, eta: 6:04:31, time: 0.421, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0956, loss_rpn_bbox: 0.0543, s0.loss_cls: 0.1342, s0.acc: 96.5950, s0.loss_bbox: 0.0355, s1.loss_cls: 0.0388, s1.acc: 98.3409, s1.loss_bbox: 0.0086, s2.loss_cls: 0.0140, s2.acc: 98.9595, s2.loss_bbox: 0.0027, loss: 0.3838
2021-10-08 11:20:43,828 - mmdet - INFO - Epoch [3][1100/1109]	lr: 1.992e-04, eta: 6:04:13, time: 0.423, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1177, loss_rpn_bbox: 0.0681, s0.loss_cls: 0.1566, s0.acc: 96.0324, s0.loss_bbox: 0.0418, s1.loss_cls: 0.0471, s1.acc: 97.9546, s1.loss_bbox: 0.0106, s2.loss_cls: 0.0179, s2.acc: 98.6265, s2.loss_bbox: 0.0036, loss: 0.4634
2021-10-08 11:21:17,113 - mmdet - INFO - Evaluating bbox...
2021-10-08 11:21:28,658 - mmdet - INFO - Now best checkpoint is saved as best_bbox_mAP_50_epoch_3.pth.
2021-10-08 11:21:28,659 - mmdet - INFO - Best bbox_mAP_50 is 0.0230 at 3 epoch.
2021-10-08 11:21:28,671 - mmdet - INFO - Exp name: HTC_x101_64x4d_FPN_CIoU.py
2021-10-08 11:21:28,672 - mmdet - INFO - Epoch(val) [3][448]	bbox_mAP: 0.0060, bbox_mAP_50: 0.0230, bbox_mAP_75: 0.0020, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0000, bbox_mAP_l: 0.0070, bbox_mAP_copypaste: 0.006 0.023 0.002 0.000 0.000 0.007
2021-10-08 11:21:52,067 - mmdet - INFO - Epoch [4][50/1109]	lr: 1.982e-04, eta: 6:03:28, time: 0.468, data_time: 0.049, memory: 3371, loss_rpn_cls: 0.1020, loss_rpn_bbox: 0.0610, s0.loss_cls: 0.1422, s0.acc: 96.3388, s0.loss_bbox: 0.0393, s1.loss_cls: 0.0437, s1.acc: 98.0401, s1.loss_bbox: 0.0102, s2.loss_cls: 0.0162, s2.acc: 98.7456, s2.loss_bbox: 0.0033, loss: 0.4178
2021-10-08 11:22:13,059 - mmdet - INFO - Epoch [4][100/1109]	lr: 1.982e-04, eta: 6:03:07, time: 0.420, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0929, loss_rpn_bbox: 0.0568, s0.loss_cls: 0.1322, s0.acc: 96.5800, s0.loss_bbox: 0.0366, s1.loss_cls: 0.0396, s1.acc: 98.2042, s1.loss_bbox: 0.0093, s2.loss_cls: 0.0141, s2.acc: 98.8915, s2.loss_bbox: 0.0029, loss: 0.3844
2021-10-08 11:22:34,341 - mmdet - INFO - Epoch [4][150/1109]	lr: 1.982e-04, eta: 6:02:52, time: 0.426, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0992, loss_rpn_bbox: 0.0616, s0.loss_cls: 0.1408, s0.acc: 96.3678, s0.loss_bbox: 0.0379, s1.loss_cls: 0.0417, s1.acc: 98.1764, s1.loss_bbox: 0.0095, s2.loss_cls: 0.0148, s2.acc: 98.8331, s2.loss_bbox: 0.0030, loss: 0.4085
2021-10-08 11:22:55,454 - mmdet - INFO - Epoch [4][200/1109]	lr: 1.982e-04, eta: 6:02:33, time: 0.422, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0977, loss_rpn_bbox: 0.0645, s0.loss_cls: 0.1519, s0.acc: 96.1242, s0.loss_bbox: 0.0403, s1.loss_cls: 0.0463, s1.acc: 97.9976, s1.loss_bbox: 0.0104, s2.loss_cls: 0.0157, s2.acc: 98.7952, s2.loss_bbox: 0.0031, loss: 0.4299
2021-10-08 11:23:16,616 - mmdet - INFO - Epoch [4][250/1109]	lr: 1.982e-04, eta: 6:02:15, time: 0.423, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1165, loss_rpn_bbox: 0.0689, s0.loss_cls: 0.1724, s0.acc: 95.6059, s0.loss_bbox: 0.0452, s1.loss_cls: 0.0502, s1.acc: 97.7916, s1.loss_bbox: 0.0113, s2.loss_cls: 0.0185, s2.acc: 98.6009, s2.loss_bbox: 0.0036, loss: 0.4867
2021-10-08 11:23:37,597 - mmdet - INFO - Epoch [4][300/1109]	lr: 1.982e-04, eta: 6:01:55, time: 0.420, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0964, loss_rpn_bbox: 0.0601, s0.loss_cls: 0.1233, s0.acc: 96.8405, s0.loss_bbox: 0.0332, s1.loss_cls: 0.0355, s1.acc: 98.4434, s1.loss_bbox: 0.0082, s2.loss_cls: 0.0130, s2.acc: 98.9532, s2.loss_bbox: 0.0027, loss: 0.3724
2021-10-08 11:23:58,778 - mmdet - INFO - Epoch [4][350/1109]	lr: 1.982e-04, eta: 6:01:37, time: 0.424, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1147, loss_rpn_bbox: 0.0754, s0.loss_cls: 0.1593, s0.acc: 95.8502, s0.loss_bbox: 0.0438, s1.loss_cls: 0.0502, s1.acc: 97.7752, s1.loss_bbox: 0.0116, s2.loss_cls: 0.0188, s2.acc: 98.5028, s2.loss_bbox: 0.0039, loss: 0.4776
2021-10-08 11:24:19,935 - mmdet - INFO - Epoch [4][400/1109]	lr: 1.982e-04, eta: 6:01:19, time: 0.423, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0977, loss_rpn_bbox: 0.0597, s0.loss_cls: 0.1328, s0.acc: 96.4704, s0.loss_bbox: 0.0371, s1.loss_cls: 0.0407, s1.acc: 98.1661, s1.loss_bbox: 0.0095, s2.loss_cls: 0.0145, s2.acc: 98.8626, s2.loss_bbox: 0.0029, loss: 0.3949
2021-10-08 11:24:41,215 - mmdet - INFO - Epoch [4][450/1109]	lr: 1.982e-04, eta: 6:01:02, time: 0.426, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0997, loss_rpn_bbox: 0.0604, s0.loss_cls: 0.1571, s0.acc: 96.0771, s0.loss_bbox: 0.0420, s1.loss_cls: 0.0481, s1.acc: 97.9408, s1.loss_bbox: 0.0108, s2.loss_cls: 0.0170, s2.acc: 98.7270, s2.loss_bbox: 0.0033, loss: 0.4383
2021-10-08 11:25:02,318 - mmdet - INFO - Epoch [4][500/1109]	lr: 1.982e-04, eta: 6:00:43, time: 0.422, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1062, loss_rpn_bbox: 0.0679, s0.loss_cls: 0.1612, s0.acc: 95.8023, s0.loss_bbox: 0.0438, s1.loss_cls: 0.0484, s1.acc: 97.8309, s1.loss_bbox: 0.0111, s2.loss_cls: 0.0173, s2.acc: 98.6574, s2.loss_bbox: 0.0035, loss: 0.4595
2021-10-08 11:25:23,399 - mmdet - INFO - Epoch [4][550/1109]	lr: 1.982e-04, eta: 6:00:24, time: 0.422, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1150, loss_rpn_bbox: 0.0682, s0.loss_cls: 0.1436, s0.acc: 96.2328, s0.loss_bbox: 0.0392, s1.loss_cls: 0.0438, s1.acc: 98.0352, s1.loss_bbox: 0.0103, s2.loss_cls: 0.0160, s2.acc: 98.7287, s2.loss_bbox: 0.0033, loss: 0.4395
2021-10-08 11:25:44,381 - mmdet - INFO - Epoch [4][600/1109]	lr: 1.982e-04, eta: 6:00:03, time: 0.420, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0967, loss_rpn_bbox: 0.0614, s0.loss_cls: 0.1280, s0.acc: 96.6739, s0.loss_bbox: 0.0349, s1.loss_cls: 0.0387, s1.acc: 98.2691, s1.loss_bbox: 0.0091, s2.loss_cls: 0.0148, s2.acc: 98.8457, s2.loss_bbox: 0.0030, loss: 0.3866
2021-10-08 11:26:05,356 - mmdet - INFO - Epoch [4][650/1109]	lr: 1.982e-04, eta: 5:59:42, time: 0.420, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0978, loss_rpn_bbox: 0.0632, s0.loss_cls: 0.1360, s0.acc: 96.5844, s0.loss_bbox: 0.0368, s1.loss_cls: 0.0402, s1.acc: 98.2446, s1.loss_bbox: 0.0092, s2.loss_cls: 0.0144, s2.acc: 98.8956, s2.loss_bbox: 0.0029, loss: 0.4006
2021-10-08 11:26:26,447 - mmdet - INFO - Epoch [4][700/1109]	lr: 1.982e-04, eta: 5:59:23, time: 0.422, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0910, loss_rpn_bbox: 0.0596, s0.loss_cls: 0.1420, s0.acc: 96.3587, s0.loss_bbox: 0.0393, s1.loss_cls: 0.0433, s1.acc: 98.0460, s1.loss_bbox: 0.0103, s2.loss_cls: 0.0153, s2.acc: 98.7720, s2.loss_bbox: 0.0032, loss: 0.4040
2021-10-08 11:26:47,490 - mmdet - INFO - Epoch [4][750/1109]	lr: 1.982e-04, eta: 5:59:03, time: 0.421, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1131, loss_rpn_bbox: 0.0693, s0.loss_cls: 0.1619, s0.acc: 95.8791, s0.loss_bbox: 0.0431, s1.loss_cls: 0.0496, s1.acc: 97.8165, s1.loss_bbox: 0.0115, s2.loss_cls: 0.0182, s2.acc: 98.5565, s2.loss_bbox: 0.0037, loss: 0.4706
2021-10-08 11:27:08,498 - mmdet - INFO - Epoch [4][800/1109]	lr: 1.982e-04, eta: 5:58:42, time: 0.420, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0942, loss_rpn_bbox: 0.0599, s0.loss_cls: 0.1298, s0.acc: 96.6199, s0.loss_bbox: 0.0360, s1.loss_cls: 0.0400, s1.acc: 98.1769, s1.loss_bbox: 0.0095, s2.loss_cls: 0.0146, s2.acc: 98.8211, s2.loss_bbox: 0.0031, loss: 0.3871
2021-10-08 11:27:29,667 - mmdet - INFO - Epoch [4][850/1109]	lr: 1.982e-04, eta: 5:58:24, time: 0.423, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1078, loss_rpn_bbox: 0.0661, s0.loss_cls: 0.1579, s0.acc: 96.0083, s0.loss_bbox: 0.0427, s1.loss_cls: 0.0481, s1.acc: 97.8652, s1.loss_bbox: 0.0111, s2.loss_cls: 0.0174, s2.acc: 98.6255, s2.loss_bbox: 0.0036, loss: 0.4546
2021-10-08 11:27:50,636 - mmdet - INFO - Epoch [4][900/1109]	lr: 1.982e-04, eta: 5:58:03, time: 0.419, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0894, loss_rpn_bbox: 0.0606, s0.loss_cls: 0.1357, s0.acc: 96.4127, s0.loss_bbox: 0.0390, s1.loss_cls: 0.0412, s1.acc: 98.0950, s1.loss_bbox: 0.0100, s2.loss_cls: 0.0151, s2.acc: 98.7789, s2.loss_bbox: 0.0031, loss: 0.3942
2021-10-08 11:28:11,661 - mmdet - INFO - Epoch [4][950/1109]	lr: 1.982e-04, eta: 5:57:42, time: 0.420, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0911, loss_rpn_bbox: 0.0623, s0.loss_cls: 0.1358, s0.acc: 96.4216, s0.loss_bbox: 0.0375, s1.loss_cls: 0.0406, s1.acc: 98.1538, s1.loss_bbox: 0.0097, s2.loss_cls: 0.0151, s2.acc: 98.7504, s2.loss_bbox: 0.0032, loss: 0.3953
2021-10-08 11:28:32,776 - mmdet - INFO - Epoch [4][1000/1109]	lr: 1.982e-04, eta: 5:57:23, time: 0.422, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0980, loss_rpn_bbox: 0.0645, s0.loss_cls: 0.1305, s0.acc: 96.4591, s0.loss_bbox: 0.0370, s1.loss_cls: 0.0399, s1.acc: 98.1104, s1.loss_bbox: 0.0099, s2.loss_cls: 0.0147, s2.acc: 98.7506, s2.loss_bbox: 0.0033, loss: 0.3977
2021-10-08 11:28:54,193 - mmdet - INFO - Epoch [4][1050/1109]	lr: 1.982e-04, eta: 5:57:07, time: 0.428, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0930, loss_rpn_bbox: 0.0615, s0.loss_cls: 0.1398, s0.acc: 96.4013, s0.loss_bbox: 0.0391, s1.loss_cls: 0.0408, s1.acc: 98.1290, s1.loss_bbox: 0.0101, s2.loss_cls: 0.0152, s2.acc: 98.7813, s2.loss_bbox: 0.0032, loss: 0.4027
2021-10-08 11:29:15,501 - mmdet - INFO - Epoch [4][1100/1109]	lr: 1.982e-04, eta: 5:56:50, time: 0.426, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0966, loss_rpn_bbox: 0.0654, s0.loss_cls: 0.1403, s0.acc: 96.3543, s0.loss_bbox: 0.0386, s1.loss_cls: 0.0420, s1.acc: 98.1178, s1.loss_bbox: 0.0098, s2.loss_cls: 0.0148, s2.acc: 98.8273, s2.loss_bbox: 0.0030, loss: 0.4107
2021-10-08 11:29:48,476 - mmdet - INFO - Evaluating bbox...
2021-10-08 11:29:51,007 - mmdet - INFO - Exp name: HTC_x101_64x4d_FPN_CIoU.py
2021-10-08 11:29:51,008 - mmdet - INFO - Epoch(val) [4][448]	bbox_mAP: 0.0060, bbox_mAP_50: 0.0210, bbox_mAP_75: 0.0020, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0000, bbox_mAP_l: 0.0070, bbox_mAP_copypaste: 0.006 0.021 0.002 0.000 0.000 0.007
2021-10-08 11:30:14,048 - mmdet - INFO - Epoch [5][50/1109]	lr: 1.969e-04, eta: 5:56:06, time: 0.461, data_time: 0.049, memory: 3371, loss_rpn_cls: 0.0723, loss_rpn_bbox: 0.0479, s0.loss_cls: 0.1162, s0.acc: 96.9105, s0.loss_bbox: 0.0335, s1.loss_cls: 0.0338, s1.acc: 98.4253, s1.loss_bbox: 0.0083, s2.loss_cls: 0.0118, s2.acc: 99.0253, s2.loss_bbox: 0.0025, loss: 0.3262
2021-10-08 11:30:35,083 - mmdet - INFO - Epoch [5][100/1109]	lr: 1.969e-04, eta: 5:55:46, time: 0.421, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0896, loss_rpn_bbox: 0.0642, s0.loss_cls: 0.1526, s0.acc: 95.9333, s0.loss_bbox: 0.0439, s1.loss_cls: 0.0463, s1.acc: 97.8547, s1.loss_bbox: 0.0112, s2.loss_cls: 0.0169, s2.acc: 98.6515, s2.loss_bbox: 0.0035, loss: 0.4283
2021-10-08 11:30:56,067 - mmdet - INFO - Epoch [5][150/1109]	lr: 1.969e-04, eta: 5:55:25, time: 0.420, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0884, loss_rpn_bbox: 0.0594, s0.loss_cls: 0.1255, s0.acc: 96.7498, s0.loss_bbox: 0.0354, s1.loss_cls: 0.0387, s1.acc: 98.2405, s1.loss_bbox: 0.0093, s2.loss_cls: 0.0138, s2.acc: 98.8598, s2.loss_bbox: 0.0029, loss: 0.3735
2021-10-08 11:31:17,185 - mmdet - INFO - Epoch [5][200/1109]	lr: 1.969e-04, eta: 5:55:06, time: 0.422, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0939, loss_rpn_bbox: 0.0672, s0.loss_cls: 0.1367, s0.acc: 96.3611, s0.loss_bbox: 0.0388, s1.loss_cls: 0.0413, s1.acc: 98.0600, s1.loss_bbox: 0.0101, s2.loss_cls: 0.0153, s2.acc: 98.7373, s2.loss_bbox: 0.0033, loss: 0.4065
2021-10-08 11:31:38,318 - mmdet - INFO - Epoch [5][250/1109]	lr: 1.969e-04, eta: 5:54:46, time: 0.423, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1000, loss_rpn_bbox: 0.0700, s0.loss_cls: 0.1524, s0.acc: 96.0443, s0.loss_bbox: 0.0422, s1.loss_cls: 0.0451, s1.acc: 97.9505, s1.loss_bbox: 0.0108, s2.loss_cls: 0.0164, s2.acc: 98.6885, s2.loss_bbox: 0.0034, loss: 0.4404
2021-10-08 11:31:59,364 - mmdet - INFO - Epoch [5][300/1109]	lr: 1.969e-04, eta: 5:54:26, time: 0.421, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0864, loss_rpn_bbox: 0.0590, s0.loss_cls: 0.1399, s0.acc: 96.3959, s0.loss_bbox: 0.0382, s1.loss_cls: 0.0408, s1.acc: 98.1382, s1.loss_bbox: 0.0098, s2.loss_cls: 0.0147, s2.acc: 98.8094, s2.loss_bbox: 0.0031, loss: 0.3918
2021-10-08 11:32:20,524 - mmdet - INFO - Epoch [5][350/1109]	lr: 1.969e-04, eta: 5:54:07, time: 0.423, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0957, loss_rpn_bbox: 0.0605, s0.loss_cls: 0.1348, s0.acc: 96.4341, s0.loss_bbox: 0.0379, s1.loss_cls: 0.0410, s1.acc: 98.1605, s1.loss_bbox: 0.0096, s2.loss_cls: 0.0146, s2.acc: 98.8471, s2.loss_bbox: 0.0030, loss: 0.3972
2021-10-08 11:32:41,652 - mmdet - INFO - Epoch [5][400/1109]	lr: 1.969e-04, eta: 5:53:48, time: 0.423, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1101, loss_rpn_bbox: 0.0767, s0.loss_cls: 0.1557, s0.acc: 95.8200, s0.loss_bbox: 0.0457, s1.loss_cls: 0.0477, s1.acc: 97.7281, s1.loss_bbox: 0.0118, s2.loss_cls: 0.0179, s2.acc: 98.5238, s2.loss_bbox: 0.0038, loss: 0.4695
2021-10-08 11:33:02,738 - mmdet - INFO - Epoch [5][450/1109]	lr: 1.969e-04, eta: 5:53:28, time: 0.422, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0891, loss_rpn_bbox: 0.0628, s0.loss_cls: 0.1349, s0.acc: 96.3489, s0.loss_bbox: 0.0380, s1.loss_cls: 0.0407, s1.acc: 98.1167, s1.loss_bbox: 0.0098, s2.loss_cls: 0.0145, s2.acc: 98.7880, s2.loss_bbox: 0.0032, loss: 0.3930
2021-10-08 11:33:23,693 - mmdet - INFO - Epoch [5][500/1109]	lr: 1.969e-04, eta: 5:53:07, time: 0.419, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0903, loss_rpn_bbox: 0.0637, s0.loss_cls: 0.1357, s0.acc: 96.3822, s0.loss_bbox: 0.0389, s1.loss_cls: 0.0415, s1.acc: 98.1074, s1.loss_bbox: 0.0098, s2.loss_cls: 0.0148, s2.acc: 98.8120, s2.loss_bbox: 0.0031, loss: 0.3977
2021-10-08 11:33:44,584 - mmdet - INFO - Epoch [5][550/1109]	lr: 1.969e-04, eta: 5:52:45, time: 0.418, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0924, loss_rpn_bbox: 0.0584, s0.loss_cls: 0.1189, s0.acc: 96.7424, s0.loss_bbox: 0.0353, s1.loss_cls: 0.0364, s1.acc: 98.2566, s1.loss_bbox: 0.0090, s2.loss_cls: 0.0132, s2.acc: 98.9113, s2.loss_bbox: 0.0029, loss: 0.3664
2021-10-08 11:34:05,552 - mmdet - INFO - Epoch [5][600/1109]	lr: 1.969e-04, eta: 5:52:24, time: 0.419, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0946, loss_rpn_bbox: 0.0639, s0.loss_cls: 0.1147, s0.acc: 96.9331, s0.loss_bbox: 0.0332, s1.loss_cls: 0.0356, s1.acc: 98.3050, s1.loss_bbox: 0.0089, s2.loss_cls: 0.0134, s2.acc: 98.8396, s2.loss_bbox: 0.0030, loss: 0.3673
2021-10-08 11:34:26,666 - mmdet - INFO - Epoch [5][650/1109]	lr: 1.969e-04, eta: 5:52:05, time: 0.422, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0761, loss_rpn_bbox: 0.0536, s0.loss_cls: 0.1234, s0.acc: 96.7130, s0.loss_bbox: 0.0354, s1.loss_cls: 0.0360, s1.acc: 98.2821, s1.loss_bbox: 0.0091, s2.loss_cls: 0.0131, s2.acc: 98.8948, s2.loss_bbox: 0.0029, loss: 0.3496
2021-10-08 11:34:48,538 - mmdet - INFO - Epoch [5][700/1109]	lr: 1.969e-04, eta: 5:51:53, time: 0.437, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0809, loss_rpn_bbox: 0.0559, s0.loss_cls: 0.1283, s0.acc: 96.5985, s0.loss_bbox: 0.0364, s1.loss_cls: 0.0383, s1.acc: 98.2409, s1.loss_bbox: 0.0092, s2.loss_cls: 0.0136, s2.acc: 98.9043, s2.loss_bbox: 0.0029, loss: 0.3654
2021-10-08 11:35:10,124 - mmdet - INFO - Epoch [5][750/1109]	lr: 1.969e-04, eta: 5:51:38, time: 0.432, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1036, loss_rpn_bbox: 0.0721, s0.loss_cls: 0.1401, s0.acc: 96.2503, s0.loss_bbox: 0.0409, s1.loss_cls: 0.0431, s1.acc: 97.9496, s1.loss_bbox: 0.0107, s2.loss_cls: 0.0157, s2.acc: 98.6794, s2.loss_bbox: 0.0034, loss: 0.4294
2021-10-08 11:35:31,824 - mmdet - INFO - Epoch [5][800/1109]	lr: 1.969e-04, eta: 5:51:23, time: 0.434, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0964, loss_rpn_bbox: 0.0675, s0.loss_cls: 0.1374, s0.acc: 96.5084, s0.loss_bbox: 0.0368, s1.loss_cls: 0.0407, s1.acc: 98.1476, s1.loss_bbox: 0.0097, s2.loss_cls: 0.0146, s2.acc: 98.7811, s2.loss_bbox: 0.0032, loss: 0.4064
2021-10-08 11:35:52,889 - mmdet - INFO - Epoch [5][850/1109]	lr: 1.969e-04, eta: 5:51:03, time: 0.421, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1034, loss_rpn_bbox: 0.0725, s0.loss_cls: 0.1490, s0.acc: 95.9901, s0.loss_bbox: 0.0440, s1.loss_cls: 0.0449, s1.acc: 97.8266, s1.loss_bbox: 0.0114, s2.loss_cls: 0.0166, s2.acc: 98.5827, s2.loss_bbox: 0.0037, loss: 0.4454
2021-10-08 11:36:13,846 - mmdet - INFO - Epoch [5][900/1109]	lr: 1.969e-04, eta: 5:50:42, time: 0.419, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0875, loss_rpn_bbox: 0.0610, s0.loss_cls: 0.1316, s0.acc: 96.3963, s0.loss_bbox: 0.0401, s1.loss_cls: 0.0401, s1.acc: 98.0554, s1.loss_bbox: 0.0104, s2.loss_cls: 0.0146, s2.acc: 98.7516, s2.loss_bbox: 0.0033, loss: 0.3886
2021-10-08 11:36:34,865 - mmdet - INFO - Epoch [5][950/1109]	lr: 1.969e-04, eta: 5:50:21, time: 0.420, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0894, loss_rpn_bbox: 0.0591, s0.loss_cls: 0.1152, s0.acc: 96.8352, s0.loss_bbox: 0.0336, s1.loss_cls: 0.0361, s1.acc: 98.3204, s1.loss_bbox: 0.0089, s2.loss_cls: 0.0135, s2.acc: 98.8679, s2.loss_bbox: 0.0030, loss: 0.3588
2021-10-08 11:36:55,979 - mmdet - INFO - Epoch [5][1000/1109]	lr: 1.969e-04, eta: 5:50:01, time: 0.422, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.1040, loss_rpn_bbox: 0.0750, s0.loss_cls: 0.1519, s0.acc: 95.8216, s0.loss_bbox: 0.0457, s1.loss_cls: 0.0473, s1.acc: 97.7733, s1.loss_bbox: 0.0120, s2.loss_cls: 0.0173, s2.acc: 98.5381, s2.loss_bbox: 0.0038, loss: 0.4570
2021-10-08 11:37:17,088 - mmdet - INFO - Epoch [5][1050/1109]	lr: 1.969e-04, eta: 5:49:41, time: 0.422, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0791, loss_rpn_bbox: 0.0561, s0.loss_cls: 0.1294, s0.acc: 96.5277, s0.loss_bbox: 0.0381, s1.loss_cls: 0.0388, s1.acc: 98.1883, s1.loss_bbox: 0.0097, s2.loss_cls: 0.0142, s2.acc: 98.8027, s2.loss_bbox: 0.0031, loss: 0.3685
2021-10-08 11:37:38,256 - mmdet - INFO - Epoch [5][1100/1109]	lr: 1.969e-04, eta: 5:49:22, time: 0.423, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0931, loss_rpn_bbox: 0.0709, s0.loss_cls: 0.1430, s0.acc: 96.0241, s0.loss_bbox: 0.0426, s1.loss_cls: 0.0441, s1.acc: 97.8404, s1.loss_bbox: 0.0112, s2.loss_cls: 0.0158, s2.acc: 98.6495, s2.loss_bbox: 0.0036, loss: 0.4242
2021-10-08 11:38:11,113 - mmdet - INFO - Evaluating bbox...
2021-10-08 11:38:13,848 - mmdet - INFO - Exp name: HTC_x101_64x4d_FPN_CIoU.py
2021-10-08 11:38:13,849 - mmdet - INFO - Epoch(val) [5][448]	bbox_mAP: 0.0060, bbox_mAP_50: 0.0230, bbox_mAP_75: 0.0030, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0000, bbox_mAP_l: 0.0080, bbox_mAP_copypaste: 0.006 0.023 0.003 0.000 0.000 0.008
2021-10-08 11:38:37,273 - mmdet - INFO - Epoch [6][50/1109]	lr: 1.951e-04, eta: 5:48:45, time: 0.468, data_time: 0.049, memory: 3371, loss_rpn_cls: 0.0967, loss_rpn_bbox: 0.0695, s0.loss_cls: 0.1383, s0.acc: 96.2162, s0.loss_bbox: 0.0413, s1.loss_cls: 0.0414, s1.acc: 98.0185, s1.loss_bbox: 0.0104, s2.loss_cls: 0.0151, s2.acc: 98.6992, s2.loss_bbox: 0.0034, loss: 0.4161
2021-10-08 11:38:58,279 - mmdet - INFO - Epoch [6][100/1109]	lr: 1.951e-04, eta: 5:48:24, time: 0.420, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0872, loss_rpn_bbox: 0.0599, s0.loss_cls: 0.1225, s0.acc: 96.8402, s0.loss_bbox: 0.0349, s1.loss_cls: 0.0375, s1.acc: 98.2997, s1.loss_bbox: 0.0091, s2.loss_cls: 0.0139, s2.acc: 98.8498, s2.loss_bbox: 0.0030, loss: 0.3680
2021-10-08 11:39:19,394 - mmdet - INFO - Epoch [6][150/1109]	lr: 1.951e-04, eta: 5:48:04, time: 0.422, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0847, loss_rpn_bbox: 0.0599, s0.loss_cls: 0.1282, s0.acc: 96.4890, s0.loss_bbox: 0.0389, s1.loss_cls: 0.0395, s1.acc: 98.0954, s1.loss_bbox: 0.0100, s2.loss_cls: 0.0142, s2.acc: 98.7771, s2.loss_bbox: 0.0032, loss: 0.3785
2021-10-08 11:39:40,697 - mmdet - INFO - Epoch [6][200/1109]	lr: 1.951e-04, eta: 5:47:46, time: 0.426, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0875, loss_rpn_bbox: 0.0677, s0.loss_cls: 0.1336, s0.acc: 96.1133, s0.loss_bbox: 0.0421, s1.loss_cls: 0.0399, s1.acc: 98.0005, s1.loss_bbox: 0.0105, s2.loss_cls: 0.0148, s2.acc: 98.7045, s2.loss_bbox: 0.0034, loss: 0.3995
2021-10-08 11:40:02,256 - mmdet - INFO - Epoch [6][250/1109]	lr: 1.951e-04, eta: 5:47:30, time: 0.431, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0981, loss_rpn_bbox: 0.0696, s0.loss_cls: 0.1405, s0.acc: 96.1577, s0.loss_bbox: 0.0424, s1.loss_cls: 0.0422, s1.acc: 97.9360, s1.loss_bbox: 0.0110, s2.loss_cls: 0.0160, s2.acc: 98.6270, s2.loss_bbox: 0.0036, loss: 0.4235
2021-10-08 11:40:23,343 - mmdet - INFO - Epoch [6][300/1109]	lr: 1.951e-04, eta: 5:47:09, time: 0.422, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0885, loss_rpn_bbox: 0.0680, s0.loss_cls: 0.1239, s0.acc: 96.5613, s0.loss_bbox: 0.0374, s1.loss_cls: 0.0385, s1.acc: 98.1154, s1.loss_bbox: 0.0100, s2.loss_cls: 0.0140, s2.acc: 98.7812, s2.loss_bbox: 0.0032, loss: 0.3836
2021-10-08 11:40:44,503 - mmdet - INFO - Epoch [6][350/1109]	lr: 1.951e-04, eta: 5:46:50, time: 0.423, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0897, loss_rpn_bbox: 0.0686, s0.loss_cls: 0.1427, s0.acc: 96.0204, s0.loss_bbox: 0.0448, s1.loss_cls: 0.0443, s1.acc: 97.8637, s1.loss_bbox: 0.0116, s2.loss_cls: 0.0164, s2.acc: 98.6152, s2.loss_bbox: 0.0037, loss: 0.4217
2021-10-08 11:41:05,442 - mmdet - INFO - Epoch [6][400/1109]	lr: 1.951e-04, eta: 5:46:28, time: 0.419, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0764, loss_rpn_bbox: 0.0530, s0.loss_cls: 0.1108, s0.acc: 97.1325, s0.loss_bbox: 0.0327, s1.loss_cls: 0.0319, s1.acc: 98.5007, s1.loss_bbox: 0.0080, s2.loss_cls: 0.0118, s2.acc: 99.0278, s2.loss_bbox: 0.0026, loss: 0.3271
2021-10-08 11:41:26,502 - mmdet - INFO - Epoch [6][450/1109]	lr: 1.951e-04, eta: 5:46:08, time: 0.421, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0912, loss_rpn_bbox: 0.0626, s0.loss_cls: 0.1350, s0.acc: 96.3940, s0.loss_bbox: 0.0393, s1.loss_cls: 0.0406, s1.acc: 98.1069, s1.loss_bbox: 0.0102, s2.loss_cls: 0.0148, s2.acc: 98.7863, s2.loss_bbox: 0.0032, loss: 0.3969
2021-10-08 11:41:47,605 - mmdet - INFO - Epoch [6][500/1109]	lr: 1.951e-04, eta: 5:45:48, time: 0.422, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0837, loss_rpn_bbox: 0.0712, s0.loss_cls: 0.1267, s0.acc: 96.3699, s0.loss_bbox: 0.0396, s1.loss_cls: 0.0383, s1.acc: 98.0803, s1.loss_bbox: 0.0102, s2.loss_cls: 0.0149, s2.acc: 98.6686, s2.loss_bbox: 0.0035, loss: 0.3881
2021-10-08 11:42:08,712 - mmdet - INFO - Epoch [6][550/1109]	lr: 1.951e-04, eta: 5:45:27, time: 0.422, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0796, loss_rpn_bbox: 0.0586, s0.loss_cls: 0.1207, s0.acc: 96.6135, s0.loss_bbox: 0.0369, s1.loss_cls: 0.0365, s1.acc: 98.2383, s1.loss_bbox: 0.0097, s2.loss_cls: 0.0139, s2.acc: 98.8035, s2.loss_bbox: 0.0031, loss: 0.3591
2021-10-08 11:42:29,842 - mmdet - INFO - Epoch [6][600/1109]	lr: 1.951e-04, eta: 5:45:08, time: 0.423, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0889, loss_rpn_bbox: 0.0662, s0.loss_cls: 0.1327, s0.acc: 96.1883, s0.loss_bbox: 0.0427, s1.loss_cls: 0.0409, s1.acc: 97.9693, s1.loss_bbox: 0.0106, s2.loss_cls: 0.0147, s2.acc: 98.7027, s2.loss_bbox: 0.0034, loss: 0.4000
2021-10-08 11:42:50,981 - mmdet - INFO - Epoch [6][650/1109]	lr: 1.951e-04, eta: 5:44:48, time: 0.423, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0862, loss_rpn_bbox: 0.0640, s0.loss_cls: 0.1461, s0.acc: 96.1909, s0.loss_bbox: 0.0428, s1.loss_cls: 0.0439, s1.acc: 97.9635, s1.loss_bbox: 0.0109, s2.loss_cls: 0.0160, s2.acc: 98.6725, s2.loss_bbox: 0.0034, loss: 0.4133
2021-10-08 11:43:12,028 - mmdet - INFO - Epoch [6][700/1109]	lr: 1.951e-04, eta: 5:44:27, time: 0.421, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0718, loss_rpn_bbox: 0.0608, s0.loss_cls: 0.1269, s0.acc: 96.3947, s0.loss_bbox: 0.0387, s1.loss_cls: 0.0384, s1.acc: 98.0794, s1.loss_bbox: 0.0102, s2.loss_cls: 0.0138, s2.acc: 98.7954, s2.loss_bbox: 0.0032, loss: 0.3637
2021-10-08 11:43:33,620 - mmdet - INFO - Epoch [6][750/1109]	lr: 1.951e-04, eta: 5:44:11, time: 0.432, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0743, loss_rpn_bbox: 0.0535, s0.loss_cls: 0.1228, s0.acc: 96.6998, s0.loss_bbox: 0.0372, s1.loss_cls: 0.0359, s1.acc: 98.3167, s1.loss_bbox: 0.0091, s2.loss_cls: 0.0127, s2.acc: 98.9372, s2.loss_bbox: 0.0028, loss: 0.3482
2021-10-08 11:43:54,710 - mmdet - INFO - Epoch [6][800/1109]	lr: 1.951e-04, eta: 5:43:50, time: 0.422, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0912, loss_rpn_bbox: 0.0649, s0.loss_cls: 0.1226, s0.acc: 96.5663, s0.loss_bbox: 0.0384, s1.loss_cls: 0.0371, s1.acc: 98.1357, s1.loss_bbox: 0.0099, s2.loss_cls: 0.0137, s2.acc: 98.7619, s2.loss_bbox: 0.0032, loss: 0.3812
2021-10-08 11:44:15,730 - mmdet - INFO - Epoch [6][850/1109]	lr: 1.951e-04, eta: 5:43:29, time: 0.420, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0666, loss_rpn_bbox: 0.0511, s0.loss_cls: 0.1051, s0.acc: 97.1280, s0.loss_bbox: 0.0320, s1.loss_cls: 0.0317, s1.acc: 98.4806, s1.loss_bbox: 0.0081, s2.loss_cls: 0.0107, s2.acc: 99.0899, s2.loss_bbox: 0.0025, loss: 0.3079
2021-10-08 11:44:36,837 - mmdet - INFO - Epoch [6][900/1109]	lr: 1.951e-04, eta: 5:43:09, time: 0.422, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0839, loss_rpn_bbox: 0.0625, s0.loss_cls: 0.1281, s0.acc: 96.3874, s0.loss_bbox: 0.0402, s1.loss_cls: 0.0396, s1.acc: 98.0444, s1.loss_bbox: 0.0106, s2.loss_cls: 0.0147, s2.acc: 98.7148, s2.loss_bbox: 0.0034, loss: 0.3830
2021-10-08 11:44:58,189 - mmdet - INFO - Epoch [6][950/1109]	lr: 1.951e-04, eta: 5:42:51, time: 0.427, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0936, loss_rpn_bbox: 0.0711, s0.loss_cls: 0.1511, s0.acc: 95.9634, s0.loss_bbox: 0.0442, s1.loss_cls: 0.0445, s1.acc: 97.8975, s1.loss_bbox: 0.0112, s2.loss_cls: 0.0156, s2.acc: 98.6625, s2.loss_bbox: 0.0035, loss: 0.4348
2021-10-08 11:45:19,300 - mmdet - INFO - Epoch [6][1000/1109]	lr: 1.951e-04, eta: 5:42:30, time: 0.422, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0869, loss_rpn_bbox: 0.0688, s0.loss_cls: 0.1325, s0.acc: 96.3682, s0.loss_bbox: 0.0411, s1.loss_cls: 0.0414, s1.acc: 97.9363, s1.loss_bbox: 0.0110, s2.loss_cls: 0.0150, s2.acc: 98.6741, s2.loss_bbox: 0.0035, loss: 0.4002
2021-10-08 11:45:40,662 - mmdet - INFO - Epoch [6][1050/1109]	lr: 1.951e-04, eta: 5:42:12, time: 0.427, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0698, loss_rpn_bbox: 0.0543, s0.loss_cls: 0.1091, s0.acc: 97.0137, s0.loss_bbox: 0.0344, s1.loss_cls: 0.0319, s1.acc: 98.3990, s1.loss_bbox: 0.0087, s2.loss_cls: 0.0117, s2.acc: 98.9498, s2.loss_bbox: 0.0027, loss: 0.3226
2021-10-08 11:46:02,022 - mmdet - INFO - Epoch [6][1100/1109]	lr: 1.951e-04, eta: 5:41:54, time: 0.427, data_time: 0.005, memory: 3371, loss_rpn_cls: 0.0900, loss_rpn_bbox: 0.0711, s0.loss_cls: 0.1327, s0.acc: 96.3820, s0.loss_bbox: 0.0400, s1.loss_cls: 0.0408, s1.acc: 98.0708, s1.loss_bbox: 0.0105, s2.loss_cls: 0.0150, s2.acc: 98.6979, s2.loss_bbox: 0.0034, loss: 0.4036
2021-10-08 11:46:35,452 - mmdet - INFO - Evaluating bbox...
2021-10-08 11:46:40,420 - mmdet - INFO - Now best checkpoint is saved as best_bbox_mAP_50_epoch_6.pth.
2021-10-08 11:46:40,420 - mmdet - INFO - Best bbox_mAP_50 is 0.0240 at 6 epoch.
2021-10-08 11:46:40,433 - mmdet - INFO - Exp name: HTC_x101_64x4d_FPN_CIoU.py
2021-10-08 11:46:40,433 - mmdet - INFO - Epoch(val) [6][448]	bbox_mAP: 0.0070, bbox_mAP_50: 0.0240, bbox_mAP_75: 0.0040, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0000, bbox_mAP_l: 0.0090, bbox_mAP_copypaste: 0.007 0.024 0.004 0.000 0.000 0.009
