{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.3\nMMCV: 1.3.14\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.17.0+044cccd", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='DetectoRS_ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50'),\n        conv_cfg=dict(type='ConvAWS'),\n        sac=dict(type='SAC', use_deform=True),\n        stage_with_sac=(False, True, True, True),\n        output_img=True),\n    neck=dict(\n        type='RFP',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5,\n        rfp_steps=2,\n        aspp_out_channels=64,\n        aspp_dilations=(1, 3, 6, 1),\n        rfp_backbone=dict(\n            rfp_inplanes=256,\n            type='DetectoRS_ResNet',\n            depth=50,\n            num_stages=4,\n            out_indices=(0, 1, 2, 3),\n            frozen_stages=1,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            norm_eval=True,\n            conv_cfg=dict(type='ConvAWS'),\n            sac=dict(type='SAC', use_deform=True),\n            stage_with_sac=(False, True, True, True),\n            pretrained='torchvision://resnet50',\n            style='pytorch')),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = '/opt/ml/detection/dataset/'\nclasses = [\n    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\nimg_norm_cfg = dict(mean=[0, 0, 0], std=[255.0, 255.0, 255.0], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(300, 300), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[0, 0, 0],\n        std=[255.0, 255.0, 255.0],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(300, 300),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/train_kfold1.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1024, 1024), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/val_kfold1.json',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/test.json',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(\n    type='AdamW',\n    lr=0.0001,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=50)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='WandbLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/Cascade_RCNN_DetectoRS'\ngpu_ids = range(0, 1)\n", "seed": 2021, "exp_name": "Cascade_RCNN_DetectoRS_300.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 16872, "data_time": 0.05919, "loss_rpn_cls": 0.66672, "loss_rpn_bbox": 0.05476, "s0.loss_cls": 1.02697, "s0.acc": 66.70703, "s0.loss_bbox": 0.06528, "s1.loss_cls": 0.63307, "s1.acc": 60.61035, "s1.loss_bbox": 0.01728, "s2.loss_cls": 0.14896, "s2.acc": 86.16895, "s2.loss_bbox": 0.00709, "loss": 2.62014, "time": 2.19227}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 16872, "data_time": 0.01212, "loss_rpn_cls": 0.4488, "loss_rpn_bbox": 0.03661, "s0.loss_cls": 0.28914, "s0.acc": 94.87305, "s0.loss_bbox": 0.13172, "s1.loss_cls": 0.0876, "s1.acc": 97.6543, "s1.loss_bbox": 0.03631, "s2.loss_cls": 0.02675, "s2.acc": 98.72266, "s2.loss_bbox": 0.00619, "loss": 1.06312, "time": 2.15177}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 16872, "data_time": 0.01298, "loss_rpn_cls": 0.15785, "loss_rpn_bbox": 0.04079, "s0.loss_cls": 0.30998, "s0.acc": 93.9209, "s0.loss_bbox": 0.15421, "s1.loss_cls": 0.09394, "s1.acc": 96.97754, "s1.loss_bbox": 0.05081, "s2.loss_cls": 0.02864, "s2.acc": 98.39648, "s2.loss_bbox": 0.00988, "loss": 0.8461, "time": 2.15729}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 2e-05, "memory": 16872, "data_time": 0.01219, "loss_rpn_cls": 0.15313, "loss_rpn_bbox": 0.04902, "s0.loss_cls": 0.31945, "s0.acc": 93.34473, "s0.loss_bbox": 0.15127, "s1.loss_cls": 0.10583, "s1.acc": 96.2041, "s1.loss_bbox": 0.06129, "s2.loss_cls": 0.03406, "s2.acc": 97.89551, "s2.loss_bbox": 0.013, "loss": 0.88704, "time": 2.14949}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 2e-05, "memory": 16872, "data_time": 0.01206, "loss_rpn_cls": 0.11443, "loss_rpn_bbox": 0.04, "s0.loss_cls": 0.27896, "s0.acc": 93.99414, "s0.loss_bbox": 0.13446, "s1.loss_cls": 0.09485, "s1.acc": 96.39746, "s1.loss_bbox": 0.06096, "s2.loss_cls": 0.02877, "s2.acc": 98.09668, "s2.loss_bbox": 0.01317, "loss": 0.76559, "time": 2.143}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 3e-05, "memory": 16872, "data_time": 0.01233, "loss_rpn_cls": 0.10655, "loss_rpn_bbox": 0.03906, "s0.loss_cls": 0.29527, "s0.acc": 93.24902, "s0.loss_bbox": 0.14778, "s1.loss_cls": 0.10818, "s1.acc": 95.51074, "s1.loss_bbox": 0.07173, "s2.loss_cls": 0.03595, "s2.acc": 97.34375, "s2.loss_bbox": 0.02025, "loss": 0.82479, "time": 2.1437}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 3e-05, "memory": 16872, "data_time": 0.01231, "loss_rpn_cls": 0.09609, "loss_rpn_bbox": 0.03523, "s0.loss_cls": 0.28405, "s0.acc": 93.49707, "s0.loss_bbox": 0.13833, "s1.loss_cls": 0.10998, "s1.acc": 95.26758, "s1.loss_bbox": 0.07659, "s2.loss_cls": 0.03765, "s2.acc": 97.01465, "s2.loss_bbox": 0.02273, "loss": 0.80064, "time": 2.14956}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 4e-05, "memory": 16872, "data_time": 0.01236, "loss_rpn_cls": 0.08598, "loss_rpn_bbox": 0.0366, "s0.loss_cls": 0.30538, "s0.acc": 92.66699, "s0.loss_bbox": 0.15326, "s1.loss_cls": 0.12159, "s1.acc": 94.37988, "s1.loss_bbox": 0.09005, "s2.loss_cls": 0.04372, "s2.acc": 96.25195, "s2.loss_bbox": 0.03045, "loss": 0.86702, "time": 2.14449}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 4e-05, "memory": 16872, "data_time": 0.01195, "loss_rpn_cls": 0.07408, "loss_rpn_bbox": 0.03616, "s0.loss_cls": 0.334, "s0.acc": 92.07129, "s0.loss_bbox": 0.16344, "s1.loss_cls": 0.13121, "s1.acc": 93.9873, "s1.loss_bbox": 0.09842, "s2.loss_cls": 0.0475, "s2.acc": 95.82715, "s2.loss_bbox": 0.03381, "loss": 0.91861, "time": 2.1416}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 5e-05, "memory": 16872, "data_time": 0.01216, "loss_rpn_cls": 0.07203, "loss_rpn_bbox": 0.03147, "s0.loss_cls": 0.30015, "s0.acc": 92.83887, "s0.loss_bbox": 0.14274, "s1.loss_cls": 0.12751, "s1.acc": 94.00977, "s1.loss_bbox": 0.09142, "s2.loss_cls": 0.04837, "s2.acc": 95.54297, "s2.loss_bbox": 0.03649, "loss": 0.85018, "time": 2.15135}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 5e-05, "memory": 16872, "data_time": 0.01214, "loss_rpn_cls": 0.06604, "loss_rpn_bbox": 0.02967, "s0.loss_cls": 0.31219, "s0.acc": 92.51855, "s0.loss_bbox": 0.14746, "s1.loss_cls": 0.13242, "s1.acc": 93.56152, "s1.loss_bbox": 0.1018, "s2.loss_cls": 0.05072, "s2.acc": 95.12305, "s2.loss_bbox": 0.04064, "loss": 0.88094, "time": 2.14476}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 6e-05, "memory": 16872, "data_time": 0.01225, "loss_rpn_cls": 0.06938, "loss_rpn_bbox": 0.03103, "s0.loss_cls": 0.28561, "s0.acc": 92.70703, "s0.loss_bbox": 0.13594, "s1.loss_cls": 0.12892, "s1.acc": 93.3252, "s1.loss_bbox": 0.09961, "s2.loss_cls": 0.05375, "s2.acc": 94.40234, "s2.loss_bbox": 0.04587, "loss": 0.85011, "time": 2.14088}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 6e-05, "memory": 16872, "data_time": 0.01219, "loss_rpn_cls": 0.07976, "loss_rpn_bbox": 0.03872, "s0.loss_cls": 0.3383, "s0.acc": 91.27051, "s0.loss_bbox": 0.17243, "s1.loss_cls": 0.14984, "s1.acc": 92.31543, "s1.loss_bbox": 0.11907, "s2.loss_cls": 0.05898, "s2.acc": 94.05859, "s2.loss_bbox": 0.04709, "loss": 1.00419, "time": 2.1473}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 7e-05, "memory": 16872, "data_time": 0.01264, "loss_rpn_cls": 0.05806, "loss_rpn_bbox": 0.03438, "s0.loss_cls": 0.32708, "s0.acc": 91.74316, "s0.loss_bbox": 0.15527, "s1.loss_cls": 0.14765, "s1.acc": 92.48161, "s1.loss_bbox": 0.11488, "s2.loss_cls": 0.0598, "s2.acc": 94.06189, "s2.loss_bbox": 0.05145, "loss": 0.94856, "time": 2.14894}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 7e-05, "memory": 16872, "data_time": 0.01228, "loss_rpn_cls": 0.076, "loss_rpn_bbox": 0.03956, "s0.loss_cls": 0.32743, "s0.acc": 91.45312, "s0.loss_bbox": 0.16075, "s1.loss_cls": 0.15064, "s1.acc": 91.96442, "s1.loss_bbox": 0.12004, "s2.loss_cls": 0.06233, "s2.acc": 93.32676, "s2.loss_bbox": 0.05147, "loss": 0.98822, "time": 2.14784}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 8e-05, "memory": 16872, "data_time": 0.01247, "loss_rpn_cls": 0.06366, "loss_rpn_bbox": 0.03288, "s0.loss_cls": 0.31784, "s0.acc": 91.81445, "s0.loss_bbox": 0.14297, "s1.loss_cls": 0.1451, "s1.acc": 92.33496, "s1.loss_bbox": 0.1106, "s2.loss_cls": 0.06088, "s2.acc": 93.58008, "s2.loss_bbox": 0.05014, "loss": 0.92408, "time": 2.15103}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 8e-05, "memory": 16872, "data_time": 0.0122, "loss_rpn_cls": 0.0609, "loss_rpn_bbox": 0.03354, "s0.loss_cls": 0.35333, "s0.acc": 91.19141, "s0.loss_bbox": 0.1557, "s1.loss_cls": 0.16289, "s1.acc": 91.85038, "s1.loss_bbox": 0.12111, "s2.loss_cls": 0.06619, "s2.acc": 93.43412, "s2.loss_bbox": 0.05192, "loss": 1.00556, "time": 2.14495}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 9e-05, "memory": 16872, "data_time": 0.01224, "loss_rpn_cls": 0.05925, "loss_rpn_bbox": 0.03306, "s0.loss_cls": 0.30619, "s0.acc": 91.90527, "s0.loss_bbox": 0.13628, "s1.loss_cls": 0.14465, "s1.acc": 92.33165, "s1.loss_bbox": 0.11039, "s2.loss_cls": 0.06239, "s2.acc": 93.4155, "s2.loss_bbox": 0.05277, "loss": 0.90497, "time": 2.14821}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 9e-05, "memory": 16872, "data_time": 0.01236, "loss_rpn_cls": 0.05767, "loss_rpn_bbox": 0.03183, "s0.loss_cls": 0.34422, "s0.acc": 90.95605, "s0.loss_bbox": 0.16097, "s1.loss_cls": 0.16318, "s1.acc": 91.24757, "s1.loss_bbox": 0.12667, "s2.loss_cls": 0.06867, "s2.acc": 92.70185, "s2.loss_bbox": 0.0588, "loss": 1.01202, "time": 2.1428}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.0001, "memory": 16872, "data_time": 0.01254, "loss_rpn_cls": 0.05713, "loss_rpn_bbox": 0.03314, "s0.loss_cls": 0.3124, "s0.acc": 91.62695, "s0.loss_bbox": 0.14411, "s1.loss_cls": 0.14367, "s1.acc": 92.20591, "s1.loss_bbox": 0.1134, "s2.loss_cls": 0.06258, "s2.acc": 93.21138, "s2.loss_bbox": 0.0536, "loss": 0.92003, "time": 2.15516}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.0001, "memory": 16872, "data_time": 0.01212, "loss_rpn_cls": 0.05288, "loss_rpn_bbox": 0.02719, "s0.loss_cls": 0.27644, "s0.acc": 92.56934, "s0.loss_bbox": 0.11681, "s1.loss_cls": 0.13491, "s1.acc": 92.30993, "s1.loss_bbox": 0.09738, "s2.loss_cls": 0.06028, "s2.acc": 93.15693, "s2.loss_bbox": 0.04821, "loss": 0.81409, "time": 2.1563}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.0001, "memory": 16872, "data_time": 0.01232, "loss_rpn_cls": 0.05931, "loss_rpn_bbox": 0.04013, "s0.loss_cls": 0.3367, "s0.acc": 90.96777, "s0.loss_bbox": 0.15465, "s1.loss_cls": 0.15756, "s1.acc": 91.37706, "s1.loss_bbox": 0.12008, "s2.loss_cls": 0.06937, "s2.acc": 92.21773, "s2.loss_bbox": 0.05603, "loss": 0.99383, "time": 2.14978}
{"mode": "val", "epoch": 1, "iter": 448, "lr": 0.0001, "bbox_mAP": 0.088, "bbox_mAP_50": 0.155, "bbox_mAP_75": 0.088, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.012, "bbox_mAP_l": 0.105, "bbox_mAP_copypaste": "0.088 0.155 0.088 0.000 0.012 0.105"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.0001, "memory": 16872, "data_time": 0.05969, "loss_rpn_cls": 0.04405, "loss_rpn_bbox": 0.02545, "s0.loss_cls": 0.314, "s0.acc": 91.7207, "s0.loss_bbox": 0.13167, "s1.loss_cls": 0.15151, "s1.acc": 91.76028, "s1.loss_bbox": 0.11478, "s2.loss_cls": 0.06685, "s2.acc": 92.58937, "s2.loss_bbox": 0.05965, "loss": 0.90795, "time": 2.1934}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.0001, "memory": 16872, "data_time": 0.01357, "loss_rpn_cls": 0.05132, "loss_rpn_bbox": 0.03122, "s0.loss_cls": 0.31308, "s0.acc": 91.45508, "s0.loss_bbox": 0.13408, "s1.loss_cls": 0.14988, "s1.acc": 91.72163, "s1.loss_bbox": 0.11159, "s2.loss_cls": 0.06771, "s2.acc": 92.33854, "s2.loss_bbox": 0.05744, "loss": 0.91631, "time": 2.15664}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.0001, "memory": 16872, "data_time": 0.0129, "loss_rpn_cls": 0.05645, "loss_rpn_bbox": 0.03317, "s0.loss_cls": 0.30104, "s0.acc": 91.67773, "s0.loss_bbox": 0.13135, "s1.loss_cls": 0.14993, "s1.acc": 91.40113, "s1.loss_bbox": 0.11496, "s2.loss_cls": 0.07013, "s2.acc": 91.59932, "s2.loss_bbox": 0.0607, "loss": 0.91773, "time": 2.15271}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.0001, "memory": 16872, "data_time": 0.01341, "loss_rpn_cls": 0.04777, "loss_rpn_bbox": 0.03246, "s0.loss_cls": 0.29354, "s0.acc": 92.02539, "s0.loss_bbox": 0.12085, "s1.loss_cls": 0.14223, "s1.acc": 92.10947, "s1.loss_bbox": 0.10169, "s2.loss_cls": 0.06463, "s2.acc": 92.74615, "s2.loss_bbox": 0.05326, "loss": 0.85643, "time": 2.15213}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.0001, "memory": 16872, "data_time": 0.01311, "loss_rpn_cls": 0.04576, "loss_rpn_bbox": 0.0281, "s0.loss_cls": 0.297, "s0.acc": 92.02246, "s0.loss_bbox": 0.12315, "s1.loss_cls": 0.14556, "s1.acc": 91.85591, "s1.loss_bbox": 0.10835, "s2.loss_cls": 0.06724, "s2.acc": 92.26274, "s2.loss_bbox": 0.05679, "loss": 0.87195, "time": 2.15432}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.0001, "memory": 16872, "data_time": 0.01356, "loss_rpn_cls": 0.03733, "loss_rpn_bbox": 0.02883, "s0.loss_cls": 0.30564, "s0.acc": 91.39551, "s0.loss_bbox": 0.13007, "s1.loss_cls": 0.1512, "s1.acc": 91.06183, "s1.loss_bbox": 0.11515, "s2.loss_cls": 0.06932, "s2.acc": 91.75513, "s2.loss_bbox": 0.06109, "loss": 0.89863, "time": 2.1499}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.0001, "memory": 16872, "data_time": 0.01317, "loss_rpn_cls": 0.05617, "loss_rpn_bbox": 0.03569, "s0.loss_cls": 0.31362, "s0.acc": 91.4668, "s0.loss_bbox": 0.13983, "s1.loss_cls": 0.15277, "s1.acc": 91.54146, "s1.loss_bbox": 0.11951, "s2.loss_cls": 0.06976, "s2.acc": 92.21681, "s2.loss_bbox": 0.06365, "loss": 0.95099, "time": 2.1557}
