2021-10-07 09:53:17,394 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]
CUDA available: True
GPU 0: Tesla V100-PCIE-32GB
CUDA_HOME: None
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.5.3
MMCV: 1.3.14
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.0
MMDetection: 2.17.0+044cccd
------------------------------------------------------------

2021-10-07 09:53:17,965 - mmdet - INFO - Distributed training: False
2021-10-07 09:53:18,551 - mmdet - INFO - Config:
model = dict(
    type='CascadeRCNN',
    backbone=dict(
        type='DetectoRS_ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50'),
        conv_cfg=dict(type='ConvAWS'),
        sac=dict(type='SAC', use_deform=True),
        stage_with_sac=(False, True, True, True),
        output_img=True),
    neck=dict(
        type='RFP',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5,
        rfp_steps=2,
        aspp_out_channels=64,
        aspp_dilations=(1, 3, 6, 1),
        rfp_backbone=dict(
            rfp_inplanes=256,
            type='DetectoRS_ResNet',
            depth=50,
            num_stages=4,
            out_indices=(0, 1, 2, 3),
            frozen_stages=1,
            norm_cfg=dict(type='BN', requires_grad=True),
            norm_eval=True,
            conv_cfg=dict(type='ConvAWS'),
            sac=dict(type='SAC', use_deform=True),
            stage_with_sac=(False, True, True, True),
            pretrained='torchvision://resnet50',
            style='pytorch')),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='CascadeRoIHead',
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))
        ]),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=2000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                pos_weight=-1,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100)))
dataset_type = 'CocoDataset'
data_root = '/opt/ml/detection/dataset/'
classes = [
    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',
    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
]
img_norm_cfg = dict(mean=[0, 0, 0], std=[255.0, 255.0, 255.0], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(300, 300), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[0, 0, 0],
        std=[255.0, 255.0, 255.0],
        to_rgb=True),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(300, 300),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[0, 0, 0],
                std=[255.0, 255.0, 255.0],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/train_kfold1.json',
        img_prefix='/opt/ml/detection/dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(300, 300), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[0, 0, 0],
                std=[255.0, 255.0, 255.0],
                to_rgb=True),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/val_kfold1.json',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        img_prefix='/opt/ml/detection/dataset/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(300, 300),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[0, 0, 0],
                        std=[255.0, 255.0, 255.0],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/test.json',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        img_prefix='/opt/ml/detection/dataset/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(300, 300),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[0, 0, 0],
                        std=[255.0, 255.0, 255.0],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP_50')
checkpoint_config = dict(interval=100)
log_config = dict(
    interval=50,
    hooks=[
        dict(type='TextLoggerHook'),
        dict(type='WandbLoggerHook', init_kwargs=dict(project='mmdetection'))
    ])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
optimizer = dict(
    type='Adam',
    lr=0.0001,
    betas=(0.9, 0.999),
    weight_decay=0.05,
    paramwise_cfg=dict(
        custom_keys=dict(
            absolute_pos_embed=dict(decay_mult=0.0),
            relative_position_bias_table=dict(decay_mult=0.0),
            norm=dict(decay_mult=0.0))))
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='CosineAnnealing',
    warmup='linear',
    warmup_iters=1000,
    warmup_ratio=0.01,
    min_lr=1e-06)
runner = dict(type='EpochBasedRunner', max_epochs=50)
work_dir = './work_dirs/Cascade_RCNN_DetectoRS'
gpu_ids = range(0, 1)

2021-10-07 09:53:18,551 - mmdet - INFO - Set random seed to 2021, deterministic: True
2021-10-07 09:53:20,170 - mmdet - INFO - Use load_from_torchvision loader
2021-10-07 09:53:20,442 - mmdet - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

missing keys in source state_dict: layer2.0.conv2.weight_diff, layer2.0.conv2.switch.weight, layer2.0.conv2.switch.bias, layer2.0.conv2.pre_context.weight, layer2.0.conv2.pre_context.bias, layer2.0.conv2.post_context.weight, layer2.0.conv2.post_context.bias, layer2.0.conv2.offset_s.weight, layer2.0.conv2.offset_s.bias, layer2.0.conv2.offset_l.weight, layer2.0.conv2.offset_l.bias, layer2.1.conv2.weight_diff, layer2.1.conv2.switch.weight, layer2.1.conv2.switch.bias, layer2.1.conv2.pre_context.weight, layer2.1.conv2.pre_context.bias, layer2.1.conv2.post_context.weight, layer2.1.conv2.post_context.bias, layer2.1.conv2.offset_s.weight, layer2.1.conv2.offset_s.bias, layer2.1.conv2.offset_l.weight, layer2.1.conv2.offset_l.bias, layer2.2.conv2.weight_diff, layer2.2.conv2.switch.weight, layer2.2.conv2.switch.bias, layer2.2.conv2.pre_context.weight, layer2.2.conv2.pre_context.bias, layer2.2.conv2.post_context.weight, layer2.2.conv2.post_context.bias, layer2.2.conv2.offset_s.weight, layer2.2.conv2.offset_s.bias, layer2.2.conv2.offset_l.weight, layer2.2.conv2.offset_l.bias, layer2.3.conv2.weight_diff, layer2.3.conv2.switch.weight, layer2.3.conv2.switch.bias, layer2.3.conv2.pre_context.weight, layer2.3.conv2.pre_context.bias, layer2.3.conv2.post_context.weight, layer2.3.conv2.post_context.bias, layer2.3.conv2.offset_s.weight, layer2.3.conv2.offset_s.bias, layer2.3.conv2.offset_l.weight, layer2.3.conv2.offset_l.bias, layer3.0.conv2.weight_diff, layer3.0.conv2.switch.weight, layer3.0.conv2.switch.bias, layer3.0.conv2.pre_context.weight, layer3.0.conv2.pre_context.bias, layer3.0.conv2.post_context.weight, layer3.0.conv2.post_context.bias, layer3.0.conv2.offset_s.weight, layer3.0.conv2.offset_s.bias, layer3.0.conv2.offset_l.weight, layer3.0.conv2.offset_l.bias, layer3.1.conv2.weight_diff, layer3.1.conv2.switch.weight, layer3.1.conv2.switch.bias, layer3.1.conv2.pre_context.weight, layer3.1.conv2.pre_context.bias, layer3.1.conv2.post_context.weight, layer3.1.conv2.post_context.bias, layer3.1.conv2.offset_s.weight, layer3.1.conv2.offset_s.bias, layer3.1.conv2.offset_l.weight, layer3.1.conv2.offset_l.bias, layer3.2.conv2.weight_diff, layer3.2.conv2.switch.weight, layer3.2.conv2.switch.bias, layer3.2.conv2.pre_context.weight, layer3.2.conv2.pre_context.bias, layer3.2.conv2.post_context.weight, layer3.2.conv2.post_context.bias, layer3.2.conv2.offset_s.weight, layer3.2.conv2.offset_s.bias, layer3.2.conv2.offset_l.weight, layer3.2.conv2.offset_l.bias, layer3.3.conv2.weight_diff, layer3.3.conv2.switch.weight, layer3.3.conv2.switch.bias, layer3.3.conv2.pre_context.weight, layer3.3.conv2.pre_context.bias, layer3.3.conv2.post_context.weight, layer3.3.conv2.post_context.bias, layer3.3.conv2.offset_s.weight, layer3.3.conv2.offset_s.bias, layer3.3.conv2.offset_l.weight, layer3.3.conv2.offset_l.bias, layer3.4.conv2.weight_diff, layer3.4.conv2.switch.weight, layer3.4.conv2.switch.bias, layer3.4.conv2.pre_context.weight, layer3.4.conv2.pre_context.bias, layer3.4.conv2.post_context.weight, layer3.4.conv2.post_context.bias, layer3.4.conv2.offset_s.weight, layer3.4.conv2.offset_s.bias, layer3.4.conv2.offset_l.weight, layer3.4.conv2.offset_l.bias, layer3.5.conv2.weight_diff, layer3.5.conv2.switch.weight, layer3.5.conv2.switch.bias, layer3.5.conv2.pre_context.weight, layer3.5.conv2.pre_context.bias, layer3.5.conv2.post_context.weight, layer3.5.conv2.post_context.bias, layer3.5.conv2.offset_s.weight, layer3.5.conv2.offset_s.bias, layer3.5.conv2.offset_l.weight, layer3.5.conv2.offset_l.bias, layer4.0.conv2.weight_diff, layer4.0.conv2.switch.weight, layer4.0.conv2.switch.bias, layer4.0.conv2.pre_context.weight, layer4.0.conv2.pre_context.bias, layer4.0.conv2.post_context.weight, layer4.0.conv2.post_context.bias, layer4.0.conv2.offset_s.weight, layer4.0.conv2.offset_s.bias, layer4.0.conv2.offset_l.weight, layer4.0.conv2.offset_l.bias, layer4.1.conv2.weight_diff, layer4.1.conv2.switch.weight, layer4.1.conv2.switch.bias, layer4.1.conv2.pre_context.weight, layer4.1.conv2.pre_context.bias, layer4.1.conv2.post_context.weight, layer4.1.conv2.post_context.bias, layer4.1.conv2.offset_s.weight, layer4.1.conv2.offset_s.bias, layer4.1.conv2.offset_l.weight, layer4.1.conv2.offset_l.bias, layer4.2.conv2.weight_diff, layer4.2.conv2.switch.weight, layer4.2.conv2.switch.bias, layer4.2.conv2.pre_context.weight, layer4.2.conv2.pre_context.bias, layer4.2.conv2.post_context.weight, layer4.2.conv2.post_context.bias, layer4.2.conv2.offset_s.weight, layer4.2.conv2.offset_s.bias, layer4.2.conv2.offset_l.weight, layer4.2.conv2.offset_l.bias

2021-10-07 09:53:20,487 - mmdet - INFO - Use load_from_torchvision loader
2021-10-07 09:53:20,737 - mmdet - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

missing keys in source state_dict: layer2.0.conv2.weight_diff, layer2.0.conv2.switch.weight, layer2.0.conv2.switch.bias, layer2.0.conv2.pre_context.weight, layer2.0.conv2.pre_context.bias, layer2.0.conv2.post_context.weight, layer2.0.conv2.post_context.bias, layer2.0.conv2.offset_s.weight, layer2.0.conv2.offset_s.bias, layer2.0.conv2.offset_l.weight, layer2.0.conv2.offset_l.bias, layer2.0.rfp_conv.weight, layer2.0.rfp_conv.bias, layer2.1.conv2.weight_diff, layer2.1.conv2.switch.weight, layer2.1.conv2.switch.bias, layer2.1.conv2.pre_context.weight, layer2.1.conv2.pre_context.bias, layer2.1.conv2.post_context.weight, layer2.1.conv2.post_context.bias, layer2.1.conv2.offset_s.weight, layer2.1.conv2.offset_s.bias, layer2.1.conv2.offset_l.weight, layer2.1.conv2.offset_l.bias, layer2.2.conv2.weight_diff, layer2.2.conv2.switch.weight, layer2.2.conv2.switch.bias, layer2.2.conv2.pre_context.weight, layer2.2.conv2.pre_context.bias, layer2.2.conv2.post_context.weight, layer2.2.conv2.post_context.bias, layer2.2.conv2.offset_s.weight, layer2.2.conv2.offset_s.bias, layer2.2.conv2.offset_l.weight, layer2.2.conv2.offset_l.bias, layer2.3.conv2.weight_diff, layer2.3.conv2.switch.weight, layer2.3.conv2.switch.bias, layer2.3.conv2.pre_context.weight, layer2.3.conv2.pre_context.bias, layer2.3.conv2.post_context.weight, layer2.3.conv2.post_context.bias, layer2.3.conv2.offset_s.weight, layer2.3.conv2.offset_s.bias, layer2.3.conv2.offset_l.weight, layer2.3.conv2.offset_l.bias, layer3.0.conv2.weight_diff, layer3.0.conv2.switch.weight, layer3.0.conv2.switch.bias, layer3.0.conv2.pre_context.weight, layer3.0.conv2.pre_context.bias, layer3.0.conv2.post_context.weight, layer3.0.conv2.post_context.bias, layer3.0.conv2.offset_s.weight, layer3.0.conv2.offset_s.bias, layer3.0.conv2.offset_l.weight, layer3.0.conv2.offset_l.bias, layer3.0.rfp_conv.weight, layer3.0.rfp_conv.bias, layer3.1.conv2.weight_diff, layer3.1.conv2.switch.weight, layer3.1.conv2.switch.bias, layer3.1.conv2.pre_context.weight, layer3.1.conv2.pre_context.bias, layer3.1.conv2.post_context.weight, layer3.1.conv2.post_context.bias, layer3.1.conv2.offset_s.weight, layer3.1.conv2.offset_s.bias, layer3.1.conv2.offset_l.weight, layer3.1.conv2.offset_l.bias, layer3.2.conv2.weight_diff, layer3.2.conv2.switch.weight, layer3.2.conv2.switch.bias, layer3.2.conv2.pre_context.weight, layer3.2.conv2.pre_context.bias, layer3.2.conv2.post_context.weight, layer3.2.conv2.post_context.bias, layer3.2.conv2.offset_s.weight, layer3.2.conv2.offset_s.bias, layer3.2.conv2.offset_l.weight, layer3.2.conv2.offset_l.bias, layer3.3.conv2.weight_diff, layer3.3.conv2.switch.weight, layer3.3.conv2.switch.bias, layer3.3.conv2.pre_context.weight, layer3.3.conv2.pre_context.bias, layer3.3.conv2.post_context.weight, layer3.3.conv2.post_context.bias, layer3.3.conv2.offset_s.weight, layer3.3.conv2.offset_s.bias, layer3.3.conv2.offset_l.weight, layer3.3.conv2.offset_l.bias, layer3.4.conv2.weight_diff, layer3.4.conv2.switch.weight, layer3.4.conv2.switch.bias, layer3.4.conv2.pre_context.weight, layer3.4.conv2.pre_context.bias, layer3.4.conv2.post_context.weight, layer3.4.conv2.post_context.bias, layer3.4.conv2.offset_s.weight, layer3.4.conv2.offset_s.bias, layer3.4.conv2.offset_l.weight, layer3.4.conv2.offset_l.bias, layer3.5.conv2.weight_diff, layer3.5.conv2.switch.weight, layer3.5.conv2.switch.bias, layer3.5.conv2.pre_context.weight, layer3.5.conv2.pre_context.bias, layer3.5.conv2.post_context.weight, layer3.5.conv2.post_context.bias, layer3.5.conv2.offset_s.weight, layer3.5.conv2.offset_s.bias, layer3.5.conv2.offset_l.weight, layer3.5.conv2.offset_l.bias, layer4.0.conv2.weight_diff, layer4.0.conv2.switch.weight, layer4.0.conv2.switch.bias, layer4.0.conv2.pre_context.weight, layer4.0.conv2.pre_context.bias, layer4.0.conv2.post_context.weight, layer4.0.conv2.post_context.bias, layer4.0.conv2.offset_s.weight, layer4.0.conv2.offset_s.bias, layer4.0.conv2.offset_l.weight, layer4.0.conv2.offset_l.bias, layer4.0.rfp_conv.weight, layer4.0.rfp_conv.bias, layer4.1.conv2.weight_diff, layer4.1.conv2.switch.weight, layer4.1.conv2.switch.bias, layer4.1.conv2.pre_context.weight, layer4.1.conv2.pre_context.bias, layer4.1.conv2.post_context.weight, layer4.1.conv2.post_context.bias, layer4.1.conv2.offset_s.weight, layer4.1.conv2.offset_s.bias, layer4.1.conv2.offset_l.weight, layer4.1.conv2.offset_l.bias, layer4.2.conv2.weight_diff, layer4.2.conv2.switch.weight, layer4.2.conv2.switch.bias, layer4.2.conv2.pre_context.weight, layer4.2.conv2.pre_context.bias, layer4.2.conv2.post_context.weight, layer4.2.conv2.post_context.bias, layer4.2.conv2.offset_s.weight, layer4.2.conv2.offset_s.bias, layer4.2.conv2.offset_l.weight, layer4.2.conv2.offset_l.bias

2021-10-07 09:53:20,761 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2021-10-07 09:53:20,770 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-07 09:53:21,087 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-07 09:53:21,407 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.2.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer2.3.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.2.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.3.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.4.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer3.5.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

backbone.layer4.2.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.conv1.weight - torch.Size([64, 3, 7, 7]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.downsample.1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.downsample.1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.downsample.1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.downsample.1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.rfp_conv.weight - torch.Size([512, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.0.rfp_conv.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.2.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer2.3.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.downsample.1.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.downsample.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.rfp_conv.weight - torch.Size([1024, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.0.rfp_conv.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.2.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.3.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.4.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer3.5.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.downsample.1.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.downsample.1.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.rfp_conv.weight - torch.Size([2048, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.0.rfp_conv.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_modules.0.layer4.2.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_aspp.aspp.0.weight - torch.Size([64, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_aspp.aspp.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_aspp.aspp.1.weight - torch.Size([64, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_aspp.aspp.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_aspp.aspp.2.weight - torch.Size([64, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_aspp.aspp.2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_aspp.aspp.3.weight - torch.Size([64, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_aspp.aspp.3.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of CascadeRCNN  

neck.rfp_weight.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_weight.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 
2021-10-07 09:53:26,145 - mmdet - INFO - Start running, host: root@00a46a6c3ac0, work_dir: /opt/ml/detection/object-detection-level2-cv-01/work_dirs/Cascade_RCNN_DetectoRS
2021-10-07 09:53:26,145 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_run:
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
2021-10-07 09:53:26,145 - mmdet - INFO - workflow: [('train', 1)], max: 50 epochs
2021-10-07 09:54:12,221 - mmdet - INFO - Epoch [1][50/1109]	lr: 5.851e-06, eta: 12:07:19, time: 0.788, data_time: 0.049, memory: 4102, loss_rpn_cls: 0.6639, loss_rpn_bbox: 0.0440, s0.loss_cls: 0.8240, s0.acc: 77.2852, s0.loss_bbox: 0.1576, s1.loss_cls: 0.4676, s1.acc: 75.5615, s1.loss_bbox: 0.0417, s2.loss_cls: 0.1245, s2.acc: 89.7051, s2.loss_bbox: 0.0099, loss: 2.3331
2021-10-07 09:54:48,455 - mmdet - INFO - Epoch [1][100/1109]	lr: 1.080e-05, eta: 11:37:35, time: 0.725, data_time: 0.005, memory: 4102, loss_rpn_cls: 0.4264, loss_rpn_bbox: 0.0368, s0.loss_cls: 0.3042, s0.acc: 94.4355, s0.loss_bbox: 0.1375, s1.loss_cls: 0.0922, s1.acc: 97.3301, s1.loss_bbox: 0.0422, s2.loss_cls: 0.0284, s2.acc: 98.5146, s2.loss_bbox: 0.0074, loss: 1.0750
2021-10-07 09:55:24,744 - mmdet - INFO - Epoch [1][150/1109]	lr: 1.575e-05, eta: 11:27:36, time: 0.726, data_time: 0.005, memory: 4102, loss_rpn_cls: 0.1905, loss_rpn_bbox: 0.0330, s0.loss_cls: 0.3311, s0.acc: 93.6211, s0.loss_bbox: 0.1633, s1.loss_cls: 0.0952, s1.acc: 96.9482, s1.loss_bbox: 0.0528, s2.loss_cls: 0.0291, s2.acc: 98.4512, s2.loss_bbox: 0.0094, loss: 0.9044
2021-10-07 09:56:01,486 - mmdet - INFO - Epoch [1][200/1109]	lr: 2.070e-05, eta: 11:24:23, time: 0.735, data_time: 0.005, memory: 4102, loss_rpn_cls: 0.2039, loss_rpn_bbox: 0.0403, s0.loss_cls: 0.3368, s0.acc: 92.9268, s0.loss_bbox: 0.1611, s1.loss_cls: 0.1084, s1.acc: 96.2109, s1.loss_bbox: 0.0627, s2.loss_cls: 0.0352, s2.acc: 98.0371, s2.loss_bbox: 0.0118, loss: 0.9603
2021-10-07 09:56:37,624 - mmdet - INFO - Epoch [1][250/1109]	lr: 2.565e-05, eta: 11:20:00, time: 0.723, data_time: 0.005, memory: 4102, loss_rpn_cls: 0.1591, loss_rpn_bbox: 0.0322, s0.loss_cls: 0.2992, s0.acc: 93.6230, s0.loss_bbox: 0.1467, s1.loss_cls: 0.1053, s1.acc: 96.1943, s1.loss_bbox: 0.0653, s2.loss_cls: 0.0337, s2.acc: 98.0625, s2.loss_bbox: 0.0139, loss: 0.8554
2021-10-07 09:57:13,962 - mmdet - INFO - Epoch [1][300/1109]	lr: 3.060e-05, eta: 11:17:29, time: 0.727, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1615, loss_rpn_bbox: 0.0329, s0.loss_cls: 0.3409, s0.acc: 92.6113, s0.loss_bbox: 0.1665, s1.loss_cls: 0.1125, s1.acc: 95.6855, s1.loss_bbox: 0.0722, s2.loss_cls: 0.0367, s2.acc: 97.7129, s2.loss_bbox: 0.0164, loss: 0.9397
2021-10-07 09:57:50,539 - mmdet - INFO - Epoch [1][350/1109]	lr: 3.555e-05, eta: 11:16:09, time: 0.732, data_time: 0.005, memory: 4102, loss_rpn_cls: 0.1492, loss_rpn_bbox: 0.0293, s0.loss_cls: 0.3057, s0.acc: 93.2021, s0.loss_bbox: 0.1478, s1.loss_cls: 0.1106, s1.acc: 95.7412, s1.loss_bbox: 0.0701, s2.loss_cls: 0.0364, s2.acc: 97.7197, s2.loss_bbox: 0.0164, loss: 0.8655
2021-10-07 09:58:26,516 - mmdet - INFO - Epoch [1][400/1109]	lr: 4.050e-05, eta: 11:13:36, time: 0.720, data_time: 0.005, memory: 4102, loss_rpn_cls: 0.1481, loss_rpn_bbox: 0.0328, s0.loss_cls: 0.3145, s0.acc: 92.9209, s0.loss_bbox: 0.1551, s1.loss_cls: 0.1137, s1.acc: 95.3975, s1.loss_bbox: 0.0768, s2.loss_cls: 0.0383, s2.acc: 97.4766, s2.loss_bbox: 0.0190, loss: 0.8984
2021-10-07 09:59:02,407 - mmdet - INFO - Epoch [1][450/1109]	lr: 4.545e-05, eta: 11:11:20, time: 0.718, data_time: 0.005, memory: 4102, loss_rpn_cls: 0.1407, loss_rpn_bbox: 0.0301, s0.loss_cls: 0.3261, s0.acc: 92.6270, s0.loss_bbox: 0.1610, s1.loss_cls: 0.1253, s1.acc: 94.8408, s1.loss_bbox: 0.0874, s2.loss_cls: 0.0405, s2.acc: 97.1650, s2.loss_bbox: 0.0226, loss: 0.9338
2021-10-07 09:59:38,766 - mmdet - INFO - Epoch [1][500/1109]	lr: 5.040e-05, eta: 11:10:14, time: 0.727, data_time: 0.005, memory: 4102, loss_rpn_cls: 0.1249, loss_rpn_bbox: 0.0272, s0.loss_cls: 0.2912, s0.acc: 93.2764, s0.loss_bbox: 0.1386, s1.loss_cls: 0.1149, s1.acc: 94.8896, s1.loss_bbox: 0.0804, s2.loss_cls: 0.0431, s2.acc: 96.6973, s2.loss_bbox: 0.0261, loss: 0.8465
2021-10-07 10:00:14,682 - mmdet - INFO - Epoch [1][550/1109]	lr: 5.535e-05, eta: 11:08:30, time: 0.718, data_time: 0.005, memory: 4102, loss_rpn_cls: 0.1199, loss_rpn_bbox: 0.0258, s0.loss_cls: 0.3083, s0.acc: 92.9355, s0.loss_bbox: 0.1415, s1.loss_cls: 0.1280, s1.acc: 94.2705, s1.loss_bbox: 0.0945, s2.loss_cls: 0.0461, s2.acc: 96.3770, s2.loss_bbox: 0.0310, loss: 0.8951
2021-10-07 10:00:51,010 - mmdet - INFO - Epoch [1][600/1109]	lr: 6.030e-05, eta: 11:07:35, time: 0.727, data_time: 0.005, memory: 4102, loss_rpn_cls: 0.1205, loss_rpn_bbox: 0.0274, s0.loss_cls: 0.2925, s0.acc: 92.6738, s0.loss_bbox: 0.1457, s1.loss_cls: 0.1264, s1.acc: 93.8760, s1.loss_bbox: 0.1002, s2.loss_cls: 0.0477, s2.acc: 95.6562, s2.loss_bbox: 0.0366, loss: 0.8970
2021-10-07 10:01:27,034 - mmdet - INFO - Epoch [1][650/1109]	lr: 6.525e-05, eta: 11:06:17, time: 0.720, data_time: 0.005, memory: 4102, loss_rpn_cls: 0.1556, loss_rpn_bbox: 0.0358, s0.loss_cls: 0.3738, s0.acc: 91.1025, s0.loss_bbox: 0.1772, s1.loss_cls: 0.1541, s1.acc: 92.9707, s1.loss_bbox: 0.1110, s2.loss_cls: 0.0566, s2.acc: 95.5762, s2.loss_bbox: 0.0350, loss: 1.0991
2021-10-07 10:02:03,251 - mmdet - INFO - Epoch [1][700/1109]	lr: 7.020e-05, eta: 11:05:20, time: 0.724, data_time: 0.005, memory: 4102, loss_rpn_cls: 0.1274, loss_rpn_bbox: 0.0293, s0.loss_cls: 0.3445, s0.acc: 91.8203, s0.loss_bbox: 0.1552, s1.loss_cls: 0.1462, s1.acc: 93.0635, s1.loss_bbox: 0.1038, s2.loss_cls: 0.0553, s2.acc: 95.4033, s2.loss_bbox: 0.0378, loss: 0.9995
2021-10-07 10:02:39,548 - mmdet - INFO - Epoch [1][750/1109]	lr: 7.515e-05, eta: 11:04:32, time: 0.726, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1313, loss_rpn_bbox: 0.0318, s0.loss_cls: 0.3708, s0.acc: 90.9033, s0.loss_bbox: 0.1784, s1.loss_cls: 0.1571, s1.acc: 92.1826, s1.loss_bbox: 0.1209, s2.loss_cls: 0.0604, s2.acc: 94.6963, s2.loss_bbox: 0.0428, loss: 1.0937
2021-10-07 10:03:15,524 - mmdet - INFO - Epoch [1][800/1109]	lr: 8.010e-05, eta: 11:03:24, time: 0.720, data_time: 0.005, memory: 4102, loss_rpn_cls: 0.1177, loss_rpn_bbox: 0.0281, s0.loss_cls: 0.3408, s0.acc: 91.8359, s0.loss_bbox: 0.1538, s1.loss_cls: 0.1454, s1.acc: 92.7578, s1.loss_bbox: 0.1043, s2.loss_cls: 0.0591, s2.acc: 94.8066, s2.loss_bbox: 0.0398, loss: 0.9890
2021-10-07 10:03:51,400 - mmdet - INFO - Epoch [1][850/1109]	lr: 8.505e-05, eta: 11:02:12, time: 0.718, data_time: 0.005, memory: 4102, loss_rpn_cls: 0.1405, loss_rpn_bbox: 0.0323, s0.loss_cls: 0.3883, s0.acc: 91.3799, s0.loss_bbox: 0.1716, s1.loss_cls: 0.1518, s1.acc: 93.3428, s1.loss_bbox: 0.1059, s2.loss_cls: 0.0534, s2.acc: 95.9170, s2.loss_bbox: 0.0333, loss: 1.0771
2021-10-07 10:04:27,326 - mmdet - INFO - Epoch [1][900/1109]	lr: 9.000e-05, eta: 11:01:08, time: 0.719, data_time: 0.005, memory: 4102, loss_rpn_cls: 0.1406, loss_rpn_bbox: 0.0269, s0.loss_cls: 0.3411, s0.acc: 92.5469, s0.loss_bbox: 0.1474, s1.loss_cls: 0.1356, s1.acc: 94.1680, s1.loss_bbox: 0.0895, s2.loss_cls: 0.0502, s2.acc: 96.3154, s2.loss_bbox: 0.0288, loss: 0.9600
2021-10-07 10:05:03,981 - mmdet - INFO - Epoch [1][950/1109]	lr: 9.495e-05, eta: 11:00:49, time: 0.733, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1633, loss_rpn_bbox: 0.0383, s0.loss_cls: 0.4185, s0.acc: 91.0283, s0.loss_bbox: 0.1773, s1.loss_cls: 0.1621, s1.acc: 93.3135, s1.loss_bbox: 0.1065, s2.loss_cls: 0.0594, s2.acc: 95.8232, s2.loss_bbox: 0.0334, loss: 1.1591
2021-10-07 10:05:40,050 - mmdet - INFO - Exp name: Cascade_RCNN_DetectoRS.py
2021-10-07 10:05:40,050 - mmdet - INFO - Epoch [1][1000/1109]	lr: 9.990e-05, eta: 10:59:56, time: 0.721, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1573, loss_rpn_bbox: 0.0355, s0.loss_cls: 0.3816, s0.acc: 91.9814, s0.loss_bbox: 0.1633, s1.loss_cls: 0.1373, s1.acc: 94.5215, s1.loss_bbox: 0.0865, s2.loss_cls: 0.0464, s2.acc: 96.8525, s2.loss_bbox: 0.0235, loss: 1.0314
2021-10-07 10:06:16,069 - mmdet - INFO - Epoch [1][1050/1109]	lr: 1.000e-04, eta: 10:59:02, time: 0.720, data_time: 0.005, memory: 4102, loss_rpn_cls: 0.1230, loss_rpn_bbox: 0.0266, s0.loss_cls: 0.3448, s0.acc: 92.3047, s0.loss_bbox: 0.1422, s1.loss_cls: 0.1397, s1.acc: 93.7871, s1.loss_bbox: 0.0934, s2.loss_cls: 0.0518, s2.acc: 95.9883, s2.loss_bbox: 0.0323, loss: 0.9538
2021-10-07 10:06:52,640 - mmdet - INFO - Epoch [1][1100/1109]	lr: 1.000e-04, eta: 10:58:36, time: 0.731, data_time: 0.005, memory: 4102, loss_rpn_cls: 0.1576, loss_rpn_bbox: 0.0358, s0.loss_cls: 0.3940, s0.acc: 91.0479, s0.loss_bbox: 0.1768, s1.loss_cls: 0.1519, s1.acc: 93.2646, s1.loss_bbox: 0.1060, s2.loss_cls: 0.0535, s2.acc: 95.9102, s2.loss_bbox: 0.0327, loss: 1.1084
2021-10-07 10:08:28,203 - mmdet - INFO - Evaluating bbox...
2021-10-07 10:08:33,021 - mmdet - INFO - Now best checkpoint is saved as best_bbox_mAP_50_epoch_1.pth.
2021-10-07 10:08:33,022 - mmdet - INFO - Best bbox_mAP_50 is 0.0140 at 1 epoch.
2021-10-07 10:08:33,024 - mmdet - INFO - Exp name: Cascade_RCNN_DetectoRS.py
2021-10-07 10:08:33,024 - mmdet - INFO - Epoch(val) [1][448]	bbox_mAP: 0.0050, bbox_mAP_50: 0.0140, bbox_mAP_75: 0.0030, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0000, bbox_mAP_l: 0.0060, bbox_mAP_copypaste: 0.005 0.014 0.003 0.000 0.000 0.006
2021-10-07 10:09:12,392 - mmdet - INFO - Epoch [2][50/1109]	lr: 9.990e-05, eta: 10:55:07, time: 0.787, data_time: 0.050, memory: 4102, loss_rpn_cls: 0.1428, loss_rpn_bbox: 0.0298, s0.loss_cls: 0.3684, s0.acc: 92.0771, s0.loss_bbox: 0.1564, s1.loss_cls: 0.1411, s1.acc: 94.1348, s1.loss_bbox: 0.0964, s2.loss_cls: 0.0488, s2.acc: 96.5654, s2.loss_bbox: 0.0286, loss: 1.0125
2021-10-07 10:09:48,679 - mmdet - INFO - Epoch [2][100/1109]	lr: 9.990e-05, eta: 10:54:35, time: 0.726, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1383, loss_rpn_bbox: 0.0305, s0.loss_cls: 0.3465, s0.acc: 92.1484, s0.loss_bbox: 0.1488, s1.loss_cls: 0.1364, s1.acc: 93.8105, s1.loss_bbox: 0.0953, s2.loss_cls: 0.0490, s2.acc: 96.1621, s2.loss_bbox: 0.0306, loss: 0.9756
2021-10-07 10:10:24,595 - mmdet - INFO - Epoch [2][150/1109]	lr: 9.990e-05, eta: 10:53:46, time: 0.718, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1532, loss_rpn_bbox: 0.0348, s0.loss_cls: 0.3928, s0.acc: 90.9854, s0.loss_bbox: 0.1729, s1.loss_cls: 0.1561, s1.acc: 93.0557, s1.loss_bbox: 0.1104, s2.loss_cls: 0.0552, s2.acc: 95.7656, s2.loss_bbox: 0.0341, loss: 1.1094
2021-10-07 10:11:00,814 - mmdet - INFO - Epoch [2][200/1109]	lr: 9.990e-05, eta: 10:53:11, time: 0.724, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1564, loss_rpn_bbox: 0.0351, s0.loss_cls: 0.3309, s0.acc: 93.0098, s0.loss_bbox: 0.1372, s1.loss_cls: 0.1245, s1.acc: 94.8604, s1.loss_bbox: 0.0820, s2.loss_cls: 0.0426, s2.acc: 97.0137, s2.loss_bbox: 0.0235, loss: 0.9321
2021-10-07 10:11:37,039 - mmdet - INFO - Epoch [2][250/1109]	lr: 9.990e-05, eta: 10:52:36, time: 0.724, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1375, loss_rpn_bbox: 0.0323, s0.loss_cls: 0.3475, s0.acc: 92.1572, s0.loss_bbox: 0.1591, s1.loss_cls: 0.1313, s1.acc: 94.4258, s1.loss_bbox: 0.0928, s2.loss_cls: 0.0434, s2.acc: 96.8447, s2.loss_bbox: 0.0249, loss: 0.9688
2021-10-07 10:12:13,204 - mmdet - INFO - Epoch [2][300/1109]	lr: 9.990e-05, eta: 10:51:59, time: 0.723, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1309, loss_rpn_bbox: 0.0290, s0.loss_cls: 0.3599, s0.acc: 91.7139, s0.loss_bbox: 0.1559, s1.loss_cls: 0.1405, s1.acc: 93.5166, s1.loss_bbox: 0.1006, s2.loss_cls: 0.0499, s2.acc: 95.8926, s2.loss_bbox: 0.0342, loss: 1.0009
2021-10-07 10:12:49,358 - mmdet - INFO - Epoch [2][350/1109]	lr: 9.990e-05, eta: 10:51:21, time: 0.723, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1592, loss_rpn_bbox: 0.0319, s0.loss_cls: 0.3669, s0.acc: 91.5049, s0.loss_bbox: 0.1598, s1.loss_cls: 0.1501, s1.acc: 93.1514, s1.loss_bbox: 0.1055, s2.loss_cls: 0.0552, s2.acc: 95.7070, s2.loss_bbox: 0.0344, loss: 1.0631
2021-10-07 10:13:25,714 - mmdet - INFO - Epoch [2][400/1109]	lr: 9.990e-05, eta: 10:50:50, time: 0.727, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1829, loss_rpn_bbox: 0.0407, s0.loss_cls: 0.3754, s0.acc: 92.2441, s0.loss_bbox: 0.1597, s1.loss_cls: 0.1319, s1.acc: 94.9551, s1.loss_bbox: 0.0806, s2.loss_cls: 0.0429, s2.acc: 97.2227, s2.loss_bbox: 0.0195, loss: 1.0336
2021-10-07 10:14:01,771 - mmdet - INFO - Epoch [2][450/1109]	lr: 9.990e-05, eta: 10:50:09, time: 0.721, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1589, loss_rpn_bbox: 0.0329, s0.loss_cls: 0.3385, s0.acc: 92.6367, s0.loss_bbox: 0.1410, s1.loss_cls: 0.1313, s1.acc: 94.3574, s1.loss_bbox: 0.0882, s2.loss_cls: 0.0444, s2.acc: 96.6855, s2.loss_bbox: 0.0257, loss: 0.9608
2021-10-07 10:14:38,121 - mmdet - INFO - Epoch [2][500/1109]	lr: 9.990e-05, eta: 10:49:38, time: 0.727, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1337, loss_rpn_bbox: 0.0298, s0.loss_cls: 0.3096, s0.acc: 92.9678, s0.loss_bbox: 0.1337, s1.loss_cls: 0.1203, s1.acc: 94.6689, s1.loss_bbox: 0.0812, s2.loss_cls: 0.0433, s2.acc: 96.7217, s2.loss_bbox: 0.0256, loss: 0.8771
2021-10-07 10:15:14,035 - mmdet - INFO - Epoch [2][550/1109]	lr: 9.990e-05, eta: 10:48:53, time: 0.718, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1576, loss_rpn_bbox: 0.0316, s0.loss_cls: 0.3642, s0.acc: 92.1260, s0.loss_bbox: 0.1606, s1.loss_cls: 0.1304, s1.acc: 94.6279, s1.loss_bbox: 0.0873, s2.loss_cls: 0.0418, s2.acc: 97.0381, s2.loss_bbox: 0.0224, loss: 0.9960
2021-10-07 10:15:50,117 - mmdet - INFO - Epoch [2][600/1109]	lr: 9.990e-05, eta: 10:48:13, time: 0.722, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1312, loss_rpn_bbox: 0.0269, s0.loss_cls: 0.3424, s0.acc: 92.7656, s0.loss_bbox: 0.1483, s1.loss_cls: 0.1225, s1.acc: 95.1133, s1.loss_bbox: 0.0803, s2.loss_cls: 0.0403, s2.acc: 97.3740, s2.loss_bbox: 0.0201, loss: 0.9121
2021-10-07 10:16:26,190 - mmdet - INFO - Epoch [2][650/1109]	lr: 9.990e-05, eta: 10:47:33, time: 0.721, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1362, loss_rpn_bbox: 0.0298, s0.loss_cls: 0.3757, s0.acc: 91.8643, s0.loss_bbox: 0.1606, s1.loss_cls: 0.1401, s1.acc: 94.1797, s1.loss_bbox: 0.0947, s2.loss_cls: 0.0460, s2.acc: 96.7188, s2.loss_bbox: 0.0266, loss: 1.0098
2021-10-07 10:17:02,222 - mmdet - INFO - Epoch [2][700/1109]	lr: 9.990e-05, eta: 10:46:53, time: 0.721, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1408, loss_rpn_bbox: 0.0302, s0.loss_cls: 0.3454, s0.acc: 92.0596, s0.loss_bbox: 0.1561, s1.loss_cls: 0.1350, s1.acc: 93.9932, s1.loss_bbox: 0.0951, s2.loss_cls: 0.0460, s2.acc: 96.5078, s2.loss_bbox: 0.0269, loss: 0.9755
2021-10-07 10:17:38,263 - mmdet - INFO - Epoch [2][750/1109]	lr: 9.990e-05, eta: 10:46:13, time: 0.721, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1508, loss_rpn_bbox: 0.0313, s0.loss_cls: 0.3363, s0.acc: 92.6562, s0.loss_bbox: 0.1457, s1.loss_cls: 0.1252, s1.acc: 94.8457, s1.loss_bbox: 0.0833, s2.loss_cls: 0.0408, s2.acc: 97.1211, s2.loss_bbox: 0.0220, loss: 0.9355
2021-10-07 10:18:14,407 - mmdet - INFO - Epoch [2][800/1109]	lr: 9.990e-05, eta: 10:45:36, time: 0.723, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1353, loss_rpn_bbox: 0.0303, s0.loss_cls: 0.3414, s0.acc: 92.5889, s0.loss_bbox: 0.1487, s1.loss_cls: 0.1244, s1.acc: 94.8506, s1.loss_bbox: 0.0854, s2.loss_cls: 0.0393, s2.acc: 97.2666, s2.loss_bbox: 0.0211, loss: 0.9260
2021-10-07 10:18:51,010 - mmdet - INFO - Epoch [2][850/1109]	lr: 9.990e-05, eta: 10:45:11, time: 0.732, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1620, loss_rpn_bbox: 0.0315, s0.loss_cls: 0.4003, s0.acc: 91.4756, s0.loss_bbox: 0.1701, s1.loss_cls: 0.1448, s1.acc: 94.1426, s1.loss_bbox: 0.0941, s2.loss_cls: 0.0468, s2.acc: 96.7822, s2.loss_bbox: 0.0242, loss: 1.0739
2021-10-07 10:19:27,274 - mmdet - INFO - Epoch [2][900/1109]	lr: 9.990e-05, eta: 10:44:37, time: 0.725, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1491, loss_rpn_bbox: 0.0298, s0.loss_cls: 0.3602, s0.acc: 92.2500, s0.loss_bbox: 0.1584, s1.loss_cls: 0.1293, s1.acc: 94.7324, s1.loss_bbox: 0.0882, s2.loss_cls: 0.0401, s2.acc: 97.2080, s2.loss_bbox: 0.0214, loss: 0.9765
2021-10-07 10:20:03,345 - mmdet - INFO - Epoch [2][950/1109]	lr: 9.990e-05, eta: 10:43:58, time: 0.721, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1344, loss_rpn_bbox: 0.0303, s0.loss_cls: 0.3140, s0.acc: 92.9414, s0.loss_bbox: 0.1376, s1.loss_cls: 0.1215, s1.acc: 94.6338, s1.loss_bbox: 0.0870, s2.loss_cls: 0.0398, s2.acc: 97.0674, s2.loss_bbox: 0.0230, loss: 0.8875
2021-10-07 10:20:39,587 - mmdet - INFO - Epoch [2][1000/1109]	lr: 9.990e-05, eta: 10:43:23, time: 0.725, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1434, loss_rpn_bbox: 0.0295, s0.loss_cls: 0.3551, s0.acc: 92.1504, s0.loss_bbox: 0.1570, s1.loss_cls: 0.1310, s1.acc: 94.5225, s1.loss_bbox: 0.0898, s2.loss_cls: 0.0419, s2.acc: 97.0322, s2.loss_bbox: 0.0228, loss: 0.9706
2021-10-07 10:21:15,307 - mmdet - INFO - Epoch [2][1050/1109]	lr: 9.990e-05, eta: 10:42:35, time: 0.714, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1848, loss_rpn_bbox: 0.0435, s0.loss_cls: 0.3814, s0.acc: 91.2432, s0.loss_bbox: 0.1803, s1.loss_cls: 0.1401, s1.acc: 94.0127, s1.loss_bbox: 0.0978, s2.loss_cls: 0.0453, s2.acc: 96.7725, s2.loss_bbox: 0.0232, loss: 1.0966
2021-10-07 10:21:51,330 - mmdet - INFO - Epoch [2][1100/1109]	lr: 9.990e-05, eta: 10:41:55, time: 0.720, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1649, loss_rpn_bbox: 0.0351, s0.loss_cls: 0.3817, s0.acc: 91.6182, s0.loss_bbox: 0.1734, s1.loss_cls: 0.1368, s1.acc: 94.2266, s1.loss_bbox: 0.0958, s2.loss_cls: 0.0434, s2.acc: 96.8789, s2.loss_bbox: 0.0235, loss: 1.0546
2021-10-07 10:23:27,802 - mmdet - INFO - Evaluating bbox...
2021-10-07 10:23:32,836 - mmdet - INFO - Now best checkpoint is saved as best_bbox_mAP_50_epoch_2.pth.
2021-10-07 10:23:32,836 - mmdet - INFO - Best bbox_mAP_50 is 0.0220 at 2 epoch.
2021-10-07 10:23:32,839 - mmdet - INFO - Exp name: Cascade_RCNN_DetectoRS.py
2021-10-07 10:23:32,839 - mmdet - INFO - Epoch(val) [2][448]	bbox_mAP: 0.0080, bbox_mAP_50: 0.0220, bbox_mAP_75: 0.0040, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0000, bbox_mAP_l: 0.0100, bbox_mAP_copypaste: 0.008 0.022 0.004 0.000 0.000 0.010
2021-10-07 10:24:11,972 - mmdet - INFO - Epoch [3][50/1109]	lr: 9.961e-05, eta: 10:39:49, time: 0.782, data_time: 0.050, memory: 4102, loss_rpn_cls: 0.1300, loss_rpn_bbox: 0.0257, s0.loss_cls: 0.3291, s0.acc: 92.6973, s0.loss_bbox: 0.1459, s1.loss_cls: 0.1224, s1.acc: 94.7539, s1.loss_bbox: 0.0884, s2.loss_cls: 0.0380, s2.acc: 97.2393, s2.loss_bbox: 0.0223, loss: 0.9018
2021-10-07 10:24:47,834 - mmdet - INFO - Epoch [3][100/1109]	lr: 9.961e-05, eta: 10:39:08, time: 0.717, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1474, loss_rpn_bbox: 0.0312, s0.loss_cls: 0.3379, s0.acc: 92.7109, s0.loss_bbox: 0.1446, s1.loss_cls: 0.1259, s1.acc: 94.8057, s1.loss_bbox: 0.0844, s2.loss_cls: 0.0411, s2.acc: 97.1475, s2.loss_bbox: 0.0219, loss: 0.9343
2021-10-07 10:25:23,975 - mmdet - INFO - Epoch [3][150/1109]	lr: 9.961e-05, eta: 10:38:33, time: 0.723, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1434, loss_rpn_bbox: 0.0286, s0.loss_cls: 0.3408, s0.acc: 92.3193, s0.loss_bbox: 0.1524, s1.loss_cls: 0.1296, s1.acc: 94.4336, s1.loss_bbox: 0.0933, s2.loss_cls: 0.0398, s2.acc: 97.1924, s2.loss_bbox: 0.0222, loss: 0.9501
2021-10-07 10:25:59,945 - mmdet - INFO - Epoch [3][200/1109]	lr: 9.961e-05, eta: 10:37:54, time: 0.719, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1563, loss_rpn_bbox: 0.0334, s0.loss_cls: 0.4115, s0.acc: 90.8711, s0.loss_bbox: 0.1819, s1.loss_cls: 0.1526, s1.acc: 93.5088, s1.loss_bbox: 0.1070, s2.loss_cls: 0.0479, s2.acc: 96.5039, s2.loss_bbox: 0.0271, loss: 1.1178
2021-10-07 10:26:35,811 - mmdet - INFO - Epoch [3][250/1109]	lr: 9.961e-05, eta: 10:37:13, time: 0.717, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1405, loss_rpn_bbox: 0.0285, s0.loss_cls: 0.3109, s0.acc: 93.3779, s0.loss_bbox: 0.1295, s1.loss_cls: 0.1164, s1.acc: 95.1289, s1.loss_bbox: 0.0780, s2.loss_cls: 0.0379, s2.acc: 97.3096, s2.loss_bbox: 0.0204, loss: 0.8619
2021-10-07 10:27:11,710 - mmdet - INFO - Epoch [3][300/1109]	lr: 9.961e-05, eta: 10:36:33, time: 0.718, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1370, loss_rpn_bbox: 0.0281, s0.loss_cls: 0.3058, s0.acc: 93.0557, s0.loss_bbox: 0.1360, s1.loss_cls: 0.1176, s1.acc: 94.8105, s1.loss_bbox: 0.0856, s2.loss_cls: 0.0394, s2.acc: 97.0547, s2.loss_bbox: 0.0239, loss: 0.8734
2021-10-07 10:27:47,898 - mmdet - INFO - Epoch [3][350/1109]	lr: 9.961e-05, eta: 10:35:59, time: 0.724, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1458, loss_rpn_bbox: 0.0313, s0.loss_cls: 0.3538, s0.acc: 92.0078, s0.loss_bbox: 0.1583, s1.loss_cls: 0.1318, s1.acc: 94.2012, s1.loss_bbox: 0.0956, s2.loss_cls: 0.0416, s2.acc: 96.8906, s2.loss_bbox: 0.0249, loss: 0.9832
2021-10-07 10:28:24,140 - mmdet - INFO - Epoch [3][400/1109]	lr: 9.961e-05, eta: 10:35:27, time: 0.725, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1430, loss_rpn_bbox: 0.0305, s0.loss_cls: 0.3368, s0.acc: 92.3447, s0.loss_bbox: 0.1550, s1.loss_cls: 0.1257, s1.acc: 94.5762, s1.loss_bbox: 0.0906, s2.loss_cls: 0.0389, s2.acc: 97.2197, s2.loss_bbox: 0.0218, loss: 0.9423
2021-10-07 10:29:00,662 - mmdet - INFO - Epoch [3][450/1109]	lr: 9.961e-05, eta: 10:34:59, time: 0.730, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1843, loss_rpn_bbox: 0.0418, s0.loss_cls: 0.4063, s0.acc: 90.9570, s0.loss_bbox: 0.1842, s1.loss_cls: 0.1474, s1.acc: 93.8828, s1.loss_bbox: 0.1020, s2.loss_cls: 0.0452, s2.acc: 96.8320, s2.loss_bbox: 0.0227, loss: 1.1340
2021-10-07 10:29:36,705 - mmdet - INFO - Epoch [3][500/1109]	lr: 9.961e-05, eta: 10:34:22, time: 0.721, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1587, loss_rpn_bbox: 0.0365, s0.loss_cls: 0.4000, s0.acc: 90.7314, s0.loss_bbox: 0.1871, s1.loss_cls: 0.1468, s1.acc: 93.5703, s1.loss_bbox: 0.1080, s2.loss_cls: 0.0461, s2.acc: 96.6436, s2.loss_bbox: 0.0255, loss: 1.1087
2021-10-07 10:30:12,501 - mmdet - INFO - Epoch [3][550/1109]	lr: 9.961e-05, eta: 10:33:40, time: 0.716, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1753, loss_rpn_bbox: 0.0373, s0.loss_cls: 0.3777, s0.acc: 91.7188, s0.loss_bbox: 0.1642, s1.loss_cls: 0.1396, s1.acc: 94.1729, s1.loss_bbox: 0.0944, s2.loss_cls: 0.0451, s2.acc: 96.8428, s2.loss_bbox: 0.0233, loss: 1.0569
2021-10-07 10:30:48,547 - mmdet - INFO - Epoch [3][600/1109]	lr: 9.961e-05, eta: 10:33:03, time: 0.721, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1360, loss_rpn_bbox: 0.0248, s0.loss_cls: 0.3285, s0.acc: 93.0654, s0.loss_bbox: 0.1398, s1.loss_cls: 0.1223, s1.acc: 95.0596, s1.loss_bbox: 0.0856, s2.loss_cls: 0.0378, s2.acc: 97.5303, s2.loss_bbox: 0.0194, loss: 0.8942
2021-10-07 10:31:24,925 - mmdet - INFO - Epoch [3][650/1109]	lr: 9.961e-05, eta: 10:32:33, time: 0.728, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1474, loss_rpn_bbox: 0.0339, s0.loss_cls: 0.3302, s0.acc: 92.6729, s0.loss_bbox: 0.1441, s1.loss_cls: 0.1241, s1.acc: 94.6816, s1.loss_bbox: 0.0880, s2.loss_cls: 0.0389, s2.acc: 97.2021, s2.loss_bbox: 0.0214, loss: 0.9280
2021-10-07 10:32:00,883 - mmdet - INFO - Epoch [3][700/1109]	lr: 9.961e-05, eta: 10:31:54, time: 0.719, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1492, loss_rpn_bbox: 0.0359, s0.loss_cls: 0.3550, s0.acc: 92.0205, s0.loss_bbox: 0.1543, s1.loss_cls: 0.1349, s1.acc: 94.0898, s1.loss_bbox: 0.0949, s2.loss_cls: 0.0431, s2.acc: 96.7705, s2.loss_bbox: 0.0246, loss: 0.9919
2021-10-07 10:32:37,125 - mmdet - INFO - Epoch [3][750/1109]	lr: 9.961e-05, eta: 10:31:21, time: 0.725, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1595, loss_rpn_bbox: 0.0333, s0.loss_cls: 0.3842, s0.acc: 91.0195, s0.loss_bbox: 0.1788, s1.loss_cls: 0.1418, s1.acc: 93.6973, s1.loss_bbox: 0.1051, s2.loss_cls: 0.0449, s2.acc: 96.6904, s2.loss_bbox: 0.0257, loss: 1.0734
2021-10-07 10:33:13,643 - mmdet - INFO - Epoch [3][800/1109]	lr: 9.961e-05, eta: 10:30:52, time: 0.730, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1416, loss_rpn_bbox: 0.0314, s0.loss_cls: 0.3574, s0.acc: 92.0059, s0.loss_bbox: 0.1597, s1.loss_cls: 0.1363, s1.acc: 94.2012, s1.loss_bbox: 0.0984, s2.loss_cls: 0.0419, s2.acc: 97.0020, s2.loss_bbox: 0.0236, loss: 0.9903
2021-10-07 10:33:49,708 - mmdet - INFO - Epoch [3][850/1109]	lr: 9.961e-05, eta: 10:30:16, time: 0.721, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1509, loss_rpn_bbox: 0.0352, s0.loss_cls: 0.3936, s0.acc: 91.0928, s0.loss_bbox: 0.1795, s1.loss_cls: 0.1437, s1.acc: 93.9258, s1.loss_bbox: 0.1015, s2.loss_cls: 0.0447, s2.acc: 96.8545, s2.loss_bbox: 0.0239, loss: 1.0731
2021-10-07 10:34:25,754 - mmdet - INFO - Epoch [3][900/1109]	lr: 9.961e-05, eta: 10:29:39, time: 0.721, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1288, loss_rpn_bbox: 0.0262, s0.loss_cls: 0.3369, s0.acc: 92.3848, s0.loss_bbox: 0.1474, s1.loss_cls: 0.1274, s1.acc: 94.3926, s1.loss_bbox: 0.0905, s2.loss_cls: 0.0414, s2.acc: 96.8447, s2.loss_bbox: 0.0256, loss: 0.9243
2021-10-07 10:35:01,815 - mmdet - INFO - Epoch [3][950/1109]	lr: 9.961e-05, eta: 10:29:02, time: 0.721, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1568, loss_rpn_bbox: 0.0333, s0.loss_cls: 0.3785, s0.acc: 91.5488, s0.loss_bbox: 0.1728, s1.loss_cls: 0.1392, s1.acc: 94.1426, s1.loss_bbox: 0.0998, s2.loss_cls: 0.0426, s2.acc: 97.0078, s2.loss_bbox: 0.0231, loss: 1.0460
2021-10-07 10:35:37,827 - mmdet - INFO - Epoch [3][1000/1109]	lr: 9.961e-05, eta: 10:28:24, time: 0.720, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1481, loss_rpn_bbox: 0.0300, s0.loss_cls: 0.3354, s0.acc: 92.4795, s0.loss_bbox: 0.1488, s1.loss_cls: 0.1246, s1.acc: 94.6221, s1.loss_bbox: 0.0890, s2.loss_cls: 0.0389, s2.acc: 97.2051, s2.loss_bbox: 0.0208, loss: 0.9356
2021-10-07 10:36:13,771 - mmdet - INFO - Epoch [3][1050/1109]	lr: 9.961e-05, eta: 10:27:46, time: 0.719, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1300, loss_rpn_bbox: 0.0276, s0.loss_cls: 0.3059, s0.acc: 93.0576, s0.loss_bbox: 0.1364, s1.loss_cls: 0.1158, s1.acc: 94.8896, s1.loss_bbox: 0.0850, s2.loss_cls: 0.0372, s2.acc: 97.2334, s2.loss_bbox: 0.0226, loss: 0.8605
2021-10-07 10:36:50,065 - mmdet - INFO - Epoch [3][1100/1109]	lr: 9.961e-05, eta: 10:27:13, time: 0.726, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1545, loss_rpn_bbox: 0.0359, s0.loss_cls: 0.3386, s0.acc: 92.1465, s0.loss_bbox: 0.1503, s1.loss_cls: 0.1288, s1.acc: 94.0967, s1.loss_bbox: 0.0952, s2.loss_cls: 0.0426, s2.acc: 96.6699, s2.loss_bbox: 0.0257, loss: 0.9716
2021-10-07 10:38:25,703 - mmdet - INFO - Evaluating bbox...
2021-10-07 10:38:26,720 - mmdet - INFO - Exp name: Cascade_RCNN_DetectoRS.py
2021-10-07 10:38:26,721 - mmdet - INFO - Epoch(val) [3][448]	bbox_mAP: 0.0070, bbox_mAP_50: 0.0190, bbox_mAP_75: 0.0040, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0000, bbox_mAP_l: 0.0090, bbox_mAP_copypaste: 0.007 0.019 0.004 0.000 0.000 0.009
2021-10-07 10:39:05,129 - mmdet - INFO - Epoch [4][50/1109]	lr: 9.912e-05, eta: 10:25:26, time: 0.768, data_time: 0.050, memory: 4102, loss_rpn_cls: 0.1455, loss_rpn_bbox: 0.0291, s0.loss_cls: 0.3536, s0.acc: 91.9502, s0.loss_bbox: 0.1580, s1.loss_cls: 0.1363, s1.acc: 93.9492, s1.loss_bbox: 0.1003, s2.loss_cls: 0.0436, s2.acc: 96.7041, s2.loss_bbox: 0.0268, loss: 0.9931
2021-10-07 10:39:41,188 - mmdet - INFO - Epoch [4][100/1109]	lr: 9.912e-05, eta: 10:24:50, time: 0.721, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1373, loss_rpn_bbox: 0.0267, s0.loss_cls: 0.3277, s0.acc: 92.6113, s0.loss_bbox: 0.1459, s1.loss_cls: 0.1204, s1.acc: 94.7920, s1.loss_bbox: 0.0879, s2.loss_cls: 0.0381, s2.acc: 97.1797, s2.loss_bbox: 0.0223, loss: 0.9064
2021-10-07 10:40:17,337 - mmdet - INFO - Epoch [4][150/1109]	lr: 9.912e-05, eta: 10:24:16, time: 0.723, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1410, loss_rpn_bbox: 0.0288, s0.loss_cls: 0.3510, s0.acc: 92.0186, s0.loss_bbox: 0.1575, s1.loss_cls: 0.1317, s1.acc: 94.2236, s1.loss_bbox: 0.0958, s2.loss_cls: 0.0412, s2.acc: 96.9600, s2.loss_bbox: 0.0236, loss: 0.9706
2021-10-07 10:40:53,613 - mmdet - INFO - Epoch [4][200/1109]	lr: 9.912e-05, eta: 10:23:43, time: 0.725, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1422, loss_rpn_bbox: 0.0314, s0.loss_cls: 0.3513, s0.acc: 91.9482, s0.loss_bbox: 0.1555, s1.loss_cls: 0.1336, s1.acc: 93.9355, s1.loss_bbox: 0.0988, s2.loss_cls: 0.0433, s2.acc: 96.6787, s2.loss_bbox: 0.0268, loss: 0.9829
2021-10-07 10:41:29,671 - mmdet - INFO - Epoch [4][250/1109]	lr: 9.912e-05, eta: 10:23:08, time: 0.721, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1611, loss_rpn_bbox: 0.0346, s0.loss_cls: 0.3831, s0.acc: 91.2100, s0.loss_bbox: 0.1770, s1.loss_cls: 0.1402, s1.acc: 93.8809, s1.loss_bbox: 0.1018, s2.loss_cls: 0.0442, s2.acc: 96.6982, s2.loss_bbox: 0.0252, loss: 1.0672
2021-10-07 10:42:05,571 - mmdet - INFO - Epoch [4][300/1109]	lr: 9.912e-05, eta: 10:22:29, time: 0.718, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1338, loss_rpn_bbox: 0.0308, s0.loss_cls: 0.3171, s0.acc: 92.7646, s0.loss_bbox: 0.1383, s1.loss_cls: 0.1218, s1.acc: 94.5020, s1.loss_bbox: 0.0908, s2.loss_cls: 0.0391, s2.acc: 97.0166, s2.loss_bbox: 0.0242, loss: 0.8958
2021-10-07 10:42:41,478 - mmdet - INFO - Epoch [4][350/1109]	lr: 9.912e-05, eta: 10:21:52, time: 0.718, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1643, loss_rpn_bbox: 0.0366, s0.loss_cls: 0.3954, s0.acc: 90.9375, s0.loss_bbox: 0.1801, s1.loss_cls: 0.1474, s1.acc: 93.5557, s1.loss_bbox: 0.1042, s2.loss_cls: 0.0477, s2.acc: 96.5137, s2.loss_bbox: 0.0259, loss: 1.1017
2021-10-07 10:43:17,496 - mmdet - INFO - Epoch [4][400/1109]	lr: 9.912e-05, eta: 10:21:15, time: 0.720, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1484, loss_rpn_bbox: 0.0304, s0.loss_cls: 0.3415, s0.acc: 92.7178, s0.loss_bbox: 0.1429, s1.loss_cls: 0.1260, s1.acc: 94.7168, s1.loss_bbox: 0.0870, s2.loss_cls: 0.0394, s2.acc: 97.2021, s2.loss_bbox: 0.0213, loss: 0.9368
2021-10-07 10:43:54,174 - mmdet - INFO - Epoch [4][450/1109]	lr: 9.912e-05, eta: 10:20:48, time: 0.734, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1360, loss_rpn_bbox: 0.0295, s0.loss_cls: 0.3412, s0.acc: 92.2754, s0.loss_bbox: 0.1540, s1.loss_cls: 0.1255, s1.acc: 94.4697, s1.loss_bbox: 0.0912, s2.loss_cls: 0.0398, s2.acc: 96.9785, s2.loss_bbox: 0.0234, loss: 0.9406
2021-10-07 10:44:31,060 - mmdet - INFO - Epoch [4][500/1109]	lr: 9.912e-05, eta: 10:20:23, time: 0.738, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1612, loss_rpn_bbox: 0.0338, s0.loss_cls: 0.3741, s0.acc: 91.9170, s0.loss_bbox: 0.1685, s1.loss_cls: 0.1338, s1.acc: 94.5430, s1.loss_bbox: 0.0924, s2.loss_cls: 0.0411, s2.acc: 97.1748, s2.loss_bbox: 0.0211, loss: 1.0258
2021-10-07 10:45:06,948 - mmdet - INFO - Epoch [4][550/1109]	lr: 9.912e-05, eta: 10:19:45, time: 0.718, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1637, loss_rpn_bbox: 0.0345, s0.loss_cls: 0.3606, s0.acc: 91.9893, s0.loss_bbox: 0.1571, s1.loss_cls: 0.1360, s1.acc: 94.1299, s1.loss_bbox: 0.0981, s2.loss_cls: 0.0429, s2.acc: 96.8750, s2.loss_bbox: 0.0242, loss: 1.0172
2021-10-07 10:45:42,929 - mmdet - INFO - Epoch [4][600/1109]	lr: 9.912e-05, eta: 10:19:08, time: 0.720, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1433, loss_rpn_bbox: 0.0309, s0.loss_cls: 0.3354, s0.acc: 92.2881, s0.loss_bbox: 0.1488, s1.loss_cls: 0.1292, s1.acc: 94.1973, s1.loss_bbox: 0.0950, s2.loss_cls: 0.0433, s2.acc: 96.7295, s2.loss_bbox: 0.0268, loss: 0.9526
2021-10-07 10:46:19,074 - mmdet - INFO - Epoch [4][650/1109]	lr: 9.912e-05, eta: 10:18:33, time: 0.723, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1496, loss_rpn_bbox: 0.0334, s0.loss_cls: 0.3203, s0.acc: 92.9873, s0.loss_bbox: 0.1339, s1.loss_cls: 0.1216, s1.acc: 94.7627, s1.loss_bbox: 0.0843, s2.loss_cls: 0.0401, s2.acc: 97.0361, s2.loss_bbox: 0.0234, loss: 0.9065
2021-10-07 10:46:55,189 - mmdet - INFO - Epoch [4][700/1109]	lr: 9.912e-05, eta: 10:17:58, time: 0.722, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1415, loss_rpn_bbox: 0.0293, s0.loss_cls: 0.3265, s0.acc: 92.6201, s0.loss_bbox: 0.1433, s1.loss_cls: 0.1223, s1.acc: 94.6982, s1.loss_bbox: 0.0874, s2.loss_cls: 0.0393, s2.acc: 97.1377, s2.loss_bbox: 0.0223, loss: 0.9119
2021-10-07 10:47:31,348 - mmdet - INFO - Epoch [4][750/1109]	lr: 9.912e-05, eta: 10:17:23, time: 0.723, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1578, loss_rpn_bbox: 0.0335, s0.loss_cls: 0.3867, s0.acc: 91.4248, s0.loss_bbox: 0.1712, s1.loss_cls: 0.1396, s1.acc: 93.9766, s1.loss_bbox: 0.0974, s2.loss_cls: 0.0443, s2.acc: 96.6973, s2.loss_bbox: 0.0249, loss: 1.0553
2021-10-07 10:48:07,643 - mmdet - INFO - Epoch [4][800/1109]	lr: 9.912e-05, eta: 10:16:50, time: 0.726, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1298, loss_rpn_bbox: 0.0285, s0.loss_cls: 0.3496, s0.acc: 92.1094, s0.loss_bbox: 0.1552, s1.loss_cls: 0.1360, s1.acc: 93.9199, s1.loss_bbox: 0.1003, s2.loss_cls: 0.0433, s2.acc: 96.7158, s2.loss_bbox: 0.0265, loss: 0.9691
2021-10-07 10:48:44,514 - mmdet - INFO - Epoch [4][850/1109]	lr: 9.912e-05, eta: 10:16:24, time: 0.737, data_time: 0.006, memory: 4102, loss_rpn_cls: 0.1512, loss_rpn_bbox: 0.0306, s0.loss_cls: 0.3963, s0.acc: 90.9375, s0.loss_bbox: 0.1823, s1.loss_cls: 0.1476, s1.acc: 93.6006, s1.loss_bbox: 0.1077, s2.loss_cls: 0.0454, s2.acc: 96.7158, s2.loss_bbox: 0.0251, loss: 1.0862
