{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.3\nMMCV: 1.3.14\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.17.0+044cccd", "config": "model = dict(\n    type='CascadeRCNN',\n    backbone=dict(\n        type='DetectoRS_ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50'),\n        conv_cfg=dict(type='ConvAWS'),\n        sac=dict(type='SAC', use_deform=True),\n        stage_with_sac=(False, True, True, True),\n        output_img=True),\n    neck=dict(\n        type='RFP',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5,\n        rfp_steps=2,\n        aspp_out_channels=64,\n        aspp_dilations=(1, 3, 6, 1),\n        rfp_backbone=dict(\n            rfp_inplanes=256,\n            type='DetectoRS_ResNet',\n            depth=50,\n            num_stages=4,\n            out_indices=(0, 1, 2, 3),\n            frozen_stages=1,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            norm_eval=True,\n            conv_cfg=dict(type='ConvAWS'),\n            sac=dict(type='SAC', use_deform=True),\n            stage_with_sac=(False, True, True, True),\n            pretrained='torchvision://resnet50',\n            style='pytorch')),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='CascadeRoIHead',\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    match_low_quality=False,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'CocoDataset'\ndata_root = '/opt/ml/detection/dataset/'\nclasses = [\n    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\nimg_norm_cfg = dict(mean=[0, 0, 0], std=[255.0, 255.0, 255.0], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(300, 300), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[0, 0, 0],\n        std=[255.0, 255.0, 255.0],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(300, 300),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/train_kfold1.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(300, 300), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/val_kfold1.json',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(300, 300),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/test.json',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(300, 300),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP_50')\ncheckpoint_config = dict(interval=100)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(type='WandbLoggerHook', init_kwargs=dict(project='mmdetection'))\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\noptimizer = dict(\n    type='Adam',\n    lr=0.0001,\n    betas=(0.9, 0.999),\n    weight_decay=0.05,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            absolute_pos_embed=dict(decay_mult=0.0),\n            relative_position_bias_table=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='CosineAnnealing',\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=0.01,\n    min_lr=1e-06)\nrunner = dict(type='EpochBasedRunner', max_epochs=50)\nwork_dir = './work_dirs/Cascade_RCNN_DetectoRS'\ngpu_ids = range(0, 1)\n", "seed": 2021, "exp_name": "Cascade_RCNN_DetectoRS.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 1e-05, "memory": 4102, "data_time": 0.04909, "loss_rpn_cls": 0.66386, "loss_rpn_bbox": 0.04402, "s0.loss_cls": 0.82404, "s0.acc": 77.28516, "s0.loss_bbox": 0.15757, "s1.loss_cls": 0.46756, "s1.acc": 75.56152, "s1.loss_bbox": 0.04169, "s2.loss_cls": 0.12448, "s2.acc": 89.70508, "s2.loss_bbox": 0.00989, "loss": 2.33311, "time": 0.78773}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 4102, "data_time": 0.00543, "loss_rpn_cls": 0.42638, "loss_rpn_bbox": 0.03684, "s0.loss_cls": 0.30418, "s0.acc": 94.43555, "s0.loss_bbox": 0.13751, "s1.loss_cls": 0.09217, "s1.acc": 97.33008, "s1.loss_bbox": 0.04218, "s2.loss_cls": 0.02837, "s2.acc": 98.51465, "s2.loss_bbox": 0.00738, "loss": 1.075, "time": 0.72466}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 2e-05, "memory": 4102, "data_time": 0.00544, "loss_rpn_cls": 0.19052, "loss_rpn_bbox": 0.03302, "s0.loss_cls": 0.33112, "s0.acc": 93.62109, "s0.loss_bbox": 0.16327, "s1.loss_cls": 0.09519, "s1.acc": 96.94824, "s1.loss_bbox": 0.05279, "s2.loss_cls": 0.02912, "s2.acc": 98.45117, "s2.loss_bbox": 0.00936, "loss": 0.90438, "time": 0.72574}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 2e-05, "memory": 4102, "data_time": 0.00548, "loss_rpn_cls": 0.20386, "loss_rpn_bbox": 0.04032, "s0.loss_cls": 0.33684, "s0.acc": 92.92676, "s0.loss_bbox": 0.16107, "s1.loss_cls": 0.10844, "s1.acc": 96.21094, "s1.loss_bbox": 0.06272, "s2.loss_cls": 0.03524, "s2.acc": 98.03711, "s2.loss_bbox": 0.01179, "loss": 0.96027, "time": 0.73482}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 3e-05, "memory": 4102, "data_time": 0.00533, "loss_rpn_cls": 0.15914, "loss_rpn_bbox": 0.03222, "s0.loss_cls": 0.29919, "s0.acc": 93.62305, "s0.loss_bbox": 0.14671, "s1.loss_cls": 0.1053, "s1.acc": 96.19434, "s1.loss_bbox": 0.06526, "s2.loss_cls": 0.0337, "s2.acc": 98.0625, "s2.loss_bbox": 0.01386, "loss": 0.85537, "time": 0.72275}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 3e-05, "memory": 4102, "data_time": 0.00556, "loss_rpn_cls": 0.16146, "loss_rpn_bbox": 0.03293, "s0.loss_cls": 0.34092, "s0.acc": 92.61133, "s0.loss_bbox": 0.16653, "s1.loss_cls": 0.11252, "s1.acc": 95.68555, "s1.loss_bbox": 0.07218, "s2.loss_cls": 0.0367, "s2.acc": 97.71289, "s2.loss_bbox": 0.01643, "loss": 0.93968, "time": 0.72674}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 4e-05, "memory": 4102, "data_time": 0.00539, "loss_rpn_cls": 0.14917, "loss_rpn_bbox": 0.02931, "s0.loss_cls": 0.3057, "s0.acc": 93.20215, "s0.loss_bbox": 0.14779, "s1.loss_cls": 0.11059, "s1.acc": 95.74121, "s1.loss_bbox": 0.07008, "s2.loss_cls": 0.03641, "s2.acc": 97.71973, "s2.loss_bbox": 0.01645, "loss": 0.86549, "time": 0.73152}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 4e-05, "memory": 4102, "data_time": 0.00536, "loss_rpn_cls": 0.14807, "loss_rpn_bbox": 0.03278, "s0.loss_cls": 0.31452, "s0.acc": 92.9209, "s0.loss_bbox": 0.15514, "s1.loss_cls": 0.11375, "s1.acc": 95.39746, "s1.loss_bbox": 0.0768, "s2.loss_cls": 0.03827, "s2.acc": 97.47656, "s2.loss_bbox": 0.01905, "loss": 0.89837, "time": 0.71952}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 5e-05, "memory": 4102, "data_time": 0.00548, "loss_rpn_cls": 0.1407, "loss_rpn_bbox": 0.03009, "s0.loss_cls": 0.32609, "s0.acc": 92.62695, "s0.loss_bbox": 0.16103, "s1.loss_cls": 0.12533, "s1.acc": 94.84082, "s1.loss_bbox": 0.08736, "s2.loss_cls": 0.04055, "s2.acc": 97.16504, "s2.loss_bbox": 0.02261, "loss": 0.93376, "time": 0.7178}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 5e-05, "memory": 4102, "data_time": 0.00546, "loss_rpn_cls": 0.12491, "loss_rpn_bbox": 0.02721, "s0.loss_cls": 0.29118, "s0.acc": 93.27637, "s0.loss_bbox": 0.13862, "s1.loss_cls": 0.11493, "s1.acc": 94.88965, "s1.loss_bbox": 0.08039, "s2.loss_cls": 0.04312, "s2.acc": 96.69727, "s2.loss_bbox": 0.02615, "loss": 0.8465, "time": 0.72717}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 6e-05, "memory": 4102, "data_time": 0.00536, "loss_rpn_cls": 0.11989, "loss_rpn_bbox": 0.02579, "s0.loss_cls": 0.30832, "s0.acc": 92.93555, "s0.loss_bbox": 0.1415, "s1.loss_cls": 0.12799, "s1.acc": 94.27051, "s1.loss_bbox": 0.09445, "s2.loss_cls": 0.04611, "s2.acc": 96.37695, "s2.loss_bbox": 0.03105, "loss": 0.89509, "time": 0.71831}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 6e-05, "memory": 4102, "data_time": 0.00545, "loss_rpn_cls": 0.12051, "loss_rpn_bbox": 0.02737, "s0.loss_cls": 0.2925, "s0.acc": 92.67383, "s0.loss_bbox": 0.14573, "s1.loss_cls": 0.12637, "s1.acc": 93.87598, "s1.loss_bbox": 0.10019, "s2.loss_cls": 0.04773, "s2.acc": 95.65625, "s2.loss_bbox": 0.0366, "loss": 0.897, "time": 0.72653}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 7e-05, "memory": 4102, "data_time": 0.00541, "loss_rpn_cls": 0.15559, "loss_rpn_bbox": 0.03581, "s0.loss_cls": 0.37385, "s0.acc": 91.10254, "s0.loss_bbox": 0.17716, "s1.loss_cls": 0.15409, "s1.acc": 92.9707, "s1.loss_bbox": 0.11101, "s2.loss_cls": 0.05655, "s2.acc": 95.57617, "s2.loss_bbox": 0.03505, "loss": 1.0991, "time": 0.72048}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 7e-05, "memory": 4102, "data_time": 0.00546, "loss_rpn_cls": 0.12738, "loss_rpn_bbox": 0.02933, "s0.loss_cls": 0.34448, "s0.acc": 91.82031, "s0.loss_bbox": 0.15521, "s1.loss_cls": 0.14622, "s1.acc": 93.06348, "s1.loss_bbox": 0.10384, "s2.loss_cls": 0.05528, "s2.acc": 95.40332, "s2.loss_bbox": 0.03777, "loss": 0.99952, "time": 0.72431}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 8e-05, "memory": 4102, "data_time": 0.0055, "loss_rpn_cls": 0.13134, "loss_rpn_bbox": 0.03182, "s0.loss_cls": 0.37082, "s0.acc": 90.90332, "s0.loss_bbox": 0.17843, "s1.loss_cls": 0.15712, "s1.acc": 92.18262, "s1.loss_bbox": 0.12087, "s2.loss_cls": 0.06045, "s2.acc": 94.69629, "s2.loss_bbox": 0.04281, "loss": 1.09366, "time": 0.72593}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 8e-05, "memory": 4102, "data_time": 0.00548, "loss_rpn_cls": 0.11766, "loss_rpn_bbox": 0.02808, "s0.loss_cls": 0.34083, "s0.acc": 91.83594, "s0.loss_bbox": 0.15382, "s1.loss_cls": 0.14539, "s1.acc": 92.75781, "s1.loss_bbox": 0.10429, "s2.loss_cls": 0.05914, "s2.acc": 94.80664, "s2.loss_bbox": 0.03975, "loss": 0.98896, "time": 0.71951}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 9e-05, "memory": 4102, "data_time": 0.00549, "loss_rpn_cls": 0.1405, "loss_rpn_bbox": 0.03233, "s0.loss_cls": 0.38833, "s0.acc": 91.37988, "s0.loss_bbox": 0.1716, "s1.loss_cls": 0.15178, "s1.acc": 93.34277, "s1.loss_bbox": 0.10587, "s2.loss_cls": 0.05336, "s2.acc": 95.91699, "s2.loss_bbox": 0.03333, "loss": 1.0771, "time": 0.71751}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 9e-05, "memory": 4102, "data_time": 0.00545, "loss_rpn_cls": 0.14058, "loss_rpn_bbox": 0.02687, "s0.loss_cls": 0.34108, "s0.acc": 92.54688, "s0.loss_bbox": 0.14741, "s1.loss_cls": 0.13562, "s1.acc": 94.16797, "s1.loss_bbox": 0.08947, "s2.loss_cls": 0.05019, "s2.acc": 96.31543, "s2.loss_bbox": 0.02881, "loss": 0.96004, "time": 0.71851}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 9e-05, "memory": 4102, "data_time": 0.00601, "loss_rpn_cls": 0.16334, "loss_rpn_bbox": 0.03833, "s0.loss_cls": 0.41855, "s0.acc": 91.02832, "s0.loss_bbox": 0.17734, "s1.loss_cls": 0.16213, "s1.acc": 93.31348, "s1.loss_bbox": 0.10654, "s2.loss_cls": 0.05943, "s2.acc": 95.82324, "s2.loss_bbox": 0.03342, "loss": 1.15908, "time": 0.7331}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.0001, "memory": 4102, "data_time": 0.00607, "loss_rpn_cls": 0.15731, "loss_rpn_bbox": 0.03547, "s0.loss_cls": 0.38159, "s0.acc": 91.98145, "s0.loss_bbox": 0.16333, "s1.loss_cls": 0.13733, "s1.acc": 94.52148, "s1.loss_bbox": 0.08651, "s2.loss_cls": 0.0464, "s2.acc": 96.85254, "s2.loss_bbox": 0.02347, "loss": 1.03141, "time": 0.72136}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.0001, "memory": 4102, "data_time": 0.00533, "loss_rpn_cls": 0.12299, "loss_rpn_bbox": 0.02663, "s0.loss_cls": 0.34476, "s0.acc": 92.30469, "s0.loss_bbox": 0.14221, "s1.loss_cls": 0.13967, "s1.acc": 93.78711, "s1.loss_bbox": 0.09338, "s2.loss_cls": 0.05182, "s2.acc": 95.98828, "s2.loss_bbox": 0.03232, "loss": 0.95377, "time": 0.72038}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.0001, "memory": 4102, "data_time": 0.00536, "loss_rpn_cls": 0.15761, "loss_rpn_bbox": 0.0358, "s0.loss_cls": 0.39403, "s0.acc": 91.04785, "s0.loss_bbox": 0.17684, "s1.loss_cls": 0.15193, "s1.acc": 93.26465, "s1.loss_bbox": 0.10604, "s2.loss_cls": 0.05352, "s2.acc": 95.91016, "s2.loss_bbox": 0.03267, "loss": 1.10844, "time": 0.7314}
{"mode": "val", "epoch": 1, "iter": 448, "lr": 0.0001, "bbox_mAP": 0.005, "bbox_mAP_50": 0.014, "bbox_mAP_75": 0.003, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.006, "bbox_mAP_copypaste": "0.005 0.014 0.003 0.000 0.000 0.006"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.0001, "memory": 4102, "data_time": 0.05017, "loss_rpn_cls": 0.14283, "loss_rpn_bbox": 0.02977, "s0.loss_cls": 0.36844, "s0.acc": 92.07715, "s0.loss_bbox": 0.15645, "s1.loss_cls": 0.1411, "s1.acc": 94.13477, "s1.loss_bbox": 0.09643, "s2.loss_cls": 0.04885, "s2.acc": 96.56543, "s2.loss_bbox": 0.02861, "loss": 1.01248, "time": 0.78706}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.0001, "memory": 4102, "data_time": 0.00629, "loss_rpn_cls": 0.13834, "loss_rpn_bbox": 0.03054, "s0.loss_cls": 0.34649, "s0.acc": 92.14844, "s0.loss_bbox": 0.14878, "s1.loss_cls": 0.13641, "s1.acc": 93.81055, "s1.loss_bbox": 0.09533, "s2.loss_cls": 0.04903, "s2.acc": 96.16211, "s2.loss_bbox": 0.03063, "loss": 0.97556, "time": 0.72573}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.0001, "memory": 4102, "data_time": 0.00596, "loss_rpn_cls": 0.15317, "loss_rpn_bbox": 0.03483, "s0.loss_cls": 0.39278, "s0.acc": 90.98535, "s0.loss_bbox": 0.17287, "s1.loss_cls": 0.15606, "s1.acc": 93.05566, "s1.loss_bbox": 0.11044, "s2.loss_cls": 0.05523, "s2.acc": 95.76562, "s2.loss_bbox": 0.03406, "loss": 1.10944, "time": 0.71823}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.0001, "memory": 4102, "data_time": 0.00636, "loss_rpn_cls": 0.15639, "loss_rpn_bbox": 0.03514, "s0.loss_cls": 0.33088, "s0.acc": 93.00977, "s0.loss_bbox": 0.13715, "s1.loss_cls": 0.12447, "s1.acc": 94.86035, "s1.loss_bbox": 0.08197, "s2.loss_cls": 0.04263, "s2.acc": 97.01367, "s2.loss_bbox": 0.02345, "loss": 0.93209, "time": 0.72434}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.0001, "memory": 4102, "data_time": 0.00626, "loss_rpn_cls": 0.13749, "loss_rpn_bbox": 0.03225, "s0.loss_cls": 0.34755, "s0.acc": 92.15723, "s0.loss_bbox": 0.15913, "s1.loss_cls": 0.1313, "s1.acc": 94.42578, "s1.loss_bbox": 0.0928, "s2.loss_cls": 0.04343, "s2.acc": 96.84473, "s2.loss_bbox": 0.0249, "loss": 0.96885, "time": 0.72443}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.0001, "memory": 4102, "data_time": 0.00628, "loss_rpn_cls": 0.13089, "loss_rpn_bbox": 0.02901, "s0.loss_cls": 0.35987, "s0.acc": 91.71387, "s0.loss_bbox": 0.15585, "s1.loss_cls": 0.1405, "s1.acc": 93.5166, "s1.loss_bbox": 0.1006, "s2.loss_cls": 0.04995, "s2.acc": 95.89258, "s2.loss_bbox": 0.03418, "loss": 1.00085, "time": 0.72326}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.0001, "memory": 4102, "data_time": 0.00635, "loss_rpn_cls": 0.15921, "loss_rpn_bbox": 0.0319, "s0.loss_cls": 0.36694, "s0.acc": 91.50488, "s0.loss_bbox": 0.15976, "s1.loss_cls": 0.15007, "s1.acc": 93.15137, "s1.loss_bbox": 0.10554, "s2.loss_cls": 0.05522, "s2.acc": 95.70703, "s2.loss_bbox": 0.03443, "loss": 1.06308, "time": 0.72305}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.0001, "memory": 4102, "data_time": 0.00629, "loss_rpn_cls": 0.18293, "loss_rpn_bbox": 0.04074, "s0.loss_cls": 0.37536, "s0.acc": 92.24414, "s0.loss_bbox": 0.15974, "s1.loss_cls": 0.13189, "s1.acc": 94.95508, "s1.loss_bbox": 0.08058, "s2.loss_cls": 0.04288, "s2.acc": 97.22266, "s2.loss_bbox": 0.01945, "loss": 1.03357, "time": 0.72708}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.0001, "memory": 4102, "data_time": 0.00613, "loss_rpn_cls": 0.15886, "loss_rpn_bbox": 0.03293, "s0.loss_cls": 0.33852, "s0.acc": 92.63672, "s0.loss_bbox": 0.14097, "s1.loss_cls": 0.13126, "s1.acc": 94.35742, "s1.loss_bbox": 0.08816, "s2.loss_cls": 0.04443, "s2.acc": 96.68555, "s2.loss_bbox": 0.02566, "loss": 0.96079, "time": 0.72111}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.0001, "memory": 4102, "data_time": 0.00624, "loss_rpn_cls": 0.13366, "loss_rpn_bbox": 0.02976, "s0.loss_cls": 0.3096, "s0.acc": 92.96777, "s0.loss_bbox": 0.1337, "s1.loss_cls": 0.12029, "s1.acc": 94.66895, "s1.loss_bbox": 0.08122, "s2.loss_cls": 0.04326, "s2.acc": 96.72168, "s2.loss_bbox": 0.02562, "loss": 0.87712, "time": 0.72694}
{"mode": "train", "epoch": 2, "iter": 550, "lr": 0.0001, "memory": 4102, "data_time": 0.00632, "loss_rpn_cls": 0.15759, "loss_rpn_bbox": 0.03163, "s0.loss_cls": 0.36424, "s0.acc": 92.12598, "s0.loss_bbox": 0.16065, "s1.loss_cls": 0.1304, "s1.acc": 94.62793, "s1.loss_bbox": 0.08732, "s2.loss_cls": 0.04178, "s2.acc": 97.03809, "s2.loss_bbox": 0.02244, "loss": 0.99604, "time": 0.71827}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.0001, "memory": 4102, "data_time": 0.00626, "loss_rpn_cls": 0.13124, "loss_rpn_bbox": 0.02693, "s0.loss_cls": 0.34243, "s0.acc": 92.76562, "s0.loss_bbox": 0.14834, "s1.loss_cls": 0.12248, "s1.acc": 95.11328, "s1.loss_bbox": 0.08029, "s2.loss_cls": 0.04031, "s2.acc": 97.37402, "s2.loss_bbox": 0.02012, "loss": 0.91214, "time": 0.7216}
{"mode": "train", "epoch": 2, "iter": 650, "lr": 0.0001, "memory": 4102, "data_time": 0.00615, "loss_rpn_cls": 0.13622, "loss_rpn_bbox": 0.0298, "s0.loss_cls": 0.37571, "s0.acc": 91.86426, "s0.loss_bbox": 0.16061, "s1.loss_cls": 0.1401, "s1.acc": 94.17969, "s1.loss_bbox": 0.09467, "s2.loss_cls": 0.04603, "s2.acc": 96.71875, "s2.loss_bbox": 0.02664, "loss": 1.00978, "time": 0.72144}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.0001, "memory": 4102, "data_time": 0.00624, "loss_rpn_cls": 0.14083, "loss_rpn_bbox": 0.0302, "s0.loss_cls": 0.34537, "s0.acc": 92.05957, "s0.loss_bbox": 0.1561, "s1.loss_cls": 0.135, "s1.acc": 93.99316, "s1.loss_bbox": 0.0951, "s2.loss_cls": 0.04603, "s2.acc": 96.50781, "s2.loss_bbox": 0.02689, "loss": 0.97554, "time": 0.72062}
{"mode": "train", "epoch": 2, "iter": 750, "lr": 0.0001, "memory": 4102, "data_time": 0.00605, "loss_rpn_cls": 0.15083, "loss_rpn_bbox": 0.03128, "s0.loss_cls": 0.33629, "s0.acc": 92.65625, "s0.loss_bbox": 0.14574, "s1.loss_cls": 0.12523, "s1.acc": 94.8457, "s1.loss_bbox": 0.08334, "s2.loss_cls": 0.04085, "s2.acc": 97.12109, "s2.loss_bbox": 0.02198, "loss": 0.93554, "time": 0.72081}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.0001, "memory": 4102, "data_time": 0.00609, "loss_rpn_cls": 0.13525, "loss_rpn_bbox": 0.03032, "s0.loss_cls": 0.34141, "s0.acc": 92.58887, "s0.loss_bbox": 0.14868, "s1.loss_cls": 0.12444, "s1.acc": 94.85059, "s1.loss_bbox": 0.08541, "s2.loss_cls": 0.03935, "s2.acc": 97.2666, "s2.loss_bbox": 0.02113, "loss": 0.92599, "time": 0.72284}
{"mode": "train", "epoch": 2, "iter": 850, "lr": 0.0001, "memory": 4102, "data_time": 0.00633, "loss_rpn_cls": 0.16197, "loss_rpn_bbox": 0.03148, "s0.loss_cls": 0.40033, "s0.acc": 91.47559, "s0.loss_bbox": 0.17009, "s1.loss_cls": 0.14484, "s1.acc": 94.14258, "s1.loss_bbox": 0.09414, "s2.loss_cls": 0.0468, "s2.acc": 96.78223, "s2.loss_bbox": 0.02423, "loss": 1.07388, "time": 0.73205}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.0001, "memory": 4102, "data_time": 0.00603, "loss_rpn_cls": 0.14906, "loss_rpn_bbox": 0.02981, "s0.loss_cls": 0.36016, "s0.acc": 92.25, "s0.loss_bbox": 0.15843, "s1.loss_cls": 0.12932, "s1.acc": 94.73242, "s1.loss_bbox": 0.08816, "s2.loss_cls": 0.04007, "s2.acc": 97.20801, "s2.loss_bbox": 0.02143, "loss": 0.97645, "time": 0.72525}
{"mode": "train", "epoch": 2, "iter": 950, "lr": 0.0001, "memory": 4102, "data_time": 0.0062, "loss_rpn_cls": 0.13439, "loss_rpn_bbox": 0.03034, "s0.loss_cls": 0.31396, "s0.acc": 92.94141, "s0.loss_bbox": 0.13756, "s1.loss_cls": 0.12148, "s1.acc": 94.63379, "s1.loss_bbox": 0.08702, "s2.loss_cls": 0.03975, "s2.acc": 97.06738, "s2.loss_bbox": 0.02299, "loss": 0.8875, "time": 0.72141}
{"mode": "train", "epoch": 2, "iter": 1000, "lr": 0.0001, "memory": 4102, "data_time": 0.00624, "loss_rpn_cls": 0.14342, "loss_rpn_bbox": 0.02954, "s0.loss_cls": 0.35511, "s0.acc": 92.15039, "s0.loss_bbox": 0.15705, "s1.loss_cls": 0.131, "s1.acc": 94.52246, "s1.loss_bbox": 0.08983, "s2.loss_cls": 0.04189, "s2.acc": 97.03223, "s2.loss_bbox": 0.0228, "loss": 0.97064, "time": 0.7248}
{"mode": "train", "epoch": 2, "iter": 1050, "lr": 0.0001, "memory": 4102, "data_time": 0.00607, "loss_rpn_cls": 0.18485, "loss_rpn_bbox": 0.04354, "s0.loss_cls": 0.38141, "s0.acc": 91.24316, "s0.loss_bbox": 0.18033, "s1.loss_cls": 0.14007, "s1.acc": 94.0127, "s1.loss_bbox": 0.09784, "s2.loss_cls": 0.04534, "s2.acc": 96.77246, "s2.loss_bbox": 0.02323, "loss": 1.0966, "time": 0.71438}
{"mode": "train", "epoch": 2, "iter": 1100, "lr": 0.0001, "memory": 4102, "data_time": 0.006, "loss_rpn_cls": 0.16492, "loss_rpn_bbox": 0.03514, "s0.loss_cls": 0.38168, "s0.acc": 91.61816, "s0.loss_bbox": 0.17337, "s1.loss_cls": 0.13685, "s1.acc": 94.22656, "s1.loss_bbox": 0.09577, "s2.loss_cls": 0.04341, "s2.acc": 96.87891, "s2.loss_bbox": 0.02346, "loss": 1.0546, "time": 0.72046}
{"mode": "val", "epoch": 2, "iter": 448, "lr": 0.0001, "bbox_mAP": 0.008, "bbox_mAP_50": 0.022, "bbox_mAP_75": 0.004, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.01, "bbox_mAP_copypaste": "0.008 0.022 0.004 0.000 0.000 0.010"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.0001, "memory": 4102, "data_time": 0.05035, "loss_rpn_cls": 0.13004, "loss_rpn_bbox": 0.02573, "s0.loss_cls": 0.32912, "s0.acc": 92.69727, "s0.loss_bbox": 0.14591, "s1.loss_cls": 0.12238, "s1.acc": 94.75391, "s1.loss_bbox": 0.0884, "s2.loss_cls": 0.03798, "s2.acc": 97.23926, "s2.loss_bbox": 0.02228, "loss": 0.90183, "time": 0.78242}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.0001, "memory": 4102, "data_time": 0.00609, "loss_rpn_cls": 0.14736, "loss_rpn_bbox": 0.03119, "s0.loss_cls": 0.33785, "s0.acc": 92.71094, "s0.loss_bbox": 0.14465, "s1.loss_cls": 0.12586, "s1.acc": 94.80566, "s1.loss_bbox": 0.08436, "s2.loss_cls": 0.04114, "s2.acc": 97.14746, "s2.loss_bbox": 0.02187, "loss": 0.93428, "time": 0.71723}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.0001, "memory": 4102, "data_time": 0.00608, "loss_rpn_cls": 0.1434, "loss_rpn_bbox": 0.0286, "s0.loss_cls": 0.34082, "s0.acc": 92.31934, "s0.loss_bbox": 0.15245, "s1.loss_cls": 0.12956, "s1.acc": 94.43359, "s1.loss_bbox": 0.09329, "s2.loss_cls": 0.03981, "s2.acc": 97.19238, "s2.loss_bbox": 0.02216, "loss": 0.95009, "time": 0.72277}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.0001, "memory": 4102, "data_time": 0.00622, "loss_rpn_cls": 0.15633, "loss_rpn_bbox": 0.03344, "s0.loss_cls": 0.41148, "s0.acc": 90.87109, "s0.loss_bbox": 0.18194, "s1.loss_cls": 0.15257, "s1.acc": 93.50879, "s1.loss_bbox": 0.10702, "s2.loss_cls": 0.0479, "s2.acc": 96.50391, "s2.loss_bbox": 0.02715, "loss": 1.11782, "time": 0.71935}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.0001, "memory": 4102, "data_time": 0.00614, "loss_rpn_cls": 0.14047, "loss_rpn_bbox": 0.02848, "s0.loss_cls": 0.31088, "s0.acc": 93.37793, "s0.loss_bbox": 0.12946, "s1.loss_cls": 0.11639, "s1.acc": 95.12891, "s1.loss_bbox": 0.07801, "s2.loss_cls": 0.03786, "s2.acc": 97.30957, "s2.loss_bbox": 0.02036, "loss": 0.8619, "time": 0.71726}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.0001, "memory": 4102, "data_time": 0.00608, "loss_rpn_cls": 0.13698, "loss_rpn_bbox": 0.02811, "s0.loss_cls": 0.30582, "s0.acc": 93.05566, "s0.loss_bbox": 0.13605, "s1.loss_cls": 0.11756, "s1.acc": 94.81055, "s1.loss_bbox": 0.08559, "s2.loss_cls": 0.03936, "s2.acc": 97.05469, "s2.loss_bbox": 0.0239, "loss": 0.87336, "time": 0.71795}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 0.0001, "memory": 4102, "data_time": 0.0061, "loss_rpn_cls": 0.14579, "loss_rpn_bbox": 0.03134, "s0.loss_cls": 0.35384, "s0.acc": 92.00781, "s0.loss_bbox": 0.15833, "s1.loss_cls": 0.1318, "s1.acc": 94.20117, "s1.loss_bbox": 0.09564, "s2.loss_cls": 0.04161, "s2.acc": 96.89062, "s2.loss_bbox": 0.02487, "loss": 0.98321, "time": 0.72372}
{"mode": "train", "epoch": 3, "iter": 400, "lr": 0.0001, "memory": 4102, "data_time": 0.00616, "loss_rpn_cls": 0.14295, "loss_rpn_bbox": 0.03051, "s0.loss_cls": 0.33682, "s0.acc": 92.34473, "s0.loss_bbox": 0.15501, "s1.loss_cls": 0.12568, "s1.acc": 94.57617, "s1.loss_bbox": 0.0906, "s2.loss_cls": 0.03895, "s2.acc": 97.21973, "s2.loss_bbox": 0.02182, "loss": 0.94234, "time": 0.72482}
{"mode": "train", "epoch": 3, "iter": 450, "lr": 0.0001, "memory": 4102, "data_time": 0.00615, "loss_rpn_cls": 0.18434, "loss_rpn_bbox": 0.04176, "s0.loss_cls": 0.40628, "s0.acc": 90.95703, "s0.loss_bbox": 0.18424, "s1.loss_cls": 0.14744, "s1.acc": 93.88281, "s1.loss_bbox": 0.10204, "s2.loss_cls": 0.04521, "s2.acc": 96.83203, "s2.loss_bbox": 0.02266, "loss": 1.13396, "time": 0.73041}
{"mode": "train", "epoch": 3, "iter": 500, "lr": 0.0001, "memory": 4102, "data_time": 0.00614, "loss_rpn_cls": 0.15865, "loss_rpn_bbox": 0.03649, "s0.loss_cls": 0.40004, "s0.acc": 90.73145, "s0.loss_bbox": 0.18709, "s1.loss_cls": 0.14677, "s1.acc": 93.57031, "s1.loss_bbox": 0.10801, "s2.loss_cls": 0.04613, "s2.acc": 96.64355, "s2.loss_bbox": 0.0255, "loss": 1.10867, "time": 0.72083}
{"mode": "train", "epoch": 3, "iter": 550, "lr": 0.0001, "memory": 4102, "data_time": 0.0062, "loss_rpn_cls": 0.1753, "loss_rpn_bbox": 0.0373, "s0.loss_cls": 0.37773, "s0.acc": 91.71875, "s0.loss_bbox": 0.16417, "s1.loss_cls": 0.13957, "s1.acc": 94.17285, "s1.loss_bbox": 0.09437, "s2.loss_cls": 0.04513, "s2.acc": 96.84277, "s2.loss_bbox": 0.02332, "loss": 1.05689, "time": 0.71587}
{"mode": "train", "epoch": 3, "iter": 600, "lr": 0.0001, "memory": 4102, "data_time": 0.00621, "loss_rpn_cls": 0.13596, "loss_rpn_bbox": 0.02482, "s0.loss_cls": 0.32851, "s0.acc": 93.06543, "s0.loss_bbox": 0.13979, "s1.loss_cls": 0.12228, "s1.acc": 95.05957, "s1.loss_bbox": 0.08562, "s2.loss_cls": 0.03781, "s2.acc": 97.53027, "s2.loss_bbox": 0.01936, "loss": 0.89416, "time": 0.72089}
{"mode": "train", "epoch": 3, "iter": 650, "lr": 0.0001, "memory": 4102, "data_time": 0.00626, "loss_rpn_cls": 0.1474, "loss_rpn_bbox": 0.03394, "s0.loss_cls": 0.33018, "s0.acc": 92.67285, "s0.loss_bbox": 0.14406, "s1.loss_cls": 0.12407, "s1.acc": 94.68164, "s1.loss_bbox": 0.08802, "s2.loss_cls": 0.03889, "s2.acc": 97.20215, "s2.loss_bbox": 0.0214, "loss": 0.92796, "time": 0.72756}
{"mode": "train", "epoch": 3, "iter": 700, "lr": 0.0001, "memory": 4102, "data_time": 0.00624, "loss_rpn_cls": 0.14916, "loss_rpn_bbox": 0.03589, "s0.loss_cls": 0.35503, "s0.acc": 92.02051, "s0.loss_bbox": 0.15432, "s1.loss_cls": 0.13486, "s1.acc": 94.08984, "s1.loss_bbox": 0.09489, "s2.loss_cls": 0.04313, "s2.acc": 96.77051, "s2.loss_bbox": 0.02459, "loss": 0.99187, "time": 0.71913}
{"mode": "train", "epoch": 3, "iter": 750, "lr": 0.0001, "memory": 4102, "data_time": 0.0064, "loss_rpn_cls": 0.15953, "loss_rpn_bbox": 0.03333, "s0.loss_cls": 0.38421, "s0.acc": 91.01953, "s0.loss_bbox": 0.17881, "s1.loss_cls": 0.14181, "s1.acc": 93.69727, "s1.loss_bbox": 0.10506, "s2.loss_cls": 0.04494, "s2.acc": 96.69043, "s2.loss_bbox": 0.02569, "loss": 1.07337, "time": 0.72482}
{"mode": "train", "epoch": 3, "iter": 800, "lr": 0.0001, "memory": 4102, "data_time": 0.00607, "loss_rpn_cls": 0.14159, "loss_rpn_bbox": 0.03141, "s0.loss_cls": 0.35744, "s0.acc": 92.00586, "s0.loss_bbox": 0.15971, "s1.loss_cls": 0.13631, "s1.acc": 94.20117, "s1.loss_bbox": 0.09839, "s2.loss_cls": 0.04185, "s2.acc": 97.00195, "s2.loss_bbox": 0.02358, "loss": 0.99028, "time": 0.73034}
{"mode": "train", "epoch": 3, "iter": 850, "lr": 0.0001, "memory": 4102, "data_time": 0.00618, "loss_rpn_cls": 0.15095, "loss_rpn_bbox": 0.03517, "s0.loss_cls": 0.39365, "s0.acc": 91.09277, "s0.loss_bbox": 0.17949, "s1.loss_cls": 0.14372, "s1.acc": 93.92578, "s1.loss_bbox": 0.10151, "s2.loss_cls": 0.04467, "s2.acc": 96.85449, "s2.loss_bbox": 0.02393, "loss": 1.0731, "time": 0.72128}
{"mode": "train", "epoch": 3, "iter": 900, "lr": 0.0001, "memory": 4102, "data_time": 0.00627, "loss_rpn_cls": 0.12885, "loss_rpn_bbox": 0.02619, "s0.loss_cls": 0.3369, "s0.acc": 92.38477, "s0.loss_bbox": 0.14744, "s1.loss_cls": 0.12736, "s1.acc": 94.39258, "s1.loss_bbox": 0.09051, "s2.loss_cls": 0.0414, "s2.acc": 96.84473, "s2.loss_bbox": 0.02562, "loss": 0.92427, "time": 0.72088}
{"mode": "train", "epoch": 3, "iter": 950, "lr": 0.0001, "memory": 4102, "data_time": 0.00632, "loss_rpn_cls": 0.15676, "loss_rpn_bbox": 0.03334, "s0.loss_cls": 0.37852, "s0.acc": 91.54883, "s0.loss_bbox": 0.17275, "s1.loss_cls": 0.13919, "s1.acc": 94.14258, "s1.loss_bbox": 0.09982, "s2.loss_cls": 0.04257, "s2.acc": 97.00781, "s2.loss_bbox": 0.02306, "loss": 1.04602, "time": 0.72121}
{"mode": "train", "epoch": 3, "iter": 1000, "lr": 0.0001, "memory": 4102, "data_time": 0.00636, "loss_rpn_cls": 0.14811, "loss_rpn_bbox": 0.03003, "s0.loss_cls": 0.33536, "s0.acc": 92.47949, "s0.loss_bbox": 0.14877, "s1.loss_cls": 0.12463, "s1.acc": 94.62207, "s1.loss_bbox": 0.08903, "s2.loss_cls": 0.03893, "s2.acc": 97.20508, "s2.loss_bbox": 0.02075, "loss": 0.93562, "time": 0.72021}
{"mode": "train", "epoch": 3, "iter": 1050, "lr": 0.0001, "memory": 4102, "data_time": 0.00631, "loss_rpn_cls": 0.12998, "loss_rpn_bbox": 0.02761, "s0.loss_cls": 0.3059, "s0.acc": 93.05762, "s0.loss_bbox": 0.13643, "s1.loss_cls": 0.11577, "s1.acc": 94.88965, "s1.loss_bbox": 0.08497, "s2.loss_cls": 0.03724, "s2.acc": 97.2334, "s2.loss_bbox": 0.02259, "loss": 0.8605, "time": 0.71888}
{"mode": "train", "epoch": 3, "iter": 1100, "lr": 0.0001, "memory": 4102, "data_time": 0.0063, "loss_rpn_cls": 0.15453, "loss_rpn_bbox": 0.03593, "s0.loss_cls": 0.33862, "s0.acc": 92.14648, "s0.loss_bbox": 0.1503, "s1.loss_cls": 0.12876, "s1.acc": 94.09668, "s1.loss_bbox": 0.09516, "s2.loss_cls": 0.0426, "s2.acc": 96.66992, "s2.loss_bbox": 0.02574, "loss": 0.97165, "time": 0.72587}
{"mode": "val", "epoch": 3, "iter": 448, "lr": 0.0001, "bbox_mAP": 0.007, "bbox_mAP_50": 0.019, "bbox_mAP_75": 0.004, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.009, "bbox_mAP_copypaste": "0.007 0.019 0.004 0.000 0.000 0.009"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.0001, "memory": 4102, "data_time": 0.05042, "loss_rpn_cls": 0.14548, "loss_rpn_bbox": 0.02912, "s0.loss_cls": 0.35356, "s0.acc": 91.9502, "s0.loss_bbox": 0.158, "s1.loss_cls": 0.13626, "s1.acc": 93.94922, "s1.loss_bbox": 0.10032, "s2.loss_cls": 0.04363, "s2.acc": 96.7041, "s2.loss_bbox": 0.02676, "loss": 0.99313, "time": 0.76793}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.0001, "memory": 4102, "data_time": 0.00597, "loss_rpn_cls": 0.13727, "loss_rpn_bbox": 0.02675, "s0.loss_cls": 0.32774, "s0.acc": 92.61133, "s0.loss_bbox": 0.14588, "s1.loss_cls": 0.12044, "s1.acc": 94.79199, "s1.loss_bbox": 0.08788, "s2.loss_cls": 0.0381, "s2.acc": 97.17969, "s2.loss_bbox": 0.02234, "loss": 0.9064, "time": 0.72117}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.0001, "memory": 4102, "data_time": 0.00606, "loss_rpn_cls": 0.14103, "loss_rpn_bbox": 0.02881, "s0.loss_cls": 0.35102, "s0.acc": 92.01855, "s0.loss_bbox": 0.15749, "s1.loss_cls": 0.13168, "s1.acc": 94.22363, "s1.loss_bbox": 0.09582, "s2.loss_cls": 0.04119, "s2.acc": 96.95996, "s2.loss_bbox": 0.02357, "loss": 0.97063, "time": 0.7229}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.0001, "memory": 4102, "data_time": 0.00611, "loss_rpn_cls": 0.14224, "loss_rpn_bbox": 0.03136, "s0.loss_cls": 0.35133, "s0.acc": 91.94824, "s0.loss_bbox": 0.15549, "s1.loss_cls": 0.13362, "s1.acc": 93.93555, "s1.loss_bbox": 0.0988, "s2.loss_cls": 0.04326, "s2.acc": 96.67871, "s2.loss_bbox": 0.02678, "loss": 0.98287, "time": 0.72549}
{"mode": "train", "epoch": 4, "iter": 250, "lr": 0.0001, "memory": 4102, "data_time": 0.00618, "loss_rpn_cls": 0.16107, "loss_rpn_bbox": 0.03465, "s0.loss_cls": 0.38315, "s0.acc": 91.20996, "s0.loss_bbox": 0.17697, "s1.loss_cls": 0.14016, "s1.acc": 93.88086, "s1.loss_bbox": 0.10182, "s2.loss_cls": 0.04419, "s2.acc": 96.69824, "s2.loss_bbox": 0.02524, "loss": 1.06724, "time": 0.72111}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 0.0001, "memory": 4102, "data_time": 0.00616, "loss_rpn_cls": 0.1338, "loss_rpn_bbox": 0.03078, "s0.loss_cls": 0.31709, "s0.acc": 92.76465, "s0.loss_bbox": 0.13832, "s1.loss_cls": 0.12175, "s1.acc": 94.50195, "s1.loss_bbox": 0.09075, "s2.loss_cls": 0.03911, "s2.acc": 97.0166, "s2.loss_bbox": 0.02424, "loss": 0.89585, "time": 0.71799}
{"mode": "train", "epoch": 4, "iter": 350, "lr": 0.0001, "memory": 4102, "data_time": 0.00616, "loss_rpn_cls": 0.16434, "loss_rpn_bbox": 0.03663, "s0.loss_cls": 0.39538, "s0.acc": 90.9375, "s0.loss_bbox": 0.18014, "s1.loss_cls": 0.14743, "s1.acc": 93.55566, "s1.loss_bbox": 0.10419, "s2.loss_cls": 0.04766, "s2.acc": 96.51367, "s2.loss_bbox": 0.02593, "loss": 1.1017, "time": 0.7181}
{"mode": "train", "epoch": 4, "iter": 400, "lr": 0.0001, "memory": 4102, "data_time": 0.00612, "loss_rpn_cls": 0.14842, "loss_rpn_bbox": 0.03039, "s0.loss_cls": 0.34146, "s0.acc": 92.71777, "s0.loss_bbox": 0.14289, "s1.loss_cls": 0.12598, "s1.acc": 94.7168, "s1.loss_bbox": 0.087, "s2.loss_cls": 0.03937, "s2.acc": 97.20215, "s2.loss_bbox": 0.02129, "loss": 0.93682, "time": 0.72033}
{"mode": "train", "epoch": 4, "iter": 450, "lr": 0.0001, "memory": 4102, "data_time": 0.0061, "loss_rpn_cls": 0.13605, "loss_rpn_bbox": 0.02951, "s0.loss_cls": 0.34122, "s0.acc": 92.27539, "s0.loss_bbox": 0.15402, "s1.loss_cls": 0.12545, "s1.acc": 94.46973, "s1.loss_bbox": 0.09119, "s2.loss_cls": 0.03976, "s2.acc": 96.97852, "s2.loss_bbox": 0.0234, "loss": 0.9406, "time": 0.73353}
{"mode": "train", "epoch": 4, "iter": 500, "lr": 0.0001, "memory": 4102, "data_time": 0.0061, "loss_rpn_cls": 0.16118, "loss_rpn_bbox": 0.03377, "s0.loss_cls": 0.37406, "s0.acc": 91.91699, "s0.loss_bbox": 0.16845, "s1.loss_cls": 0.13377, "s1.acc": 94.54297, "s1.loss_bbox": 0.09237, "s2.loss_cls": 0.04108, "s2.acc": 97.1748, "s2.loss_bbox": 0.02115, "loss": 1.02583, "time": 0.73768}
{"mode": "train", "epoch": 4, "iter": 550, "lr": 0.0001, "memory": 4102, "data_time": 0.00619, "loss_rpn_cls": 0.16371, "loss_rpn_bbox": 0.03451, "s0.loss_cls": 0.36056, "s0.acc": 91.98926, "s0.loss_bbox": 0.15711, "s1.loss_cls": 0.13601, "s1.acc": 94.12988, "s1.loss_bbox": 0.09813, "s2.loss_cls": 0.04294, "s2.acc": 96.875, "s2.loss_bbox": 0.02422, "loss": 1.01718, "time": 0.71771}
{"mode": "train", "epoch": 4, "iter": 600, "lr": 0.0001, "memory": 4102, "data_time": 0.00603, "loss_rpn_cls": 0.14331, "loss_rpn_bbox": 0.03088, "s0.loss_cls": 0.3354, "s0.acc": 92.28809, "s0.loss_bbox": 0.14876, "s1.loss_cls": 0.12924, "s1.acc": 94.19727, "s1.loss_bbox": 0.09496, "s2.loss_cls": 0.04325, "s2.acc": 96.72949, "s2.loss_bbox": 0.02681, "loss": 0.95262, "time": 0.7196}
{"mode": "train", "epoch": 4, "iter": 650, "lr": 0.0001, "memory": 4102, "data_time": 0.00621, "loss_rpn_cls": 0.14961, "loss_rpn_bbox": 0.03335, "s0.loss_cls": 0.32031, "s0.acc": 92.9873, "s0.loss_bbox": 0.1339, "s1.loss_cls": 0.12159, "s1.acc": 94.7627, "s1.loss_bbox": 0.08426, "s2.loss_cls": 0.04013, "s2.acc": 97.03613, "s2.loss_bbox": 0.02338, "loss": 0.90652, "time": 0.7229}
{"mode": "train", "epoch": 4, "iter": 700, "lr": 0.0001, "memory": 4102, "data_time": 0.00602, "loss_rpn_cls": 0.1415, "loss_rpn_bbox": 0.02928, "s0.loss_cls": 0.32646, "s0.acc": 92.62012, "s0.loss_bbox": 0.14334, "s1.loss_cls": 0.1223, "s1.acc": 94.69824, "s1.loss_bbox": 0.08737, "s2.loss_cls": 0.03929, "s2.acc": 97.1377, "s2.loss_bbox": 0.02235, "loss": 0.91188, "time": 0.72227}
{"mode": "train", "epoch": 4, "iter": 750, "lr": 0.0001, "memory": 4102, "data_time": 0.00619, "loss_rpn_cls": 0.15778, "loss_rpn_bbox": 0.03346, "s0.loss_cls": 0.38667, "s0.acc": 91.4248, "s0.loss_bbox": 0.17115, "s1.loss_cls": 0.13964, "s1.acc": 93.97656, "s1.loss_bbox": 0.09737, "s2.loss_cls": 0.04434, "s2.acc": 96.69727, "s2.loss_bbox": 0.02488, "loss": 1.05529, "time": 0.72318}
{"mode": "train", "epoch": 4, "iter": 800, "lr": 0.0001, "memory": 4102, "data_time": 0.0061, "loss_rpn_cls": 0.12979, "loss_rpn_bbox": 0.02845, "s0.loss_cls": 0.34957, "s0.acc": 92.10938, "s0.loss_bbox": 0.15517, "s1.loss_cls": 0.13597, "s1.acc": 93.91992, "s1.loss_bbox": 0.10035, "s2.loss_cls": 0.04328, "s2.acc": 96.71582, "s2.loss_bbox": 0.02647, "loss": 0.96907, "time": 0.72585}
{"mode": "train", "epoch": 4, "iter": 850, "lr": 0.0001, "memory": 4102, "data_time": 0.0063, "loss_rpn_cls": 0.15124, "loss_rpn_bbox": 0.03055, "s0.loss_cls": 0.3963, "s0.acc": 90.9375, "s0.loss_bbox": 0.18232, "s1.loss_cls": 0.14759, "s1.acc": 93.60059, "s1.loss_bbox": 0.10771, "s2.loss_cls": 0.04544, "s2.acc": 96.71582, "s2.loss_bbox": 0.02509, "loss": 1.08624, "time": 0.73742}
