2021-10-12 09:10:21,066 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]
CUDA available: True
GPU 0: Tesla V100-PCIE-32GB
CUDA_HOME: None
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.5.3
MMCV: 1.3.14
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.0
MMDetection: 2.17.0+044cccd
------------------------------------------------------------

2021-10-12 09:10:21,678 - mmdet - INFO - Distributed training: False
2021-10-12 09:10:22,359 - mmdet - INFO - Config:
dataset_type = 'CocoDataset'
data_root = '/opt/ml/detection/dataset/'
classes = [
    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',
    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
]
img_norm_cfg = dict(mean=[0, 0, 0], std=[255.0, 255.0, 255.0], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='Resize',
        img_scale=[(1024, 1024), (768, 768), (512, 512)],
        keep_ratio=True,
        multiscale_mode='value'),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(type='CutOut', n_holes=10, cutout_shape=(15, 15)),
    dict(type='BrightnessTransform', level=2, prob=0.3),
    dict(type='RandomAffine'),
    dict(
        type='Normalize',
        mean=[0, 0, 0],
        std=[255.0, 255.0, 255.0],
        to_rgb=True),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1024, 1024),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[0, 0, 0],
                std=[255.0, 255.0, 255.0],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/train.json',
        img_prefix='/opt/ml/detection/dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='Resize',
                img_scale=[(1024, 1024), (768, 768), (512, 512)],
                keep_ratio=True,
                multiscale_mode='value'),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(type='CutOut', n_holes=10, cutout_shape=(15, 15)),
            dict(type='BrightnessTransform', level=2, prob=0.3),
            dict(type='RandomAffine'),
            dict(
                type='Normalize',
                mean=[0, 0, 0],
                std=[255.0, 255.0, 255.0],
                to_rgb=True),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/val_kfold1.json',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        img_prefix='/opt/ml/detection/dataset/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1024, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[0, 0, 0],
                        std=[255.0, 255.0, 255.0],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/test.json',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        img_prefix='/opt/ml/detection/dataset/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1024, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[0, 0, 0],
                        std=[255.0, 255.0, 255.0],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP_50')
checkpoint_config = dict(interval=100)
log_config = dict(
    interval=50,
    hooks=[
        dict(type='TextLoggerHook'),
        dict(type='WandbLoggerHook', init_kwargs=dict(project='mmdetection'))
    ])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
optimizer = dict(type='SGD', lr=0.002, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='CosineAnnealing',
    warmup='linear',
    warmup_iters=1000,
    warmup_ratio=0.01,
    min_lr=1e-06)
runner = dict(type='EpochBasedRunner', max_epochs=50)
model = dict(
    type='HybridTaskCascade',
    backbone=dict(
        type='ResNeXt',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(
            type='Pretrained', checkpoint='open-mmlab://resnext101_64x4d'),
        groups=64,
        base_width=4),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='HybridTaskCascadeRoIHead',
        interleaved=True,
        mask_info_flow=False,
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))
        ]),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.001,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100,
            mask_thr_binary=0.5)))
work_dir = './work_dirs/HTC_submission'
gpu_ids = range(0, 1)

2021-10-12 09:10:22,360 - mmdet - INFO - Set random seed to 2021, deterministic: True
2021-10-12 09:10:23,864 - mmdet - INFO - initialize ResNeXt with init_cfg {'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnext101_64x4d'}
2021-10-12 09:10:24,144 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2021-10-12 09:10:24,170 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2021-10-12 09:10:24,179 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-12 09:10:24,498 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-12 09:10:24,817 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.conv1.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.conv2.weight - torch.Size([256, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.conv3.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.conv1.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.conv2.weight - torch.Size([256, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.conv3.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.conv1.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.conv2.weight - torch.Size([256, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.conv3.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.conv1.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.conv2.weight - torch.Size([512, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.conv3.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.conv1.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.conv2.weight - torch.Size([512, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.conv3.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.conv1.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.conv2.weight - torch.Size([512, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.conv3.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.conv1.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.conv2.weight - torch.Size([512, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.conv3.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.conv1.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.conv1.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.conv2.weight - torch.Size([2048, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn2.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn2.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.conv3.weight - torch.Size([2048, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.conv1.weight - torch.Size([2048, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.conv2.weight - torch.Size([2048, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn2.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn2.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.conv3.weight - torch.Size([2048, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.conv1.weight - torch.Size([2048, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.conv2.weight - torch.Size([2048, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn2.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn2.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.conv3.weight - torch.Size([2048, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 
2021-10-12 09:10:28,730 - mmdet - INFO - Start running, host: root@00a46a6c3ac0, work_dir: /opt/ml/detection/object-detection-level2-cv-01/work_dirs/HTC_submission
2021-10-12 09:10:28,730 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_run:
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
2021-10-12 09:10:28,731 - mmdet - INFO - workflow: [('train', 1)], max: 50 epochs
2021-10-12 09:12:11,625 - mmdet - INFO - Epoch [1][50/1221]	lr: 1.170e-04, eta: 1 day, 8:37:09, time: 1.925, data_time: 0.055, memory: 17834, loss_rpn_cls: 0.6531, loss_rpn_bbox: 0.0448, s0.loss_cls: 0.4810, s0.acc: 89.8076, s0.loss_bbox: 0.0789, s1.loss_cls: 0.3232, s1.acc: 78.7158, s1.loss_bbox: 0.0239, s2.loss_cls: 0.2869, s2.acc: 66.3271, s2.loss_bbox: 0.0082, loss: 1.8999
2021-10-12 09:13:50,094 - mmdet - INFO - Epoch [1][100/1221]	lr: 2.160e-04, eta: 1 day, 8:58:03, time: 1.969, data_time: 0.010, memory: 17835, loss_rpn_cls: 0.3701, loss_rpn_bbox: 0.0448, s0.loss_cls: 0.2632, s0.acc: 95.9482, s0.loss_bbox: 0.1091, s1.loss_cls: 0.0806, s1.acc: 98.0186, s1.loss_bbox: 0.0329, s2.loss_cls: 0.0284, s2.acc: 98.7891, s2.loss_bbox: 0.0096, loss: 0.9388
2021-10-12 09:15:25,916 - mmdet - INFO - Epoch [1][150/1221]	lr: 3.150e-04, eta: 1 day, 8:46:00, time: 1.916, data_time: 0.010, memory: 17835, loss_rpn_cls: 0.1519, loss_rpn_bbox: 0.0401, s0.loss_cls: 0.2801, s0.acc: 94.9648, s0.loss_bbox: 0.1303, s1.loss_cls: 0.0753, s1.acc: 97.8184, s1.loss_bbox: 0.0362, s2.loss_cls: 0.0241, s2.acc: 98.8320, s2.loss_bbox: 0.0069, loss: 0.7450
2021-10-12 09:16:58,309 - mmdet - INFO - Epoch [1][200/1221]	lr: 4.140e-04, eta: 1 day, 8:21:48, time: 1.848, data_time: 0.010, memory: 17835, loss_rpn_cls: 0.1304, loss_rpn_bbox: 0.0383, s0.loss_cls: 0.2783, s0.acc: 94.7168, s0.loss_bbox: 0.1265, s1.loss_cls: 0.0729, s1.acc: 97.7178, s1.loss_bbox: 0.0377, s2.loss_cls: 0.0234, s2.acc: 98.7861, s2.loss_bbox: 0.0064, loss: 0.7138
2021-10-12 09:18:32,838 - mmdet - INFO - Epoch [1][250/1221]	lr: 5.130e-04, eta: 1 day, 8:15:19, time: 1.891, data_time: 0.010, memory: 17835, loss_rpn_cls: 0.1263, loss_rpn_bbox: 0.0404, s0.loss_cls: 0.2634, s0.acc: 94.7422, s0.loss_bbox: 0.1168, s1.loss_cls: 0.0706, s1.acc: 97.7070, s1.loss_bbox: 0.0364, s2.loss_cls: 0.0230, s2.acc: 98.7646, s2.loss_bbox: 0.0059, loss: 0.6827
2021-10-12 09:20:05,874 - mmdet - INFO - Epoch [1][300/1221]	lr: 6.120e-04, eta: 1 day, 8:05:26, time: 1.861, data_time: 0.010, memory: 17835, loss_rpn_cls: 0.1388, loss_rpn_bbox: 0.0446, s0.loss_cls: 0.2800, s0.acc: 94.3125, s0.loss_bbox: 0.1247, s1.loss_cls: 0.0752, s1.acc: 97.5400, s1.loss_bbox: 0.0382, s2.loss_cls: 0.0239, s2.acc: 98.6904, s2.loss_bbox: 0.0060, loss: 0.7313
2021-10-12 09:21:37,610 - mmdet - INFO - Epoch [1][350/1221]	lr: 7.110e-04, eta: 1 day, 7:54:10, time: 1.835, data_time: 0.009, memory: 17835, loss_rpn_cls: 0.1173, loss_rpn_bbox: 0.0408, s0.loss_cls: 0.2624, s0.acc: 94.6855, s0.loss_bbox: 0.1171, s1.loss_cls: 0.0713, s1.acc: 97.5869, s1.loss_bbox: 0.0373, s2.loss_cls: 0.0225, s2.acc: 98.7119, s2.loss_bbox: 0.0057, loss: 0.6744
2021-10-12 09:23:12,861 - mmdet - INFO - Epoch [1][400/1221]	lr: 8.100e-04, eta: 1 day, 7:54:13, time: 1.905, data_time: 0.010, memory: 17835, loss_rpn_cls: 0.1267, loss_rpn_bbox: 0.0405, s0.loss_cls: 0.2758, s0.acc: 94.3496, s0.loss_bbox: 0.1204, s1.loss_cls: 0.0750, s1.acc: 97.4648, s1.loss_bbox: 0.0385, s2.loss_cls: 0.0241, s2.acc: 98.6357, s2.loss_bbox: 0.0063, loss: 0.7072
2021-10-12 09:24:48,631 - mmdet - INFO - Epoch [1][450/1221]	lr: 9.090e-04, eta: 1 day, 7:55:05, time: 1.915, data_time: 0.010, memory: 17835, loss_rpn_cls: 0.1100, loss_rpn_bbox: 0.0427, s0.loss_cls: 0.2880, s0.acc: 94.0879, s0.loss_bbox: 0.1285, s1.loss_cls: 0.0785, s1.acc: 97.3379, s1.loss_bbox: 0.0426, s2.loss_cls: 0.0237, s2.acc: 98.6582, s2.loss_bbox: 0.0065, loss: 0.7204
2021-10-12 09:26:24,437 - mmdet - INFO - Epoch [1][500/1221]	lr: 1.008e-03, eta: 1 day, 7:55:31, time: 1.916, data_time: 0.010, memory: 17835, loss_rpn_cls: 0.1090, loss_rpn_bbox: 0.0378, s0.loss_cls: 0.2551, s0.acc: 94.7432, s0.loss_bbox: 0.1088, s1.loss_cls: 0.0702, s1.acc: 97.6221, s1.loss_bbox: 0.0351, s2.loss_cls: 0.0224, s2.acc: 98.6963, s2.loss_bbox: 0.0062, loss: 0.6446
2021-10-12 09:28:02,777 - mmdet - INFO - Epoch [1][550/1221]	lr: 1.107e-03, eta: 1 day, 8:00:14, time: 1.967, data_time: 0.010, memory: 17835, loss_rpn_cls: 0.1143, loss_rpn_bbox: 0.0409, s0.loss_cls: 0.2504, s0.acc: 94.5762, s0.loss_bbox: 0.1112, s1.loss_cls: 0.0686, s1.acc: 97.5342, s1.loss_bbox: 0.0358, s2.loss_cls: 0.0227, s2.acc: 98.6201, s2.loss_bbox: 0.0062, loss: 0.6500
2021-10-12 09:29:40,341 - mmdet - INFO - Epoch [1][600/1221]	lr: 1.206e-03, eta: 1 day, 8:02:35, time: 1.951, data_time: 0.010, memory: 17835, loss_rpn_cls: 0.0988, loss_rpn_bbox: 0.0376, s0.loss_cls: 0.2782, s0.acc: 93.6465, s0.loss_bbox: 0.1257, s1.loss_cls: 0.0743, s1.acc: 97.1807, s1.loss_bbox: 0.0431, s2.loss_cls: 0.0238, s2.acc: 98.5625, s2.loss_bbox: 0.0079, loss: 0.6894
2021-10-12 09:31:15,817 - mmdet - INFO - Epoch [1][650/1221]	lr: 1.305e-03, eta: 1 day, 8:01:05, time: 1.910, data_time: 0.010, memory: 17835, loss_rpn_cls: 0.0916, loss_rpn_bbox: 0.0354, s0.loss_cls: 0.2773, s0.acc: 93.9434, s0.loss_bbox: 0.1191, s1.loss_cls: 0.0723, s1.acc: 97.3867, s1.loss_bbox: 0.0387, s2.loss_cls: 0.0223, s2.acc: 98.6973, s2.loss_bbox: 0.0064, loss: 0.6632
2021-10-12 09:32:53,216 - mmdet - INFO - Epoch [1][700/1221]	lr: 1.404e-03, eta: 1 day, 8:02:20, time: 1.948, data_time: 0.011, memory: 17835, loss_rpn_cls: 0.1017, loss_rpn_bbox: 0.0459, s0.loss_cls: 0.3212, s0.acc: 92.4902, s0.loss_bbox: 0.1546, s1.loss_cls: 0.0867, s1.acc: 96.6562, s1.loss_bbox: 0.0522, s2.loss_cls: 0.0261, s2.acc: 98.3594, s2.loss_bbox: 0.0088, loss: 0.7971
2021-10-12 09:34:26,469 - mmdet - INFO - Epoch [1][750/1221]	lr: 1.503e-03, eta: 1 day, 7:57:39, time: 1.865, data_time: 0.010, memory: 17835, loss_rpn_cls: 0.1010, loss_rpn_bbox: 0.0509, s0.loss_cls: 0.2878, s0.acc: 93.4775, s0.loss_bbox: 0.1330, s1.loss_cls: 0.0744, s1.acc: 97.1514, s1.loss_bbox: 0.0426, s2.loss_cls: 0.0228, s2.acc: 98.5967, s2.loss_bbox: 0.0069, loss: 0.7193
2021-10-12 09:35:59,611 - mmdet - INFO - Epoch [1][800/1221]	lr: 1.602e-03, eta: 1 day, 7:53:13, time: 1.863, data_time: 0.010, memory: 17835, loss_rpn_cls: 0.0926, loss_rpn_bbox: 0.0436, s0.loss_cls: 0.3112, s0.acc: 92.4785, s0.loss_bbox: 0.1470, s1.loss_cls: 0.0792, s1.acc: 96.8408, s1.loss_bbox: 0.0475, s2.loss_cls: 0.0245, s2.acc: 98.4170, s2.loss_bbox: 0.0086, loss: 0.7542
2021-10-12 09:37:34,191 - mmdet - INFO - Epoch [1][850/1221]	lr: 1.701e-03, eta: 1 day, 7:50:49, time: 1.892, data_time: 0.010, memory: 17835, loss_rpn_cls: 0.0856, loss_rpn_bbox: 0.0381, s0.loss_cls: 0.2948, s0.acc: 92.8350, s0.loss_bbox: 0.1397, s1.loss_cls: 0.0753, s1.acc: 96.9072, s1.loss_bbox: 0.0472, s2.loss_cls: 0.0220, s2.acc: 98.5352, s2.loss_bbox: 0.0086, loss: 0.7113
2021-10-12 09:39:12,773 - mmdet - INFO - Epoch [1][900/1221]	lr: 1.800e-03, eta: 1 day, 7:52:59, time: 1.972, data_time: 0.010, memory: 17835, loss_rpn_cls: 0.0835, loss_rpn_bbox: 0.0416, s0.loss_cls: 0.3126, s0.acc: 92.5205, s0.loss_bbox: 0.1426, s1.loss_cls: 0.0804, s1.acc: 96.6895, s1.loss_bbox: 0.0490, s2.loss_cls: 0.0238, s2.acc: 98.4189, s2.loss_bbox: 0.0090, loss: 0.7425
2021-10-12 09:40:53,835 - mmdet - INFO - Epoch [1][950/1221]	lr: 1.899e-03, eta: 1 day, 7:57:21, time: 2.021, data_time: 0.011, memory: 17835, loss_rpn_cls: 0.0804, loss_rpn_bbox: 0.0385, s0.loss_cls: 0.3008, s0.acc: 92.7178, s0.loss_bbox: 0.1357, s1.loss_cls: 0.0758, s1.acc: 96.7969, s1.loss_bbox: 0.0474, s2.loss_cls: 0.0223, s2.acc: 98.4971, s2.loss_bbox: 0.0083, loss: 0.7092
2021-10-12 09:42:31,715 - mmdet - INFO - Exp name: HTC_submission.py
2021-10-12 09:42:31,715 - mmdet - INFO - Epoch [1][1000/1221]	lr: 1.998e-03, eta: 1 day, 7:57:55, time: 1.958, data_time: 0.011, memory: 17835, loss_rpn_cls: 0.0688, loss_rpn_bbox: 0.0307, s0.loss_cls: 0.2677, s0.acc: 93.4219, s0.loss_bbox: 0.1221, s1.loss_cls: 0.0646, s1.acc: 97.3115, s1.loss_bbox: 0.0388, s2.loss_cls: 0.0194, s2.acc: 98.6768, s2.loss_bbox: 0.0078, loss: 0.6199
2021-10-12 09:44:01,537 - mmdet - INFO - Epoch [1][1050/1221]	lr: 2.000e-03, eta: 1 day, 7:50:37, time: 1.796, data_time: 0.010, memory: 17835, loss_rpn_cls: 0.0682, loss_rpn_bbox: 0.0354, s0.loss_cls: 0.2968, s0.acc: 92.8330, s0.loss_bbox: 0.1322, s1.loss_cls: 0.0768, s1.acc: 96.8818, s1.loss_bbox: 0.0475, s2.loss_cls: 0.0219, s2.acc: 98.5098, s2.loss_bbox: 0.0084, loss: 0.6871
2021-10-12 09:45:40,471 - mmdet - INFO - Epoch [1][1100/1221]	lr: 2.000e-03, eta: 1 day, 7:52:07, time: 1.979, data_time: 0.011, memory: 17835, loss_rpn_cls: 0.0724, loss_rpn_bbox: 0.0367, s0.loss_cls: 0.2837, s0.acc: 92.8486, s0.loss_bbox: 0.1291, s1.loss_cls: 0.0741, s1.acc: 96.8301, s1.loss_bbox: 0.0472, s2.loss_cls: 0.0217, s2.acc: 98.4395, s2.loss_bbox: 0.0082, loss: 0.6731
2021-10-12 09:47:15,655 - mmdet - INFO - Epoch [1][1150/1221]	lr: 2.000e-03, eta: 1 day, 7:50:05, time: 1.904, data_time: 0.011, memory: 17835, loss_rpn_cls: 0.0647, loss_rpn_bbox: 0.0354, s0.loss_cls: 0.2859, s0.acc: 92.8447, s0.loss_bbox: 0.1230, s1.loss_cls: 0.0742, s1.acc: 96.8281, s1.loss_bbox: 0.0452, s2.loss_cls: 0.0211, s2.acc: 98.5049, s2.loss_bbox: 0.0080, loss: 0.6574
2021-10-12 09:48:53,453 - mmdet - INFO - Epoch [1][1200/1221]	lr: 2.000e-03, eta: 1 day, 7:50:16, time: 1.956, data_time: 0.011, memory: 17835, loss_rpn_cls: 0.0603, loss_rpn_bbox: 0.0292, s0.loss_cls: 0.3095, s0.acc: 92.2070, s0.loss_bbox: 0.1413, s1.loss_cls: 0.0780, s1.acc: 96.6191, s1.loss_bbox: 0.0515, s2.loss_cls: 0.0219, s2.acc: 98.4268, s2.loss_bbox: 0.0097, loss: 0.7014
2021-10-12 09:50:50,924 - mmdet - INFO - Evaluating bbox...
2021-10-12 09:50:58,487 - mmdet - INFO - Now best checkpoint is saved as best_bbox_mAP_50_epoch_1.pth.
2021-10-12 09:50:58,487 - mmdet - INFO - Best bbox_mAP_50 is 0.1360 at 1 epoch.
2021-10-12 09:50:58,489 - mmdet - INFO - Exp name: HTC_submission.py
2021-10-12 09:50:58,489 - mmdet - INFO - Epoch(val) [1][448]	bbox_mAP: 0.0630, bbox_mAP_50: 0.1360, bbox_mAP_75: 0.0510, bbox_mAP_s: 0.0070, bbox_mAP_m: 0.0120, bbox_mAP_l: 0.0770, bbox_mAP_copypaste: 0.063 0.136 0.051 0.007 0.012 0.077
2021-10-12 09:52:35,612 - mmdet - INFO - Epoch [2][50/1221]	lr: 1.998e-03, eta: 1 day, 7:17:32, time: 1.942, data_time: 0.057, memory: 17835, loss_rpn_cls: 0.0583, loss_rpn_bbox: 0.0289, s0.loss_cls: 0.2872, s0.acc: 92.8213, s0.loss_bbox: 0.1267, s1.loss_cls: 0.0714, s1.acc: 96.7871, s1.loss_bbox: 0.0479, s2.loss_cls: 0.0194, s2.acc: 98.5557, s2.loss_bbox: 0.0089, loss: 0.6488
2021-10-12 09:54:14,635 - mmdet - INFO - Epoch [2][100/1221]	lr: 1.998e-03, eta: 1 day, 7:19:35, time: 1.980, data_time: 0.011, memory: 17835, loss_rpn_cls: 0.0771, loss_rpn_bbox: 0.0381, s0.loss_cls: 0.3263, s0.acc: 91.7617, s0.loss_bbox: 0.1451, s1.loss_cls: 0.0831, s1.acc: 96.3477, s1.loss_bbox: 0.0536, s2.loss_cls: 0.0239, s2.acc: 98.2686, s2.loss_bbox: 0.0103, loss: 0.7573
2021-10-12 09:55:50,550 - mmdet - INFO - Epoch [2][150/1221]	lr: 1.998e-03, eta: 1 day, 7:19:06, time: 1.918, data_time: 0.011, memory: 17835, loss_rpn_cls: 0.0607, loss_rpn_bbox: 0.0309, s0.loss_cls: 0.3134, s0.acc: 92.0439, s0.loss_bbox: 0.1367, s1.loss_cls: 0.0777, s1.acc: 96.6035, s1.loss_bbox: 0.0507, s2.loss_cls: 0.0215, s2.acc: 98.4512, s2.loss_bbox: 0.0094, loss: 0.7010
2021-10-12 09:57:23,060 - mmdet - INFO - Epoch [2][200/1221]	lr: 1.998e-03, eta: 1 day, 7:16:10, time: 1.850, data_time: 0.011, memory: 17835, loss_rpn_cls: 0.0708, loss_rpn_bbox: 0.0470, s0.loss_cls: 0.3162, s0.acc: 91.7002, s0.loss_bbox: 0.1497, s1.loss_cls: 0.0833, s1.acc: 96.2100, s1.loss_bbox: 0.0566, s2.loss_cls: 0.0234, s2.acc: 98.2119, s2.loss_bbox: 0.0097, loss: 0.7568
2021-10-12 09:58:57,476 - mmdet - INFO - Epoch [2][250/1221]	lr: 1.998e-03, eta: 1 day, 7:14:36, time: 1.888, data_time: 0.011, memory: 17835, loss_rpn_cls: 0.0593, loss_rpn_bbox: 0.0338, s0.loss_cls: 0.2696, s0.acc: 92.9805, s0.loss_bbox: 0.1179, s1.loss_cls: 0.0701, s1.acc: 96.8613, s1.loss_bbox: 0.0439, s2.loss_cls: 0.0200, s2.acc: 98.4961, s2.loss_bbox: 0.0085, loss: 0.6232
2021-10-12 10:00:30,604 - mmdet - INFO - Epoch [2][300/1221]	lr: 1.998e-03, eta: 1 day, 7:12:12, time: 1.863, data_time: 0.011, memory: 17835, loss_rpn_cls: 0.0692, loss_rpn_bbox: 0.0359, s0.loss_cls: 0.2913, s0.acc: 92.3379, s0.loss_bbox: 0.1350, s1.loss_cls: 0.0793, s1.acc: 96.3701, s1.loss_bbox: 0.0532, s2.loss_cls: 0.0224, s2.acc: 98.2939, s2.loss_bbox: 0.0098, loss: 0.6962
2021-10-12 10:02:02,380 - mmdet - INFO - Epoch [2][350/1221]	lr: 1.998e-03, eta: 1 day, 7:09:00, time: 1.835, data_time: 0.011, memory: 17835, loss_rpn_cls: 0.0632, loss_rpn_bbox: 0.0371, s0.loss_cls: 0.3038, s0.acc: 92.2598, s0.loss_bbox: 0.1294, s1.loss_cls: 0.0789, s1.acc: 96.5156, s1.loss_bbox: 0.0498, s2.loss_cls: 0.0215, s2.acc: 98.4248, s2.loss_bbox: 0.0086, loss: 0.6924
2021-10-12 10:03:37,782 - mmdet - INFO - Epoch [2][400/1221]	lr: 1.998e-03, eta: 1 day, 7:08:07, time: 1.908, data_time: 0.011, memory: 17835, loss_rpn_cls: 0.0604, loss_rpn_bbox: 0.0337, s0.loss_cls: 0.2819, s0.acc: 92.8535, s0.loss_bbox: 0.1187, s1.loss_cls: 0.0718, s1.acc: 96.8184, s1.loss_bbox: 0.0435, s2.loss_cls: 0.0202, s2.acc: 98.5039, s2.loss_bbox: 0.0082, loss: 0.6384
2021-10-12 10:05:13,571 - mmdet - INFO - Epoch [2][450/1221]	lr: 1.998e-03, eta: 1 day, 7:07:26, time: 1.916, data_time: 0.011, memory: 17835, loss_rpn_cls: 0.0604, loss_rpn_bbox: 0.0358, s0.loss_cls: 0.3037, s0.acc: 92.1377, s0.loss_bbox: 0.1380, s1.loss_cls: 0.0830, s1.acc: 96.1865, s1.loss_bbox: 0.0582, s2.loss_cls: 0.0230, s2.acc: 98.1973, s2.loss_bbox: 0.0113, loss: 0.7134
2021-10-12 10:06:48,941 - mmdet - INFO - Epoch [2][500/1221]	lr: 1.998e-03, eta: 1 day, 7:06:27, time: 1.907, data_time: 0.011, memory: 17835, loss_rpn_cls: 0.0632, loss_rpn_bbox: 0.0346, s0.loss_cls: 0.2662, s0.acc: 93.1064, s0.loss_bbox: 0.1167, s1.loss_cls: 0.0685, s1.acc: 96.8525, s1.loss_bbox: 0.0453, s2.loss_cls: 0.0193, s2.acc: 98.5371, s2.loss_bbox: 0.0090, loss: 0.6228
2021-10-12 10:08:27,383 - mmdet - INFO - Epoch [2][550/1221]	lr: 1.998e-03, eta: 1 day, 7:07:08, time: 1.969, data_time: 0.011, memory: 17835, loss_rpn_cls: 0.0610, loss_rpn_bbox: 0.0389, s0.loss_cls: 0.2979, s0.acc: 92.0557, s0.loss_bbox: 0.1452, s1.loss_cls: 0.0766, s1.acc: 96.3994, s1.loss_bbox: 0.0540, s2.loss_cls: 0.0214, s2.acc: 98.3184, s2.loss_bbox: 0.0098, loss: 0.7048
2021-10-12 10:10:04,572 - mmdet - INFO - Epoch [2][600/1221]	lr: 1.998e-03, eta: 1 day, 7:07:02, time: 1.944, data_time: 0.011, memory: 17835, loss_rpn_cls: 0.0632, loss_rpn_bbox: 0.0342, s0.loss_cls: 0.3085, s0.acc: 92.0410, s0.loss_bbox: 0.1301, s1.loss_cls: 0.0831, s1.acc: 96.1670, s1.loss_bbox: 0.0549, s2.loss_cls: 0.0222, s2.acc: 98.2910, s2.loss_bbox: 0.0100, loss: 0.7060
2021-10-12 10:11:40,524 - mmdet - INFO - Epoch [2][650/1221]	lr: 1.998e-03, eta: 1 day, 7:06:11, time: 1.919, data_time: 0.011, memory: 17835, loss_rpn_cls: 0.0702, loss_rpn_bbox: 0.0379, s0.loss_cls: 0.2986, s0.acc: 92.1982, s0.loss_bbox: 0.1319, s1.loss_cls: 0.0808, s1.acc: 96.2305, s1.loss_bbox: 0.0534, s2.loss_cls: 0.0230, s2.acc: 98.1875, s2.loss_bbox: 0.0111, loss: 0.7070
2021-10-12 10:13:17,896 - mmdet - INFO - Epoch [2][700/1221]	lr: 1.998e-03, eta: 1 day, 7:06:01, time: 1.947, data_time: 0.011, memory: 17835, loss_rpn_cls: 0.0623, loss_rpn_bbox: 0.0345, s0.loss_cls: 0.3049, s0.acc: 91.9717, s0.loss_bbox: 0.1338, s1.loss_cls: 0.0818, s1.acc: 96.2129, s1.loss_bbox: 0.0532, s2.loss_cls: 0.0229, s2.acc: 98.2500, s2.loss_bbox: 0.0101, loss: 0.7035
2021-10-12 10:14:50,772 - mmdet - INFO - Epoch [2][750/1221]	lr: 1.998e-03, eta: 1 day, 7:03:33, time: 1.858, data_time: 0.011, memory: 17835, loss_rpn_cls: 0.0747, loss_rpn_bbox: 0.0403, s0.loss_cls: 0.2935, s0.acc: 92.3838, s0.loss_bbox: 0.1332, s1.loss_cls: 0.0782, s1.acc: 96.3926, s1.loss_bbox: 0.0535, s2.loss_cls: 0.0219, s2.acc: 98.2598, s2.loss_bbox: 0.0100, loss: 0.7054
2021-10-12 10:16:23,459 - mmdet - INFO - Epoch [2][800/1221]	lr: 1.998e-03, eta: 1 day, 7:01:01, time: 1.854, data_time: 0.011, memory: 17835, loss_rpn_cls: 0.0590, loss_rpn_bbox: 0.0366, s0.loss_cls: 0.2495, s0.acc: 93.2188, s0.loss_bbox: 0.1115, s1.loss_cls: 0.0674, s1.acc: 96.7207, s1.loss_bbox: 0.0461, s2.loss_cls: 0.0186, s2.acc: 98.4980, s2.loss_bbox: 0.0087, loss: 0.5974
2021-10-12 10:17:58,336 - mmdet - INFO - Epoch [2][850/1221]	lr: 1.998e-03, eta: 1 day, 6:59:35, time: 1.898, data_time: 0.011, memory: 17835, loss_rpn_cls: 0.0553, loss_rpn_bbox: 0.0312, s0.loss_cls: 0.2849, s0.acc: 92.3281, s0.loss_bbox: 0.1254, s1.loss_cls: 0.0760, s1.acc: 96.4189, s1.loss_bbox: 0.0513, s2.loss_cls: 0.0210, s2.acc: 98.3457, s2.loss_bbox: 0.0101, loss: 0.6552
2021-10-12 10:19:36,411 - mmdet - INFO - Epoch [2][900/1221]	lr: 1.998e-03, eta: 1 day, 6:59:37, time: 1.961, data_time: 0.012, memory: 17835, loss_rpn_cls: 0.0669, loss_rpn_bbox: 0.0390, s0.loss_cls: 0.3022, s0.acc: 92.0840, s0.loss_bbox: 0.1319, s1.loss_cls: 0.0814, s1.acc: 96.2383, s1.loss_bbox: 0.0546, s2.loss_cls: 0.0232, s2.acc: 98.1738, s2.loss_bbox: 0.0106, loss: 0.7099
2021-10-12 10:21:17,934 - mmdet - INFO - Epoch [2][950/1221]	lr: 1.998e-03, eta: 1 day, 7:01:08, time: 2.030, data_time: 0.012, memory: 17835, loss_rpn_cls: 0.0606, loss_rpn_bbox: 0.0393, s0.loss_cls: 0.2928, s0.acc: 92.1504, s0.loss_bbox: 0.1316, s1.loss_cls: 0.0777, s1.acc: 96.2559, s1.loss_bbox: 0.0549, s2.loss_cls: 0.0219, s2.acc: 98.2119, s2.loss_bbox: 0.0108, loss: 0.6897
2021-10-12 10:22:55,908 - mmdet - INFO - Epoch [2][1000/1221]	lr: 1.998e-03, eta: 1 day, 7:00:57, time: 1.959, data_time: 0.012, memory: 17835, loss_rpn_cls: 0.0641, loss_rpn_bbox: 0.0377, s0.loss_cls: 0.2837, s0.acc: 92.2510, s0.loss_bbox: 0.1325, s1.loss_cls: 0.0755, s1.acc: 96.3066, s1.loss_bbox: 0.0520, s2.loss_cls: 0.0221, s2.acc: 98.1670, s2.loss_bbox: 0.0107, loss: 0.6784
2021-10-12 10:24:26,041 - mmdet - INFO - Epoch [2][1050/1221]	lr: 1.998e-03, eta: 1 day, 6:57:19, time: 1.803, data_time: 0.011, memory: 17835, loss_rpn_cls: 0.0482, loss_rpn_bbox: 0.0267, s0.loss_cls: 0.2729, s0.acc: 92.5449, s0.loss_bbox: 0.1230, s1.loss_cls: 0.0708, s1.acc: 96.5342, s1.loss_bbox: 0.0489, s2.loss_cls: 0.0193, s2.acc: 98.4033, s2.loss_bbox: 0.0098, loss: 0.6196
2021-10-12 10:26:05,255 - mmdet - INFO - Epoch [2][1100/1221]	lr: 1.998e-03, eta: 1 day, 6:57:36, time: 1.984, data_time: 0.012, memory: 17835, loss_rpn_cls: 0.0559, loss_rpn_bbox: 0.0361, s0.loss_cls: 0.2966, s0.acc: 91.7441, s0.loss_bbox: 0.1383, s1.loss_cls: 0.0817, s1.acc: 95.9316, s1.loss_bbox: 0.0589, s2.loss_cls: 0.0223, s2.acc: 98.1475, s2.loss_bbox: 0.0108, loss: 0.7007
2021-10-12 10:27:41,061 - mmdet - INFO - Epoch [2][1150/1221]	lr: 1.998e-03, eta: 1 day, 6:56:23, time: 1.916, data_time: 0.011, memory: 17835, loss_rpn_cls: 0.0524, loss_rpn_bbox: 0.0264, s0.loss_cls: 0.2652, s0.acc: 92.8389, s0.loss_bbox: 0.1179, s1.loss_cls: 0.0700, s1.acc: 96.6260, s1.loss_bbox: 0.0474, s2.loss_cls: 0.0195, s2.acc: 98.4150, s2.loss_bbox: 0.0093, loss: 0.6080
2021-10-12 10:29:18,499 - mmdet - INFO - Epoch [2][1200/1221]	lr: 1.998e-03, eta: 1 day, 6:55:50, time: 1.949, data_time: 0.011, memory: 17835, loss_rpn_cls: 0.0598, loss_rpn_bbox: 0.0377, s0.loss_cls: 0.2875, s0.acc: 92.0576, s0.loss_bbox: 0.1274, s1.loss_cls: 0.0771, s1.acc: 96.2188, s1.loss_bbox: 0.0529, s2.loss_cls: 0.0217, s2.acc: 98.2158, s2.loss_bbox: 0.0107, loss: 0.6748
2021-10-12 10:31:15,537 - mmdet - INFO - Evaluating bbox...
2021-10-12 10:31:22,891 - mmdet - INFO - Now best checkpoint is saved as best_bbox_mAP_50_epoch_2.pth.
2021-10-12 10:31:22,892 - mmdet - INFO - Best bbox_mAP_50 is 0.2200 at 2 epoch.
2021-10-12 10:31:22,905 - mmdet - INFO - Exp name: HTC_submission.py
2021-10-12 10:31:22,906 - mmdet - INFO - Epoch(val) [2][448]	bbox_mAP: 0.1120, bbox_mAP_50: 0.2200, bbox_mAP_75: 0.0960, bbox_mAP_s: 0.0070, bbox_mAP_m: 0.0280, bbox_mAP_l: 0.1360, bbox_mAP_copypaste: 0.112 0.220 0.096 0.007 0.028 0.136
2021-10-12 10:32:59,966 - mmdet - INFO - Epoch [3][50/1221]	lr: 1.992e-03, eta: 1 day, 6:38:46, time: 1.941, data_time: 0.058, memory: 17835, loss_rpn_cls: 0.0518, loss_rpn_bbox: 0.0343, s0.loss_cls: 0.2714, s0.acc: 92.8145, s0.loss_bbox: 0.1184, s1.loss_cls: 0.0736, s1.acc: 96.5049, s1.loss_bbox: 0.0491, s2.loss_cls: 0.0209, s2.acc: 98.2998, s2.loss_bbox: 0.0101, loss: 0.6298
2021-10-12 10:34:39,098 - mmdet - INFO - Epoch [3][100/1221]	lr: 1.992e-03, eta: 1 day, 6:39:06, time: 1.983, data_time: 0.011, memory: 17835, loss_rpn_cls: 0.0511, loss_rpn_bbox: 0.0371, s0.loss_cls: 0.2812, s0.acc: 92.2471, s0.loss_bbox: 0.1294, s1.loss_cls: 0.0768, s1.acc: 96.1445, s1.loss_bbox: 0.0562, s2.loss_cls: 0.0214, s2.acc: 98.1514, s2.loss_bbox: 0.0112, loss: 0.6644
