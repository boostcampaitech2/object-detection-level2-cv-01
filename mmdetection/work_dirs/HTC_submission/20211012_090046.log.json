{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.3\nMMCV: 1.3.14\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.17.0+044cccd", "config": "dataset_type = 'CocoDataset'\ndata_root = '/opt/ml/detection/dataset/'\nclasses = [\n    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\nimg_norm_cfg = dict(mean=[0, 0, 0], std=[255.0, 255.0, 255.0], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(1024, 1024), (768, 768), (512, 512)],\n        keep_ratio=True,\n        multiscale_mode='value'),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(type='CutOut', n_holes=10, cutout_shape=(15, 15)),\n    dict(type='BrightnessTransform', level=2, prob=0.3),\n    dict(type='RandomAffine'),\n    dict(\n        type='Normalize',\n        mean=[0, 0, 0],\n        std=[255.0, 255.0, 255.0],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/train.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(1024, 1024), (768, 768), (512, 512)],\n                keep_ratio=True,\n                multiscale_mode='value'),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(type='CutOut', n_holes=10, cutout_shape=(15, 15)),\n            dict(type='BrightnessTransform', level=2, prob=0.3),\n            dict(type='RandomAffine'),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/val_kfold1.json',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/test.json',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP_50')\ncheckpoint_config = dict(interval=100)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(type='WandbLoggerHook', init_kwargs=dict(project='mmdetection'))\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\noptimizer = dict(type='SGD', lr=0.002, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='CosineAnnealing',\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=0.01,\n    min_lr=1e-06)\nrunner = dict(type='EpochBasedRunner', max_epochs=50)\nmodel = dict(\n    type='HybridTaskCascade',\n    backbone=dict(\n        type='ResNeXt',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(\n            type='Pretrained', checkpoint='open-mmlab://resnext101_64x4d'),\n        groups=64,\n        base_width=4),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='HybridTaskCascadeRoIHead',\n        interleaved=True,\n        mask_info_flow=False,\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.001,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\nwork_dir = './work_dirs/HTC_submission'\ngpu_ids = range(0, 1)\n", "seed": 2021, "exp_name": "HTC_submission.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00012, "memory": 9653, "data_time": 0.04895, "loss_rpn_cls": 0.65071, "loss_rpn_bbox": 0.02914, "s0.loss_cls": 0.45398, "s0.acc": 90.61885, "s0.loss_bbox": 0.06724, "s1.loss_cls": 0.31633, "s1.acc": 79.4567, "s1.loss_bbox": 0.01985, "s2.loss_cls": 0.284, "s2.acc": 66.71672, "s2.loss_bbox": 0.00702, "loss": 1.82828, "time": 0.89175}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00022, "memory": 9653, "data_time": 0.00514, "loss_rpn_cls": 0.36121, "loss_rpn_bbox": 0.03502, "s0.loss_cls": 0.27452, "s0.acc": 95.86328, "s0.loss_bbox": 0.11321, "s1.loss_cls": 0.08307, "s1.acc": 98.00977, "s1.loss_bbox": 0.03415, "s2.loss_cls": 0.02953, "s2.acc": 98.80664, "s2.loss_bbox": 0.00939, "loss": 0.94011, "time": 0.8446}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00032, "memory": 9653, "data_time": 0.00521, "loss_rpn_cls": 0.16919, "loss_rpn_bbox": 0.04717, "s0.loss_cls": 0.28248, "s0.acc": 94.98242, "s0.loss_bbox": 0.12972, "s1.loss_cls": 0.07649, "s1.acc": 97.79102, "s1.loss_bbox": 0.03523, "s2.loss_cls": 0.02604, "s2.acc": 98.75, "s2.loss_bbox": 0.00683, "loss": 0.77317, "time": 0.85564}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00041, "memory": 9653, "data_time": 0.00496, "loss_rpn_cls": 0.13636, "loss_rpn_bbox": 0.03843, "s0.loss_cls": 0.31151, "s0.acc": 94.67969, "s0.loss_bbox": 0.12925, "s1.loss_cls": 0.07816, "s1.acc": 97.71289, "s1.loss_bbox": 0.037, "s2.loss_cls": 0.02368, "s2.acc": 98.81641, "s2.loss_bbox": 0.00588, "loss": 0.76027, "time": 0.84091}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00051, "memory": 9653, "data_time": 0.00497, "loss_rpn_cls": 0.12117, "loss_rpn_bbox": 0.03369, "s0.loss_cls": 0.27812, "s0.acc": 94.68945, "s0.loss_bbox": 0.12611, "s1.loss_cls": 0.07119, "s1.acc": 97.71094, "s1.loss_bbox": 0.03655, "s2.loss_cls": 0.02258, "s2.acc": 98.75977, "s2.loss_bbox": 0.00632, "loss": 0.69573, "time": 0.82259}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00061, "memory": 9653, "data_time": 0.00504, "loss_rpn_cls": 0.14807, "loss_rpn_bbox": 0.04764, "s0.loss_cls": 0.29637, "s0.acc": 94.42383, "s0.loss_bbox": 0.12575, "s1.loss_cls": 0.07872, "s1.acc": 97.50977, "s1.loss_bbox": 0.0383, "s2.loss_cls": 0.02535, "s2.acc": 98.65234, "s2.loss_bbox": 0.00584, "loss": 0.76604, "time": 0.82248}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00071, "memory": 9653, "data_time": 0.00515, "loss_rpn_cls": 0.12247, "loss_rpn_bbox": 0.04184, "s0.loss_cls": 0.27901, "s0.acc": 94.53125, "s0.loss_bbox": 0.12387, "s1.loss_cls": 0.07341, "s1.acc": 97.56445, "s1.loss_bbox": 0.03853, "s2.loss_cls": 0.02335, "s2.acc": 98.72656, "s2.loss_bbox": 0.00611, "loss": 0.7086, "time": 0.85481}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00081, "memory": 9653, "data_time": 0.00517, "loss_rpn_cls": 0.1311, "loss_rpn_bbox": 0.04116, "s0.loss_cls": 0.31939, "s0.acc": 93.65039, "s0.loss_bbox": 0.14157, "s1.loss_cls": 0.08545, "s1.acc": 97.14844, "s1.loss_bbox": 0.04485, "s2.loss_cls": 0.02705, "s2.acc": 98.50195, "s2.loss_bbox": 0.00659, "loss": 0.79716, "time": 0.85259}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00091, "memory": 9653, "data_time": 0.00506, "loss_rpn_cls": 0.11124, "loss_rpn_bbox": 0.03713, "s0.loss_cls": 0.29316, "s0.acc": 94.29102, "s0.loss_bbox": 0.12377, "s1.loss_cls": 0.07566, "s1.acc": 97.60547, "s1.loss_bbox": 0.03857, "s2.loss_cls": 0.02289, "s2.acc": 98.78125, "s2.loss_bbox": 0.00616, "loss": 0.70858, "time": 0.80515}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00101, "memory": 9653, "data_time": 0.00525, "loss_rpn_cls": 0.11479, "loss_rpn_bbox": 0.03903, "s0.loss_cls": 0.29699, "s0.acc": 94.15625, "s0.loss_bbox": 0.12667, "s1.loss_cls": 0.07713, "s1.acc": 97.5, "s1.loss_bbox": 0.03867, "s2.loss_cls": 0.0234, "s2.acc": 98.6875, "s2.loss_bbox": 0.00649, "loss": 0.72317, "time": 0.84287}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00111, "memory": 9653, "data_time": 0.00515, "loss_rpn_cls": 0.12266, "loss_rpn_bbox": 0.03943, "s0.loss_cls": 0.33436, "s0.acc": 93.70508, "s0.loss_bbox": 0.138, "s1.loss_cls": 0.08156, "s1.acc": 97.39258, "s1.loss_bbox": 0.04104, "s2.loss_cls": 0.02454, "s2.acc": 98.6875, "s2.loss_bbox": 0.00655, "loss": 0.78815, "time": 0.79848}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00121, "memory": 9653, "data_time": 0.00551, "loss_rpn_cls": 0.10712, "loss_rpn_bbox": 0.03356, "s0.loss_cls": 0.29704, "s0.acc": 93.9043, "s0.loss_bbox": 0.12381, "s1.loss_cls": 0.07557, "s1.acc": 97.42188, "s1.loss_bbox": 0.03816, "s2.loss_cls": 0.02347, "s2.acc": 98.66211, "s2.loss_bbox": 0.0071, "loss": 0.70583, "time": 0.84463}
