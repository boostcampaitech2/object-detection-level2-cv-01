{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.3\nMMCV: 1.3.14\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.17.0+044cccd", "config": "dataset_type = 'CocoDataset'\ndata_root = '/opt/ml/detection/dataset/'\nclasses = [\n    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\nimg_norm_cfg = dict(mean=[0, 0, 0], std=[255.0, 255.0, 255.0], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=(1024, 1024),\n        keep_ratio=True,\n        multiscale_mode='value'),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(type='CutOut', n_holes=10, cutout_shape=(15, 15)),\n    dict(type='BrightnessTransform', level=2, prob=0.3),\n    dict(type='RandomAffine'),\n    dict(\n        type='Normalize',\n        mean=[0, 0, 0],\n        std=[255.0, 255.0, 255.0],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/train.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=(1024, 1024),\n                keep_ratio=True,\n                multiscale_mode='value'),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(type='CutOut', n_holes=10, cutout_shape=(15, 15)),\n            dict(type='BrightnessTransform', level=2, prob=0.3),\n            dict(type='RandomAffine'),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/val_kfold1.json',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/test.json',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP_50')\ncheckpoint_config = dict(interval=100)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(type='WandbLoggerHook', init_kwargs=dict(project='mmdetection'))\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\noptimizer = dict(type='SGD', lr=0.002, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='CosineAnnealing',\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=0.01,\n    min_lr=1e-06)\nrunner = dict(type='EpochBasedRunner', max_epochs=50)\nmodel = dict(\n    type='HybridTaskCascade',\n    backbone=dict(\n        type='ResNeXt',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(\n            type='Pretrained', checkpoint='open-mmlab://resnext101_64x4d'),\n        groups=64,\n        base_width=4),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='HybridTaskCascadeRoIHead',\n        interleaved=True,\n        mask_info_flow=False,\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.001,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\nwork_dir = './work_dirs/HTC_submission'\ngpu_ids = range(0, 1)\n", "seed": 2021, "exp_name": "HTC_submission.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00012, "memory": 17833, "data_time": 0.05759, "loss_rpn_cls": 0.65725, "loss_rpn_bbox": 0.04845, "s0.loss_cls": 0.45323, "s0.acc": 90.48438, "s0.loss_bbox": 0.0673, "s1.loss_cls": 0.32559, "s1.acc": 78.41309, "s1.loss_bbox": 0.01934, "s2.loss_cls": 0.28643, "s2.acc": 65.81445, "s2.loss_bbox": 0.00725, "loss": 1.86485, "time": 2.13027}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00022, "memory": 17833, "data_time": 0.01057, "loss_rpn_cls": 0.35452, "loss_rpn_bbox": 0.04679, "s0.loss_cls": 0.25778, "s0.acc": 95.97852, "s0.loss_bbox": 0.11201, "s1.loss_cls": 0.07673, "s1.acc": 98.10059, "s1.loss_bbox": 0.03233, "s2.loss_cls": 0.02811, "s2.acc": 98.80762, "s2.loss_bbox": 0.00906, "loss": 0.91734, "time": 2.07874}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00032, "memory": 17833, "data_time": 0.01046, "loss_rpn_cls": 0.13671, "loss_rpn_bbox": 0.04133, "s0.loss_cls": 0.27597, "s0.acc": 95.04102, "s0.loss_bbox": 0.12949, "s1.loss_cls": 0.07576, "s1.acc": 97.86621, "s1.loss_bbox": 0.0361, "s2.loss_cls": 0.02451, "s2.acc": 98.85059, "s2.loss_bbox": 0.00702, "loss": 0.7269, "time": 2.07537}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00041, "memory": 17833, "data_time": 0.01018, "loss_rpn_cls": 0.12157, "loss_rpn_bbox": 0.03994, "s0.loss_cls": 0.25877, "s0.acc": 95.0459, "s0.loss_bbox": 0.11994, "s1.loss_cls": 0.06782, "s1.acc": 97.87988, "s1.loss_bbox": 0.0336, "s2.loss_cls": 0.02239, "s2.acc": 98.84375, "s2.loss_bbox": 0.00552, "loss": 0.66953, "time": 2.06971}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00051, "memory": 17833, "data_time": 0.01057, "loss_rpn_cls": 0.12299, "loss_rpn_bbox": 0.04684, "s0.loss_cls": 0.2387, "s0.acc": 95.19238, "s0.loss_bbox": 0.10743, "s1.loss_cls": 0.06525, "s1.acc": 97.89844, "s1.loss_bbox": 0.03177, "s2.loss_cls": 0.02199, "s2.acc": 98.80957, "s2.loss_bbox": 0.00521, "loss": 0.64017, "time": 2.08296}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00061, "memory": 17833, "data_time": 0.01071, "loss_rpn_cls": 0.11171, "loss_rpn_bbox": 0.04167, "s0.loss_cls": 0.24242, "s0.acc": 95.18262, "s0.loss_bbox": 0.10629, "s1.loss_cls": 0.06702, "s1.acc": 97.81055, "s1.loss_bbox": 0.03235, "s2.loss_cls": 0.02226, "s2.acc": 98.77832, "s2.loss_bbox": 0.00481, "loss": 0.62852, "time": 2.07733}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00071, "memory": 17833, "data_time": 0.0105, "loss_rpn_cls": 0.11095, "loss_rpn_bbox": 0.04183, "s0.loss_cls": 0.25781, "s0.acc": 94.71387, "s0.loss_bbox": 0.11334, "s1.loss_cls": 0.06872, "s1.acc": 97.67285, "s1.loss_bbox": 0.03514, "s2.loss_cls": 0.02254, "s2.acc": 98.7207, "s2.loss_bbox": 0.0055, "loss": 0.65583, "time": 2.07543}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00081, "memory": 17833, "data_time": 0.01079, "loss_rpn_cls": 0.10865, "loss_rpn_bbox": 0.03719, "s0.loss_cls": 0.26075, "s0.acc": 94.86621, "s0.loss_bbox": 0.10916, "s1.loss_cls": 0.07109, "s1.acc": 97.65234, "s1.loss_bbox": 0.03436, "s2.loss_cls": 0.02331, "s2.acc": 98.6875, "s2.loss_bbox": 0.00569, "loss": 0.6502, "time": 2.08351}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00091, "memory": 17833, "data_time": 0.01047, "loss_rpn_cls": 0.09698, "loss_rpn_bbox": 0.04677, "s0.loss_cls": 0.27845, "s0.acc": 94.01465, "s0.loss_bbox": 0.12681, "s1.loss_cls": 0.07534, "s1.acc": 97.33789, "s1.loss_bbox": 0.0423, "s2.loss_cls": 0.02356, "s2.acc": 98.6377, "s2.loss_bbox": 0.00693, "loss": 0.69715, "time": 2.07391}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00101, "memory": 17833, "data_time": 0.01083, "loss_rpn_cls": 0.08704, "loss_rpn_bbox": 0.04263, "s0.loss_cls": 0.28331, "s0.acc": 93.85449, "s0.loss_bbox": 0.12699, "s1.loss_cls": 0.07426, "s1.acc": 97.38086, "s1.loss_bbox": 0.04063, "s2.loss_cls": 0.02239, "s2.acc": 98.69434, "s2.loss_bbox": 0.00629, "loss": 0.68354, "time": 2.08287}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00111, "memory": 17833, "data_time": 0.01088, "loss_rpn_cls": 0.10395, "loss_rpn_bbox": 0.04392, "s0.loss_cls": 0.2869, "s0.acc": 93.56836, "s0.loss_bbox": 0.12951, "s1.loss_cls": 0.07613, "s1.acc": 97.19824, "s1.loss_bbox": 0.04329, "s2.loss_cls": 0.02337, "s2.acc": 98.61426, "s2.loss_bbox": 0.00639, "loss": 0.71346, "time": 2.09235}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00121, "memory": 17833, "data_time": 0.01091, "loss_rpn_cls": 0.08385, "loss_rpn_bbox": 0.04351, "s0.loss_cls": 0.28395, "s0.acc": 93.30273, "s0.loss_bbox": 0.13367, "s1.loss_cls": 0.07608, "s1.acc": 97.11816, "s1.loss_bbox": 0.04365, "s2.loss_cls": 0.02361, "s2.acc": 98.55273, "s2.loss_bbox": 0.00802, "loss": 0.69634, "time": 2.08133}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00131, "memory": 17833, "data_time": 0.01119, "loss_rpn_cls": 0.07335, "loss_rpn_bbox": 0.03695, "s0.loss_cls": 0.29175, "s0.acc": 93.64941, "s0.loss_bbox": 0.12641, "s1.loss_cls": 0.07231, "s1.acc": 97.34473, "s1.loss_bbox": 0.03944, "s2.loss_cls": 0.02212, "s2.acc": 98.68555, "s2.loss_bbox": 0.00678, "loss": 0.66911, "time": 2.08113}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.0014, "memory": 17833, "data_time": 0.01116, "loss_rpn_cls": 0.0803, "loss_rpn_bbox": 0.0462, "s0.loss_cls": 0.31953, "s0.acc": 92.40918, "s0.loss_bbox": 0.15289, "s1.loss_cls": 0.0827, "s1.acc": 96.74609, "s1.loss_bbox": 0.04921, "s2.loss_cls": 0.0253, "s2.acc": 98.3916, "s2.loss_bbox": 0.00834, "loss": 0.76448, "time": 2.07492}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.0015, "memory": 17833, "data_time": 0.0109, "loss_rpn_cls": 0.07284, "loss_rpn_bbox": 0.04918, "s0.loss_cls": 0.28237, "s0.acc": 93.36719, "s0.loss_bbox": 0.13135, "s1.loss_cls": 0.07196, "s1.acc": 97.2334, "s1.loss_bbox": 0.04111, "s2.loss_cls": 0.02184, "s2.acc": 98.61328, "s2.loss_bbox": 0.00699, "loss": 0.67765, "time": 2.08398}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.0016, "memory": 17833, "data_time": 0.01197, "loss_rpn_cls": 0.0847, "loss_rpn_bbox": 0.04397, "s0.loss_cls": 0.30513, "s0.acc": 92.78223, "s0.loss_bbox": 0.13922, "s1.loss_cls": 0.07744, "s1.acc": 96.90234, "s1.loss_bbox": 0.0457, "s2.loss_cls": 0.02333, "s2.acc": 98.49316, "s2.loss_bbox": 0.0075, "loss": 0.72698, "time": 2.09515}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.0017, "memory": 17833, "data_time": 0.0117, "loss_rpn_cls": 0.05547, "loss_rpn_bbox": 0.03826, "s0.loss_cls": 0.27317, "s0.acc": 93.37891, "s0.loss_bbox": 0.12824, "s1.loss_cls": 0.06692, "s1.acc": 97.22949, "s1.loss_bbox": 0.04053, "s2.loss_cls": 0.0204, "s2.acc": 98.62402, "s2.loss_bbox": 0.00734, "loss": 0.63033, "time": 2.09057}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.0018, "memory": 17833, "data_time": 0.01161, "loss_rpn_cls": 0.06701, "loss_rpn_bbox": 0.04715, "s0.loss_cls": 0.30663, "s0.acc": 92.62793, "s0.loss_bbox": 0.1393, "s1.loss_cls": 0.07871, "s1.acc": 96.79102, "s1.loss_bbox": 0.04874, "s2.loss_cls": 0.02247, "s2.acc": 98.50879, "s2.loss_bbox": 0.008, "loss": 0.718, "time": 2.09596}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.0019, "memory": 17833, "data_time": 0.01142, "loss_rpn_cls": 0.07781, "loss_rpn_bbox": 0.03547, "s0.loss_cls": 0.29969, "s0.acc": 92.81836, "s0.loss_bbox": 0.14421, "s1.loss_cls": 0.07694, "s1.acc": 96.88086, "s1.loss_bbox": 0.04843, "s2.loss_cls": 0.02219, "s2.acc": 98.49707, "s2.loss_bbox": 0.00837, "loss": 0.71312, "time": 2.07827}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.002, "memory": 17833, "data_time": 0.01136, "loss_rpn_cls": 0.05743, "loss_rpn_bbox": 0.03396, "s0.loss_cls": 0.2731, "s0.acc": 93.10254, "s0.loss_bbox": 0.12766, "s1.loss_cls": 0.06745, "s1.acc": 97.05859, "s1.loss_bbox": 0.04468, "s2.loss_cls": 0.01901, "s2.acc": 98.63281, "s2.loss_bbox": 0.00801, "loss": 0.63129, "time": 2.08184}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.002, "memory": 17833, "data_time": 0.01119, "loss_rpn_cls": 0.06124, "loss_rpn_bbox": 0.0364, "s0.loss_cls": 0.27766, "s0.acc": 93.16797, "s0.loss_bbox": 0.12766, "s1.loss_cls": 0.06945, "s1.acc": 97.09277, "s1.loss_bbox": 0.04253, "s2.loss_cls": 0.02024, "s2.acc": 98.59961, "s2.loss_bbox": 0.00745, "loss": 0.64264, "time": 2.08365}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.002, "memory": 17833, "data_time": 0.01102, "loss_rpn_cls": 0.05499, "loss_rpn_bbox": 0.03509, "s0.loss_cls": 0.30001, "s0.acc": 92.43652, "s0.loss_bbox": 0.13769, "s1.loss_cls": 0.07812, "s1.acc": 96.63379, "s1.loss_bbox": 0.05021, "s2.loss_cls": 0.02265, "s2.acc": 98.39941, "s2.loss_bbox": 0.00883, "loss": 0.6876, "time": 2.07876}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.002, "memory": 17833, "data_time": 0.01166, "loss_rpn_cls": 0.05423, "loss_rpn_bbox": 0.0348, "s0.loss_cls": 0.28283, "s0.acc": 92.68652, "s0.loss_bbox": 0.12881, "s1.loss_cls": 0.07403, "s1.acc": 96.70898, "s1.loss_bbox": 0.04986, "s2.loss_cls": 0.0211, "s2.acc": 98.48828, "s2.loss_bbox": 0.00854, "loss": 0.6542, "time": 2.08029}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.002, "memory": 17833, "data_time": 0.01202, "loss_rpn_cls": 0.05754, "loss_rpn_bbox": 0.0348, "s0.loss_cls": 0.29988, "s0.acc": 92.51855, "s0.loss_bbox": 0.14094, "s1.loss_cls": 0.0736, "s1.acc": 96.86621, "s1.loss_bbox": 0.04784, "s2.loss_cls": 0.02084, "s2.acc": 98.54102, "s2.loss_bbox": 0.0086, "loss": 0.68404, "time": 2.0867}
{"mode": "val", "epoch": 1, "iter": 448, "lr": 0.002, "bbox_mAP": 0.066, "bbox_mAP_50": 0.145, "bbox_mAP_75": 0.051, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.008, "bbox_mAP_l": 0.082, "bbox_mAP_copypaste": "0.066 0.145 0.051 0.000 0.008 0.082"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.002, "memory": 17833, "data_time": 0.06017, "loss_rpn_cls": 0.04498, "loss_rpn_bbox": 0.03023, "s0.loss_cls": 0.27962, "s0.acc": 92.82617, "s0.loss_bbox": 0.12689, "s1.loss_cls": 0.06926, "s1.acc": 96.95215, "s1.loss_bbox": 0.04669, "s2.loss_cls": 0.01881, "s2.acc": 98.61914, "s2.loss_bbox": 0.00822, "loss": 0.62471, "time": 2.13834}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.002, "memory": 17833, "data_time": 0.01131, "loss_rpn_cls": 0.07342, "loss_rpn_bbox": 0.04127, "s0.loss_cls": 0.31088, "s0.acc": 92.07422, "s0.loss_bbox": 0.14412, "s1.loss_cls": 0.07931, "s1.acc": 96.46973, "s1.loss_bbox": 0.05174, "s2.loss_cls": 0.02274, "s2.acc": 98.32129, "s2.loss_bbox": 0.00977, "loss": 0.73325, "time": 2.08871}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.002, "memory": 17833, "data_time": 0.01157, "loss_rpn_cls": 0.05261, "loss_rpn_bbox": 0.03551, "s0.loss_cls": 0.30651, "s0.acc": 92.20215, "s0.loss_bbox": 0.13757, "s1.loss_cls": 0.07521, "s1.acc": 96.68848, "s1.loss_bbox": 0.04912, "s2.loss_cls": 0.02034, "s2.acc": 98.52734, "s2.loss_bbox": 0.00852, "loss": 0.6854, "time": 2.09191}
