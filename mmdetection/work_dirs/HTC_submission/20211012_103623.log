2021-10-12 10:36:23,895 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]
CUDA available: True
GPU 0: Tesla V100-PCIE-32GB
CUDA_HOME: None
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.5.3
MMCV: 1.3.14
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.0
MMDetection: 2.17.0+044cccd
------------------------------------------------------------

2021-10-12 10:36:24,452 - mmdet - INFO - Distributed training: False
2021-10-12 10:36:24,988 - mmdet - INFO - Config:
dataset_type = 'CocoDataset'
data_root = '/opt/ml/detection/dataset/'
classes = [
    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',
    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
]
img_norm_cfg = dict(mean=[0, 0, 0], std=[255.0, 255.0, 255.0], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='Resize',
        img_scale=(1024, 1024),
        keep_ratio=True,
        multiscale_mode='value'),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(type='CutOut', n_holes=10, cutout_shape=(15, 15)),
    dict(type='BrightnessTransform', level=2, prob=0.3),
    dict(type='RandomAffine'),
    dict(
        type='Normalize',
        mean=[0, 0, 0],
        std=[255.0, 255.0, 255.0],
        to_rgb=True),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1024, 1024),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[0, 0, 0],
                std=[255.0, 255.0, 255.0],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/train.json',
        img_prefix='/opt/ml/detection/dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='Resize',
                img_scale=(1024, 1024),
                keep_ratio=True,
                multiscale_mode='value'),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(type='CutOut', n_holes=10, cutout_shape=(15, 15)),
            dict(type='BrightnessTransform', level=2, prob=0.3),
            dict(type='RandomAffine'),
            dict(
                type='Normalize',
                mean=[0, 0, 0],
                std=[255.0, 255.0, 255.0],
                to_rgb=True),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/val_kfold1.json',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        img_prefix='/opt/ml/detection/dataset/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1024, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[0, 0, 0],
                        std=[255.0, 255.0, 255.0],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/test.json',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        img_prefix='/opt/ml/detection/dataset/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1024, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[0, 0, 0],
                        std=[255.0, 255.0, 255.0],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP_50')
checkpoint_config = dict(interval=100)
log_config = dict(
    interval=50,
    hooks=[
        dict(type='TextLoggerHook'),
        dict(type='WandbLoggerHook', init_kwargs=dict(project='mmdetection'))
    ])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
optimizer = dict(type='SGD', lr=0.002, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='CosineAnnealing',
    warmup='linear',
    warmup_iters=1000,
    warmup_ratio=0.01,
    min_lr=1e-06)
runner = dict(type='EpochBasedRunner', max_epochs=50)
model = dict(
    type='HybridTaskCascade',
    backbone=dict(
        type='ResNeXt',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(
            type='Pretrained', checkpoint='open-mmlab://resnext101_64x4d'),
        groups=64,
        base_width=4),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='HybridTaskCascadeRoIHead',
        interleaved=True,
        mask_info_flow=False,
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))
        ]),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.001,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100,
            mask_thr_binary=0.5)))
work_dir = './work_dirs/HTC_submission'
gpu_ids = range(0, 1)

2021-10-12 10:36:24,989 - mmdet - INFO - Set random seed to 2021, deterministic: True
2021-10-12 10:36:26,551 - mmdet - INFO - initialize ResNeXt with init_cfg {'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnext101_64x4d'}
2021-10-12 10:36:26,850 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2021-10-12 10:36:26,877 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2021-10-12 10:36:26,885 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-12 10:36:27,205 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-12 10:36:27,527 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.conv1.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.conv2.weight - torch.Size([256, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.conv3.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.conv1.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.conv2.weight - torch.Size([256, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.conv3.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.conv1.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.conv2.weight - torch.Size([256, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.conv3.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.conv1.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.conv2.weight - torch.Size([512, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.conv3.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.conv1.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.conv2.weight - torch.Size([512, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.conv3.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.conv1.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.conv2.weight - torch.Size([512, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.conv3.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.conv1.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.conv2.weight - torch.Size([512, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.conv3.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.conv1.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.conv1.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.conv2.weight - torch.Size([2048, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn2.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn2.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.conv3.weight - torch.Size([2048, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.conv1.weight - torch.Size([2048, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.conv2.weight - torch.Size([2048, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn2.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn2.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.conv3.weight - torch.Size([2048, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.conv1.weight - torch.Size([2048, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.conv2.weight - torch.Size([2048, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn2.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn2.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.conv3.weight - torch.Size([2048, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 
2021-10-12 10:36:31,506 - mmdet - INFO - Start running, host: root@00a46a6c3ac0, work_dir: /opt/ml/detection/object-detection-level2-cv-01/work_dirs/HTC_submission
2021-10-12 10:36:31,506 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_run:
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
2021-10-12 10:36:31,507 - mmdet - INFO - workflow: [('train', 1)], max: 50 epochs
2021-10-12 10:38:24,711 - mmdet - INFO - Epoch [1][50/1221]	lr: 1.170e-04, eta: 1 day, 12:05:46, time: 2.130, data_time: 0.058, memory: 17833, loss_rpn_cls: 0.6573, loss_rpn_bbox: 0.0485, s0.loss_cls: 0.4532, s0.acc: 90.4844, s0.loss_bbox: 0.0673, s1.loss_cls: 0.3256, s1.acc: 78.4131, s1.loss_bbox: 0.0193, s2.loss_cls: 0.2864, s2.acc: 65.8145, s2.loss_bbox: 0.0073, loss: 1.8648
2021-10-12 10:40:08,648 - mmdet - INFO - Epoch [1][100/1221]	lr: 2.160e-04, eta: 1 day, 11:37:49, time: 2.079, data_time: 0.011, memory: 17833, loss_rpn_cls: 0.3545, loss_rpn_bbox: 0.0468, s0.loss_cls: 0.2578, s0.acc: 95.9785, s0.loss_bbox: 0.1120, s1.loss_cls: 0.0767, s1.acc: 98.1006, s1.loss_bbox: 0.0323, s2.loss_cls: 0.0281, s2.acc: 98.8076, s2.loss_bbox: 0.0091, loss: 0.9173
2021-10-12 10:41:52,418 - mmdet - INFO - Epoch [1][150/1221]	lr: 3.150e-04, eta: 1 day, 11:26:12, time: 2.075, data_time: 0.010, memory: 17833, loss_rpn_cls: 0.1367, loss_rpn_bbox: 0.0413, s0.loss_cls: 0.2760, s0.acc: 95.0410, s0.loss_bbox: 0.1295, s1.loss_cls: 0.0758, s1.acc: 97.8662, s1.loss_bbox: 0.0361, s2.loss_cls: 0.0245, s2.acc: 98.8506, s2.loss_bbox: 0.0070, loss: 0.7269
2021-10-12 10:43:35,904 - mmdet - INFO - Epoch [1][200/1221]	lr: 4.140e-04, eta: 1 day, 11:18:06, time: 2.070, data_time: 0.010, memory: 17833, loss_rpn_cls: 0.1216, loss_rpn_bbox: 0.0399, s0.loss_cls: 0.2588, s0.acc: 95.0459, s0.loss_bbox: 0.1199, s1.loss_cls: 0.0678, s1.acc: 97.8799, s1.loss_bbox: 0.0336, s2.loss_cls: 0.0224, s2.acc: 98.8438, s2.loss_bbox: 0.0055, loss: 0.6695
2021-10-12 10:45:20,052 - mmdet - INFO - Epoch [1][250/1221]	lr: 5.130e-04, eta: 1 day, 11:15:14, time: 2.083, data_time: 0.011, memory: 17833, loss_rpn_cls: 0.1230, loss_rpn_bbox: 0.0468, s0.loss_cls: 0.2387, s0.acc: 95.1924, s0.loss_bbox: 0.1074, s1.loss_cls: 0.0652, s1.acc: 97.8984, s1.loss_bbox: 0.0318, s2.loss_cls: 0.0220, s2.acc: 98.8096, s2.loss_bbox: 0.0052, loss: 0.6402
2021-10-12 10:47:03,919 - mmdet - INFO - Epoch [1][300/1221]	lr: 6.120e-04, eta: 1 day, 11:11:47, time: 2.077, data_time: 0.011, memory: 17833, loss_rpn_cls: 0.1117, loss_rpn_bbox: 0.0417, s0.loss_cls: 0.2424, s0.acc: 95.1826, s0.loss_bbox: 0.1063, s1.loss_cls: 0.0670, s1.acc: 97.8105, s1.loss_bbox: 0.0323, s2.loss_cls: 0.0223, s2.acc: 98.7783, s2.loss_bbox: 0.0048, loss: 0.6285
2021-10-12 10:48:47,691 - mmdet - INFO - Epoch [1][350/1221]	lr: 7.110e-04, eta: 1 day, 11:08:34, time: 2.075, data_time: 0.010, memory: 17833, loss_rpn_cls: 0.1110, loss_rpn_bbox: 0.0418, s0.loss_cls: 0.2578, s0.acc: 94.7139, s0.loss_bbox: 0.1133, s1.loss_cls: 0.0687, s1.acc: 97.6729, s1.loss_bbox: 0.0351, s2.loss_cls: 0.0225, s2.acc: 98.7207, s2.loss_bbox: 0.0055, loss: 0.6558
2021-10-12 10:50:31,865 - mmdet - INFO - Epoch [1][400/1221]	lr: 8.100e-04, eta: 1 day, 11:06:44, time: 2.084, data_time: 0.011, memory: 17833, loss_rpn_cls: 0.1086, loss_rpn_bbox: 0.0372, s0.loss_cls: 0.2608, s0.acc: 94.8662, s0.loss_bbox: 0.1092, s1.loss_cls: 0.0711, s1.acc: 97.6523, s1.loss_bbox: 0.0344, s2.loss_cls: 0.0233, s2.acc: 98.6875, s2.loss_bbox: 0.0057, loss: 0.6502
2021-10-12 10:52:15,563 - mmdet - INFO - Epoch [1][450/1221]	lr: 9.090e-04, eta: 1 day, 11:03:51, time: 2.074, data_time: 0.010, memory: 17833, loss_rpn_cls: 0.0970, loss_rpn_bbox: 0.0468, s0.loss_cls: 0.2784, s0.acc: 94.0146, s0.loss_bbox: 0.1268, s1.loss_cls: 0.0753, s1.acc: 97.3379, s1.loss_bbox: 0.0423, s2.loss_cls: 0.0236, s2.acc: 98.6377, s2.loss_bbox: 0.0069, loss: 0.6971
2021-10-12 10:53:59,707 - mmdet - INFO - Epoch [1][500/1221]	lr: 1.008e-03, eta: 1 day, 11:02:06, time: 2.083, data_time: 0.011, memory: 17833, loss_rpn_cls: 0.0870, loss_rpn_bbox: 0.0426, s0.loss_cls: 0.2833, s0.acc: 93.8545, s0.loss_bbox: 0.1270, s1.loss_cls: 0.0743, s1.acc: 97.3809, s1.loss_bbox: 0.0406, s2.loss_cls: 0.0224, s2.acc: 98.6943, s2.loss_bbox: 0.0063, loss: 0.6835
2021-10-12 10:55:44,326 - mmdet - INFO - Epoch [1][550/1221]	lr: 1.107e-03, eta: 1 day, 11:01:13, time: 2.092, data_time: 0.011, memory: 17833, loss_rpn_cls: 0.1039, loss_rpn_bbox: 0.0439, s0.loss_cls: 0.2869, s0.acc: 93.5684, s0.loss_bbox: 0.1295, s1.loss_cls: 0.0761, s1.acc: 97.1982, s1.loss_bbox: 0.0433, s2.loss_cls: 0.0234, s2.acc: 98.6143, s2.loss_bbox: 0.0064, loss: 0.7135
2021-10-12 10:57:28,393 - mmdet - INFO - Epoch [1][600/1221]	lr: 1.206e-03, eta: 1 day, 10:59:16, time: 2.081, data_time: 0.011, memory: 17833, loss_rpn_cls: 0.0838, loss_rpn_bbox: 0.0435, s0.loss_cls: 0.2839, s0.acc: 93.3027, s0.loss_bbox: 0.1337, s1.loss_cls: 0.0761, s1.acc: 97.1182, s1.loss_bbox: 0.0436, s2.loss_cls: 0.0236, s2.acc: 98.5527, s2.loss_bbox: 0.0080, loss: 0.6963
2021-10-12 10:59:12,450 - mmdet - INFO - Epoch [1][650/1221]	lr: 1.305e-03, eta: 1 day, 10:57:20, time: 2.081, data_time: 0.011, memory: 17833, loss_rpn_cls: 0.0733, loss_rpn_bbox: 0.0370, s0.loss_cls: 0.2917, s0.acc: 93.6494, s0.loss_bbox: 0.1264, s1.loss_cls: 0.0723, s1.acc: 97.3447, s1.loss_bbox: 0.0394, s2.loss_cls: 0.0221, s2.acc: 98.6855, s2.loss_bbox: 0.0068, loss: 0.6691
2021-10-12 11:00:56,197 - mmdet - INFO - Epoch [1][700/1221]	lr: 1.404e-03, eta: 1 day, 10:54:59, time: 2.075, data_time: 0.011, memory: 17833, loss_rpn_cls: 0.0803, loss_rpn_bbox: 0.0462, s0.loss_cls: 0.3195, s0.acc: 92.4092, s0.loss_bbox: 0.1529, s1.loss_cls: 0.0827, s1.acc: 96.7461, s1.loss_bbox: 0.0492, s2.loss_cls: 0.0253, s2.acc: 98.3916, s2.loss_bbox: 0.0083, loss: 0.7645
2021-10-12 11:02:40,397 - mmdet - INFO - Epoch [1][750/1221]	lr: 1.503e-03, eta: 1 day, 10:53:20, time: 2.084, data_time: 0.011, memory: 17833, loss_rpn_cls: 0.0728, loss_rpn_bbox: 0.0492, s0.loss_cls: 0.2824, s0.acc: 93.3672, s0.loss_bbox: 0.1314, s1.loss_cls: 0.0720, s1.acc: 97.2334, s1.loss_bbox: 0.0411, s2.loss_cls: 0.0218, s2.acc: 98.6133, s2.loss_bbox: 0.0070, loss: 0.6776
2021-10-12 11:04:25,154 - mmdet - INFO - Epoch [1][800/1221]	lr: 1.602e-03, eta: 1 day, 10:52:21, time: 2.095, data_time: 0.012, memory: 17833, loss_rpn_cls: 0.0847, loss_rpn_bbox: 0.0440, s0.loss_cls: 0.3051, s0.acc: 92.7822, s0.loss_bbox: 0.1392, s1.loss_cls: 0.0774, s1.acc: 96.9023, s1.loss_bbox: 0.0457, s2.loss_cls: 0.0233, s2.acc: 98.4932, s2.loss_bbox: 0.0075, loss: 0.7270
2021-10-12 11:06:09,684 - mmdet - INFO - Epoch [1][850/1221]	lr: 1.701e-03, eta: 1 day, 10:51:02, time: 2.091, data_time: 0.012, memory: 17833, loss_rpn_cls: 0.0555, loss_rpn_bbox: 0.0383, s0.loss_cls: 0.2732, s0.acc: 93.3789, s0.loss_bbox: 0.1282, s1.loss_cls: 0.0669, s1.acc: 97.2295, s1.loss_bbox: 0.0405, s2.loss_cls: 0.0204, s2.acc: 98.6240, s2.loss_bbox: 0.0073, loss: 0.6303
2021-10-12 11:07:54,482 - mmdet - INFO - Epoch [1][900/1221]	lr: 1.800e-03, eta: 1 day, 10:49:57, time: 2.096, data_time: 0.012, memory: 17833, loss_rpn_cls: 0.0670, loss_rpn_bbox: 0.0471, s0.loss_cls: 0.3066, s0.acc: 92.6279, s0.loss_bbox: 0.1393, s1.loss_cls: 0.0787, s1.acc: 96.7910, s1.loss_bbox: 0.0487, s2.loss_cls: 0.0225, s2.acc: 98.5088, s2.loss_bbox: 0.0080, loss: 0.7180
2021-10-12 11:09:38,396 - mmdet - INFO - Epoch [1][950/1221]	lr: 1.899e-03, eta: 1 day, 10:47:52, time: 2.078, data_time: 0.011, memory: 17833, loss_rpn_cls: 0.0778, loss_rpn_bbox: 0.0355, s0.loss_cls: 0.2997, s0.acc: 92.8184, s0.loss_bbox: 0.1442, s1.loss_cls: 0.0769, s1.acc: 96.8809, s1.loss_bbox: 0.0484, s2.loss_cls: 0.0222, s2.acc: 98.4971, s2.loss_bbox: 0.0084, loss: 0.7131
2021-10-12 11:11:22,489 - mmdet - INFO - Exp name: HTC_submission.py
2021-10-12 11:11:22,489 - mmdet - INFO - Epoch [1][1000/1221]	lr: 1.998e-03, eta: 1 day, 10:46:00, time: 2.082, data_time: 0.011, memory: 17833, loss_rpn_cls: 0.0574, loss_rpn_bbox: 0.0340, s0.loss_cls: 0.2731, s0.acc: 93.1025, s0.loss_bbox: 0.1277, s1.loss_cls: 0.0675, s1.acc: 97.0586, s1.loss_bbox: 0.0447, s2.loss_cls: 0.0190, s2.acc: 98.6328, s2.loss_bbox: 0.0080, loss: 0.6313
2021-10-12 11:13:06,672 - mmdet - INFO - Epoch [1][1050/1221]	lr: 2.000e-03, eta: 1 day, 10:44:14, time: 2.084, data_time: 0.011, memory: 17833, loss_rpn_cls: 0.0612, loss_rpn_bbox: 0.0364, s0.loss_cls: 0.2777, s0.acc: 93.1680, s0.loss_bbox: 0.1277, s1.loss_cls: 0.0695, s1.acc: 97.0928, s1.loss_bbox: 0.0425, s2.loss_cls: 0.0202, s2.acc: 98.5996, s2.loss_bbox: 0.0075, loss: 0.6426
2021-10-12 11:14:50,611 - mmdet - INFO - Epoch [1][1100/1221]	lr: 2.000e-03, eta: 1 day, 10:42:15, time: 2.079, data_time: 0.011, memory: 17833, loss_rpn_cls: 0.0550, loss_rpn_bbox: 0.0351, s0.loss_cls: 0.3000, s0.acc: 92.4365, s0.loss_bbox: 0.1377, s1.loss_cls: 0.0781, s1.acc: 96.6338, s1.loss_bbox: 0.0502, s2.loss_cls: 0.0226, s2.acc: 98.3994, s2.loss_bbox: 0.0088, loss: 0.6876
2021-10-12 11:16:34,626 - mmdet - INFO - Epoch [1][1150/1221]	lr: 2.000e-03, eta: 1 day, 10:40:21, time: 2.080, data_time: 0.012, memory: 17833, loss_rpn_cls: 0.0542, loss_rpn_bbox: 0.0348, s0.loss_cls: 0.2828, s0.acc: 92.6865, s0.loss_bbox: 0.1288, s1.loss_cls: 0.0740, s1.acc: 96.7090, s1.loss_bbox: 0.0499, s2.loss_cls: 0.0211, s2.acc: 98.4883, s2.loss_bbox: 0.0085, loss: 0.6542
2021-10-12 11:18:18,961 - mmdet - INFO - Epoch [1][1200/1221]	lr: 2.000e-03, eta: 1 day, 10:38:44, time: 2.087, data_time: 0.012, memory: 17833, loss_rpn_cls: 0.0575, loss_rpn_bbox: 0.0348, s0.loss_cls: 0.2999, s0.acc: 92.5186, s0.loss_bbox: 0.1409, s1.loss_cls: 0.0736, s1.acc: 96.8662, s1.loss_bbox: 0.0478, s2.loss_cls: 0.0208, s2.acc: 98.5410, s2.loss_bbox: 0.0086, loss: 0.6840
2021-10-12 11:20:20,967 - mmdet - INFO - Evaluating bbox...
2021-10-12 11:20:28,095 - mmdet - INFO - Now best checkpoint is saved as best_bbox_mAP_50_epoch_1.pth.
2021-10-12 11:20:28,095 - mmdet - INFO - Best bbox_mAP_50 is 0.1450 at 1 epoch.
2021-10-12 11:20:28,106 - mmdet - INFO - Exp name: HTC_submission.py
2021-10-12 11:20:28,107 - mmdet - INFO - Epoch(val) [1][448]	bbox_mAP: 0.0660, bbox_mAP_50: 0.1450, bbox_mAP_75: 0.0510, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0080, bbox_mAP_l: 0.0820, bbox_mAP_copypaste: 0.066 0.145 0.051 0.000 0.008 0.082
2021-10-12 11:22:15,042 - mmdet - INFO - Epoch [2][50/1221]	lr: 1.998e-03, eta: 1 day, 10:04:06, time: 2.138, data_time: 0.060, memory: 17833, loss_rpn_cls: 0.0450, loss_rpn_bbox: 0.0302, s0.loss_cls: 0.2796, s0.acc: 92.8262, s0.loss_bbox: 0.1269, s1.loss_cls: 0.0693, s1.acc: 96.9521, s1.loss_bbox: 0.0467, s2.loss_cls: 0.0188, s2.acc: 98.6191, s2.loss_bbox: 0.0082, loss: 0.6247
2021-10-12 11:23:59,478 - mmdet - INFO - Epoch [2][100/1221]	lr: 1.998e-03, eta: 1 day, 10:03:47, time: 2.089, data_time: 0.011, memory: 17833, loss_rpn_cls: 0.0734, loss_rpn_bbox: 0.0413, s0.loss_cls: 0.3109, s0.acc: 92.0742, s0.loss_bbox: 0.1441, s1.loss_cls: 0.0793, s1.acc: 96.4697, s1.loss_bbox: 0.0517, s2.loss_cls: 0.0227, s2.acc: 98.3213, s2.loss_bbox: 0.0098, loss: 0.7332
2021-10-12 11:25:44,075 - mmdet - INFO - Epoch [2][150/1221]	lr: 1.998e-03, eta: 1 day, 10:03:29, time: 2.092, data_time: 0.012, memory: 17833, loss_rpn_cls: 0.0526, loss_rpn_bbox: 0.0355, s0.loss_cls: 0.3065, s0.acc: 92.2021, s0.loss_bbox: 0.1376, s1.loss_cls: 0.0752, s1.acc: 96.6885, s1.loss_bbox: 0.0491, s2.loss_cls: 0.0203, s2.acc: 98.5273, s2.loss_bbox: 0.0085, loss: 0.6854
