{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.3\nMMCV: 1.3.14\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.17.0+044cccd", "config": "dataset_type = 'CocoDataset'\ndata_root = '/opt/ml/detection/dataset/'\nclasses = [\n    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\nimg_norm_cfg = dict(mean=[0, 0, 0], std=[255.0, 255.0, 255.0], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=[(1024, 1024), (768, 768), (512, 512)],\n        keep_ratio=True,\n        multiscale_mode='value'),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(type='CutOut', n_holes=10, cutout_shape=(15, 15)),\n    dict(type='BrightnessTransform', level=2, prob=0.3),\n    dict(type='RandomAffine'),\n    dict(\n        type='Normalize',\n        mean=[0, 0, 0],\n        std=[255.0, 255.0, 255.0],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/train.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=[(1024, 1024), (768, 768), (512, 512)],\n                keep_ratio=True,\n                multiscale_mode='value'),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(type='CutOut', n_holes=10, cutout_shape=(15, 15)),\n            dict(type='BrightnessTransform', level=2, prob=0.3),\n            dict(type='RandomAffine'),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/val_kfold1.json',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/test.json',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP_50')\ncheckpoint_config = dict(interval=100)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(type='WandbLoggerHook', init_kwargs=dict(project='mmdetection'))\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\noptimizer = dict(type='SGD', lr=0.002, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='CosineAnnealing',\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=0.01,\n    min_lr=1e-06)\nrunner = dict(type='EpochBasedRunner', max_epochs=50)\nmodel = dict(\n    type='HybridTaskCascade',\n    backbone=dict(\n        type='ResNeXt',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(\n            type='Pretrained', checkpoint='open-mmlab://resnext101_64x4d'),\n        groups=64,\n        base_width=4),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='HybridTaskCascadeRoIHead',\n        interleaved=True,\n        mask_info_flow=False,\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.001,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\nwork_dir = './work_dirs/HTC_submission'\ngpu_ids = range(0, 1)\n", "seed": 2021, "exp_name": "HTC_submission.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00012, "memory": 17834, "data_time": 0.05528, "loss_rpn_cls": 0.65308, "loss_rpn_bbox": 0.04475, "s0.loss_cls": 0.48101, "s0.acc": 89.80762, "s0.loss_bbox": 0.07886, "s1.loss_cls": 0.32321, "s1.acc": 78.71582, "s1.loss_bbox": 0.02391, "s2.loss_cls": 0.2869, "s2.acc": 66.32715, "s2.loss_bbox": 0.00817, "loss": 1.89988, "time": 1.92508}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00022, "memory": 17835, "data_time": 0.00984, "loss_rpn_cls": 0.37006, "loss_rpn_bbox": 0.0448, "s0.loss_cls": 0.26321, "s0.acc": 95.94824, "s0.loss_bbox": 0.10914, "s1.loss_cls": 0.08062, "s1.acc": 98.01855, "s1.loss_bbox": 0.03293, "s2.loss_cls": 0.0284, "s2.acc": 98.78906, "s2.loss_bbox": 0.0096, "loss": 0.93876, "time": 1.96938}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00032, "memory": 17835, "data_time": 0.00988, "loss_rpn_cls": 0.15192, "loss_rpn_bbox": 0.04011, "s0.loss_cls": 0.28006, "s0.acc": 94.96484, "s0.loss_bbox": 0.1303, "s1.loss_cls": 0.07533, "s1.acc": 97.81836, "s1.loss_bbox": 0.03622, "s2.loss_cls": 0.0241, "s2.acc": 98.83203, "s2.loss_bbox": 0.00692, "loss": 0.74497, "time": 1.91642}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00041, "memory": 17835, "data_time": 0.00962, "loss_rpn_cls": 0.13037, "loss_rpn_bbox": 0.03829, "s0.loss_cls": 0.27827, "s0.acc": 94.7168, "s0.loss_bbox": 0.1265, "s1.loss_cls": 0.0729, "s1.acc": 97.71777, "s1.loss_bbox": 0.03769, "s2.loss_cls": 0.02342, "s2.acc": 98.78613, "s2.loss_bbox": 0.00637, "loss": 0.7138, "time": 1.84787}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00051, "memory": 17835, "data_time": 0.00993, "loss_rpn_cls": 0.12631, "loss_rpn_bbox": 0.04035, "s0.loss_cls": 0.26337, "s0.acc": 94.74219, "s0.loss_bbox": 0.11676, "s1.loss_cls": 0.07059, "s1.acc": 97.70703, "s1.loss_bbox": 0.03639, "s2.loss_cls": 0.023, "s2.acc": 98.76465, "s2.loss_bbox": 0.0059, "loss": 0.68269, "time": 1.89055}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00061, "memory": 17835, "data_time": 0.0097, "loss_rpn_cls": 0.13878, "loss_rpn_bbox": 0.04465, "s0.loss_cls": 0.27998, "s0.acc": 94.3125, "s0.loss_bbox": 0.12466, "s1.loss_cls": 0.07515, "s1.acc": 97.54004, "s1.loss_bbox": 0.03819, "s2.loss_cls": 0.02388, "s2.acc": 98.69043, "s2.loss_bbox": 0.006, "loss": 0.73129, "time": 1.86072}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00071, "memory": 17835, "data_time": 0.0095, "loss_rpn_cls": 0.11728, "loss_rpn_bbox": 0.04084, "s0.loss_cls": 0.26237, "s0.acc": 94.68555, "s0.loss_bbox": 0.11708, "s1.loss_cls": 0.07126, "s1.acc": 97.58691, "s1.loss_bbox": 0.03727, "s2.loss_cls": 0.02251, "s2.acc": 98.71191, "s2.loss_bbox": 0.00574, "loss": 0.67435, "time": 1.8347}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00081, "memory": 17835, "data_time": 0.01015, "loss_rpn_cls": 0.12669, "loss_rpn_bbox": 0.04047, "s0.loss_cls": 0.27583, "s0.acc": 94.34961, "s0.loss_bbox": 0.12036, "s1.loss_cls": 0.07496, "s1.acc": 97.46484, "s1.loss_bbox": 0.03846, "s2.loss_cls": 0.02414, "s2.acc": 98.63574, "s2.loss_bbox": 0.0063, "loss": 0.70721, "time": 1.90501}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00091, "memory": 17835, "data_time": 0.00983, "loss_rpn_cls": 0.10996, "loss_rpn_bbox": 0.0427, "s0.loss_cls": 0.28802, "s0.acc": 94.08789, "s0.loss_bbox": 0.12853, "s1.loss_cls": 0.07848, "s1.acc": 97.33789, "s1.loss_bbox": 0.04258, "s2.loss_cls": 0.02369, "s2.acc": 98.6582, "s2.loss_bbox": 0.00647, "loss": 0.72044, "time": 1.91539}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00101, "memory": 17835, "data_time": 0.01029, "loss_rpn_cls": 0.10902, "loss_rpn_bbox": 0.0378, "s0.loss_cls": 0.2551, "s0.acc": 94.74316, "s0.loss_bbox": 0.10877, "s1.loss_cls": 0.07017, "s1.acc": 97.62207, "s1.loss_bbox": 0.03514, "s2.loss_cls": 0.02242, "s2.acc": 98.69629, "s2.loss_bbox": 0.00617, "loss": 0.64459, "time": 1.9161}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00111, "memory": 17835, "data_time": 0.0104, "loss_rpn_cls": 0.11432, "loss_rpn_bbox": 0.04087, "s0.loss_cls": 0.25039, "s0.acc": 94.57617, "s0.loss_bbox": 0.11119, "s1.loss_cls": 0.06859, "s1.acc": 97.53418, "s1.loss_bbox": 0.0358, "s2.loss_cls": 0.02268, "s2.acc": 98.62012, "s2.loss_bbox": 0.0062, "loss": 0.65004, "time": 1.96681}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00121, "memory": 17835, "data_time": 0.01017, "loss_rpn_cls": 0.09881, "loss_rpn_bbox": 0.03755, "s0.loss_cls": 0.27816, "s0.acc": 93.64648, "s0.loss_bbox": 0.12572, "s1.loss_cls": 0.07426, "s1.acc": 97.18066, "s1.loss_bbox": 0.04315, "s2.loss_cls": 0.02384, "s2.acc": 98.5625, "s2.loss_bbox": 0.00787, "loss": 0.68936, "time": 1.95126}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00131, "memory": 17835, "data_time": 0.01008, "loss_rpn_cls": 0.0916, "loss_rpn_bbox": 0.03541, "s0.loss_cls": 0.27725, "s0.acc": 93.94336, "s0.loss_bbox": 0.11913, "s1.loss_cls": 0.07233, "s1.acc": 97.38672, "s1.loss_bbox": 0.03867, "s2.loss_cls": 0.02233, "s2.acc": 98.69727, "s2.loss_bbox": 0.00644, "loss": 0.66315, "time": 1.90952}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.0014, "memory": 17835, "data_time": 0.01053, "loss_rpn_cls": 0.10166, "loss_rpn_bbox": 0.04592, "s0.loss_cls": 0.32115, "s0.acc": 92.49023, "s0.loss_bbox": 0.15458, "s1.loss_cls": 0.08667, "s1.acc": 96.65625, "s1.loss_bbox": 0.05224, "s2.loss_cls": 0.02607, "s2.acc": 98.35938, "s2.loss_bbox": 0.00882, "loss": 0.79711, "time": 1.94797}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.0015, "memory": 17835, "data_time": 0.01024, "loss_rpn_cls": 0.101, "loss_rpn_bbox": 0.05089, "s0.loss_cls": 0.28779, "s0.acc": 93.47754, "s0.loss_bbox": 0.13304, "s1.loss_cls": 0.07437, "s1.acc": 97.15137, "s1.loss_bbox": 0.04262, "s2.loss_cls": 0.02275, "s2.acc": 98.59668, "s2.loss_bbox": 0.00688, "loss": 0.71935, "time": 1.86504}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.0016, "memory": 17835, "data_time": 0.01004, "loss_rpn_cls": 0.09261, "loss_rpn_bbox": 0.04364, "s0.loss_cls": 0.31121, "s0.acc": 92.47852, "s0.loss_bbox": 0.14699, "s1.loss_cls": 0.07915, "s1.acc": 96.84082, "s1.loss_bbox": 0.04753, "s2.loss_cls": 0.02449, "s2.acc": 98.41699, "s2.loss_bbox": 0.00858, "loss": 0.75421, "time": 1.86284}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.0017, "memory": 17835, "data_time": 0.01024, "loss_rpn_cls": 0.08563, "loss_rpn_bbox": 0.03811, "s0.loss_cls": 0.29476, "s0.acc": 92.83496, "s0.loss_bbox": 0.13973, "s1.loss_cls": 0.07526, "s1.acc": 96.90723, "s1.loss_bbox": 0.0472, "s2.loss_cls": 0.02203, "s2.acc": 98.53516, "s2.loss_bbox": 0.00856, "loss": 0.71128, "time": 1.89158}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.0018, "memory": 17835, "data_time": 0.01042, "loss_rpn_cls": 0.08354, "loss_rpn_bbox": 0.04156, "s0.loss_cls": 0.31258, "s0.acc": 92.52051, "s0.loss_bbox": 0.14258, "s1.loss_cls": 0.08037, "s1.acc": 96.68945, "s1.loss_bbox": 0.049, "s2.loss_cls": 0.0238, "s2.acc": 98.41895, "s2.loss_bbox": 0.00904, "loss": 0.74247, "time": 1.97163}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.0019, "memory": 17835, "data_time": 0.01108, "loss_rpn_cls": 0.08039, "loss_rpn_bbox": 0.03851, "s0.loss_cls": 0.30076, "s0.acc": 92.71777, "s0.loss_bbox": 0.13574, "s1.loss_cls": 0.07583, "s1.acc": 96.79688, "s1.loss_bbox": 0.04741, "s2.loss_cls": 0.02229, "s2.acc": 98.49707, "s2.loss_bbox": 0.00827, "loss": 0.70921, "time": 2.02126}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.002, "memory": 17835, "data_time": 0.01094, "loss_rpn_cls": 0.06883, "loss_rpn_bbox": 0.03074, "s0.loss_cls": 0.26766, "s0.acc": 93.42188, "s0.loss_bbox": 0.12208, "s1.loss_cls": 0.06457, "s1.acc": 97.31152, "s1.loss_bbox": 0.03878, "s2.loss_cls": 0.01943, "s2.acc": 98.67676, "s2.loss_bbox": 0.00779, "loss": 0.61987, "time": 1.95755}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.002, "memory": 17835, "data_time": 0.0103, "loss_rpn_cls": 0.0682, "loss_rpn_bbox": 0.03539, "s0.loss_cls": 0.29676, "s0.acc": 92.83301, "s0.loss_bbox": 0.13222, "s1.loss_cls": 0.07679, "s1.acc": 96.88184, "s1.loss_bbox": 0.04748, "s2.loss_cls": 0.02187, "s2.acc": 98.50977, "s2.loss_bbox": 0.00844, "loss": 0.68714, "time": 1.79644}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.002, "memory": 17835, "data_time": 0.01062, "loss_rpn_cls": 0.07239, "loss_rpn_bbox": 0.03668, "s0.loss_cls": 0.28372, "s0.acc": 92.84863, "s0.loss_bbox": 0.12914, "s1.loss_cls": 0.07411, "s1.acc": 96.83008, "s1.loss_bbox": 0.04716, "s2.loss_cls": 0.02169, "s2.acc": 98.43945, "s2.loss_bbox": 0.00817, "loss": 0.67307, "time": 1.97867}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.002, "memory": 17835, "data_time": 0.01065, "loss_rpn_cls": 0.06469, "loss_rpn_bbox": 0.03543, "s0.loss_cls": 0.28587, "s0.acc": 92.84473, "s0.loss_bbox": 0.12301, "s1.loss_cls": 0.07423, "s1.acc": 96.82812, "s1.loss_bbox": 0.04516, "s2.loss_cls": 0.02107, "s2.acc": 98.50488, "s2.loss_bbox": 0.00799, "loss": 0.65744, "time": 1.90367}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.002, "memory": 17835, "data_time": 0.01117, "loss_rpn_cls": 0.06028, "loss_rpn_bbox": 0.02918, "s0.loss_cls": 0.30948, "s0.acc": 92.20703, "s0.loss_bbox": 0.14129, "s1.loss_cls": 0.07802, "s1.acc": 96.61914, "s1.loss_bbox": 0.05149, "s2.loss_cls": 0.02194, "s2.acc": 98.42676, "s2.loss_bbox": 0.0097, "loss": 0.70138, "time": 1.95594}
{"mode": "val", "epoch": 1, "iter": 448, "lr": 0.002, "bbox_mAP": 0.063, "bbox_mAP_50": 0.136, "bbox_mAP_75": 0.051, "bbox_mAP_s": 0.007, "bbox_mAP_m": 0.012, "bbox_mAP_l": 0.077, "bbox_mAP_copypaste": "0.063 0.136 0.051 0.007 0.012 0.077"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.002, "memory": 17835, "data_time": 0.05695, "loss_rpn_cls": 0.05835, "loss_rpn_bbox": 0.02889, "s0.loss_cls": 0.28716, "s0.acc": 92.82129, "s0.loss_bbox": 0.12673, "s1.loss_cls": 0.07139, "s1.acc": 96.78711, "s1.loss_bbox": 0.04794, "s2.loss_cls": 0.01939, "s2.acc": 98.55566, "s2.loss_bbox": 0.00895, "loss": 0.6488, "time": 1.9421}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.002, "memory": 17835, "data_time": 0.01065, "loss_rpn_cls": 0.07706, "loss_rpn_bbox": 0.03806, "s0.loss_cls": 0.32626, "s0.acc": 91.76172, "s0.loss_bbox": 0.14508, "s1.loss_cls": 0.08306, "s1.acc": 96.34766, "s1.loss_bbox": 0.05361, "s2.loss_cls": 0.02391, "s2.acc": 98.26855, "s2.loss_bbox": 0.01029, "loss": 0.75735, "time": 1.98049}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.002, "memory": 17835, "data_time": 0.01117, "loss_rpn_cls": 0.06075, "loss_rpn_bbox": 0.03086, "s0.loss_cls": 0.3134, "s0.acc": 92.04395, "s0.loss_bbox": 0.13667, "s1.loss_cls": 0.07775, "s1.acc": 96.60352, "s1.loss_bbox": 0.05068, "s2.loss_cls": 0.02155, "s2.acc": 98.45117, "s2.loss_bbox": 0.00938, "loss": 0.70103, "time": 1.91824}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.002, "memory": 17835, "data_time": 0.01064, "loss_rpn_cls": 0.07083, "loss_rpn_bbox": 0.04703, "s0.loss_cls": 0.31621, "s0.acc": 91.7002, "s0.loss_bbox": 0.14971, "s1.loss_cls": 0.08329, "s1.acc": 96.20996, "s1.loss_bbox": 0.05663, "s2.loss_cls": 0.02343, "s2.acc": 98.21191, "s2.loss_bbox": 0.0097, "loss": 0.75682, "time": 1.85019}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.002, "memory": 17835, "data_time": 0.01102, "loss_rpn_cls": 0.0593, "loss_rpn_bbox": 0.03379, "s0.loss_cls": 0.26962, "s0.acc": 92.98047, "s0.loss_bbox": 0.11791, "s1.loss_cls": 0.07014, "s1.acc": 96.86133, "s1.loss_bbox": 0.04391, "s2.loss_cls": 0.02002, "s2.acc": 98.49609, "s2.loss_bbox": 0.00848, "loss": 0.62318, "time": 1.88829}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.002, "memory": 17835, "data_time": 0.01062, "loss_rpn_cls": 0.06917, "loss_rpn_bbox": 0.03593, "s0.loss_cls": 0.29133, "s0.acc": 92.33789, "s0.loss_bbox": 0.13498, "s1.loss_cls": 0.07934, "s1.acc": 96.37012, "s1.loss_bbox": 0.05322, "s2.loss_cls": 0.02245, "s2.acc": 98.29395, "s2.loss_bbox": 0.00979, "loss": 0.69621, "time": 1.86253}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.002, "memory": 17835, "data_time": 0.01094, "loss_rpn_cls": 0.06318, "loss_rpn_bbox": 0.03713, "s0.loss_cls": 0.30383, "s0.acc": 92.25977, "s0.loss_bbox": 0.12941, "s1.loss_cls": 0.07894, "s1.acc": 96.51562, "s1.loss_bbox": 0.04977, "s2.loss_cls": 0.02153, "s2.acc": 98.4248, "s2.loss_bbox": 0.00858, "loss": 0.69238, "time": 1.8355}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.002, "memory": 17835, "data_time": 0.0109, "loss_rpn_cls": 0.06043, "loss_rpn_bbox": 0.03371, "s0.loss_cls": 0.2819, "s0.acc": 92.85352, "s0.loss_bbox": 0.11872, "s1.loss_cls": 0.0718, "s1.acc": 96.81836, "s1.loss_bbox": 0.04346, "s2.loss_cls": 0.02017, "s2.acc": 98.50391, "s2.loss_bbox": 0.00819, "loss": 0.63838, "time": 1.90803}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.002, "memory": 17835, "data_time": 0.01082, "loss_rpn_cls": 0.06039, "loss_rpn_bbox": 0.03576, "s0.loss_cls": 0.30375, "s0.acc": 92.1377, "s0.loss_bbox": 0.138, "s1.loss_cls": 0.08299, "s1.acc": 96.18652, "s1.loss_bbox": 0.05824, "s2.loss_cls": 0.02297, "s2.acc": 98.19727, "s2.loss_bbox": 0.01133, "loss": 0.71342, "time": 1.91576}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.002, "memory": 17835, "data_time": 0.01085, "loss_rpn_cls": 0.06321, "loss_rpn_bbox": 0.03462, "s0.loss_cls": 0.26623, "s0.acc": 93.10645, "s0.loss_bbox": 0.11668, "s1.loss_cls": 0.06853, "s1.acc": 96.85254, "s1.loss_bbox": 0.04525, "s2.loss_cls": 0.01931, "s2.acc": 98.53711, "s2.loss_bbox": 0.00899, "loss": 0.62283, "time": 1.90739}
{"mode": "train", "epoch": 2, "iter": 550, "lr": 0.002, "memory": 17835, "data_time": 0.01101, "loss_rpn_cls": 0.06103, "loss_rpn_bbox": 0.03894, "s0.loss_cls": 0.29793, "s0.acc": 92.05566, "s0.loss_bbox": 0.14518, "s1.loss_cls": 0.0766, "s1.acc": 96.39941, "s1.loss_bbox": 0.05397, "s2.loss_cls": 0.02136, "s2.acc": 98.31836, "s2.loss_bbox": 0.00981, "loss": 0.70481, "time": 1.96881}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.002, "memory": 17835, "data_time": 0.01138, "loss_rpn_cls": 0.06315, "loss_rpn_bbox": 0.03417, "s0.loss_cls": 0.30848, "s0.acc": 92.04102, "s0.loss_bbox": 0.13006, "s1.loss_cls": 0.08313, "s1.acc": 96.16699, "s1.loss_bbox": 0.05488, "s2.loss_cls": 0.02216, "s2.acc": 98.29102, "s2.loss_bbox": 0.00996, "loss": 0.706, "time": 1.94377}
{"mode": "train", "epoch": 2, "iter": 650, "lr": 0.002, "memory": 17835, "data_time": 0.01103, "loss_rpn_cls": 0.07018, "loss_rpn_bbox": 0.03794, "s0.loss_cls": 0.2986, "s0.acc": 92.19824, "s0.loss_bbox": 0.13191, "s1.loss_cls": 0.08076, "s1.acc": 96.23047, "s1.loss_bbox": 0.05343, "s2.loss_cls": 0.02301, "s2.acc": 98.1875, "s2.loss_bbox": 0.01114, "loss": 0.70698, "time": 1.91903}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.002, "memory": 17835, "data_time": 0.01095, "loss_rpn_cls": 0.06232, "loss_rpn_bbox": 0.0345, "s0.loss_cls": 0.30486, "s0.acc": 91.97168, "s0.loss_bbox": 0.13376, "s1.loss_cls": 0.08178, "s1.acc": 96.21289, "s1.loss_bbox": 0.05322, "s2.loss_cls": 0.02289, "s2.acc": 98.25, "s2.loss_bbox": 0.01014, "loss": 0.70348, "time": 1.9474}
{"mode": "train", "epoch": 2, "iter": 750, "lr": 0.002, "memory": 17835, "data_time": 0.01089, "loss_rpn_cls": 0.07474, "loss_rpn_bbox": 0.04031, "s0.loss_cls": 0.29352, "s0.acc": 92.38379, "s0.loss_bbox": 0.13323, "s1.loss_cls": 0.07824, "s1.acc": 96.39258, "s1.loss_bbox": 0.05348, "s2.loss_cls": 0.02186, "s2.acc": 98.25977, "s2.loss_bbox": 0.01002, "loss": 0.70541, "time": 1.85755}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.002, "memory": 17835, "data_time": 0.01094, "loss_rpn_cls": 0.05902, "loss_rpn_bbox": 0.03663, "s0.loss_cls": 0.24946, "s0.acc": 93.21875, "s0.loss_bbox": 0.11147, "s1.loss_cls": 0.06741, "s1.acc": 96.7207, "s1.loss_bbox": 0.04607, "s2.loss_cls": 0.01863, "s2.acc": 98.49805, "s2.loss_bbox": 0.00871, "loss": 0.59739, "time": 1.8537}
{"mode": "train", "epoch": 2, "iter": 850, "lr": 0.002, "memory": 17835, "data_time": 0.0114, "loss_rpn_cls": 0.05526, "loss_rpn_bbox": 0.03118, "s0.loss_cls": 0.28489, "s0.acc": 92.32812, "s0.loss_bbox": 0.12539, "s1.loss_cls": 0.07604, "s1.acc": 96.41895, "s1.loss_bbox": 0.05132, "s2.loss_cls": 0.021, "s2.acc": 98.3457, "s2.loss_bbox": 0.01008, "loss": 0.65516, "time": 1.89753}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.002, "memory": 17835, "data_time": 0.01168, "loss_rpn_cls": 0.06688, "loss_rpn_bbox": 0.03905, "s0.loss_cls": 0.30222, "s0.acc": 92.08398, "s0.loss_bbox": 0.13186, "s1.loss_cls": 0.0814, "s1.acc": 96.23828, "s1.loss_bbox": 0.05458, "s2.loss_cls": 0.02325, "s2.acc": 98.17383, "s2.loss_bbox": 0.01062, "loss": 0.70987, "time": 1.96148}
{"mode": "train", "epoch": 2, "iter": 950, "lr": 0.002, "memory": 17835, "data_time": 0.01192, "loss_rpn_cls": 0.06064, "loss_rpn_bbox": 0.03932, "s0.loss_cls": 0.29283, "s0.acc": 92.15039, "s0.loss_bbox": 0.13162, "s1.loss_cls": 0.07775, "s1.acc": 96.25586, "s1.loss_bbox": 0.0549, "s2.loss_cls": 0.02186, "s2.acc": 98.21191, "s2.loss_bbox": 0.01075, "loss": 0.68967, "time": 2.03045}
{"mode": "train", "epoch": 2, "iter": 1000, "lr": 0.002, "memory": 17835, "data_time": 0.01173, "loss_rpn_cls": 0.06409, "loss_rpn_bbox": 0.03775, "s0.loss_cls": 0.28372, "s0.acc": 92.25098, "s0.loss_bbox": 0.1325, "s1.loss_cls": 0.07551, "s1.acc": 96.30664, "s1.loss_bbox": 0.05203, "s2.loss_cls": 0.02206, "s2.acc": 98.16699, "s2.loss_bbox": 0.01073, "loss": 0.67839, "time": 1.95946}
{"mode": "train", "epoch": 2, "iter": 1050, "lr": 0.002, "memory": 17835, "data_time": 0.01108, "loss_rpn_cls": 0.04818, "loss_rpn_bbox": 0.02668, "s0.loss_cls": 0.27292, "s0.acc": 92.54492, "s0.loss_bbox": 0.12301, "s1.loss_cls": 0.07083, "s1.acc": 96.53418, "s1.loss_bbox": 0.04894, "s2.loss_cls": 0.01927, "s2.acc": 98.40332, "s2.loss_bbox": 0.00976, "loss": 0.61958, "time": 1.80266}
{"mode": "train", "epoch": 2, "iter": 1100, "lr": 0.002, "memory": 17835, "data_time": 0.01238, "loss_rpn_cls": 0.05592, "loss_rpn_bbox": 0.03605, "s0.loss_cls": 0.29658, "s0.acc": 91.74414, "s0.loss_bbox": 0.13834, "s1.loss_cls": 0.08171, "s1.acc": 95.93164, "s1.loss_bbox": 0.05892, "s2.loss_cls": 0.02233, "s2.acc": 98.14746, "s2.loss_bbox": 0.01084, "loss": 0.70069, "time": 1.98427}
{"mode": "train", "epoch": 2, "iter": 1150, "lr": 0.002, "memory": 17835, "data_time": 0.01145, "loss_rpn_cls": 0.05237, "loss_rpn_bbox": 0.02642, "s0.loss_cls": 0.26516, "s0.acc": 92.83887, "s0.loss_bbox": 0.11785, "s1.loss_cls": 0.07005, "s1.acc": 96.62598, "s1.loss_bbox": 0.04738, "s2.loss_cls": 0.01947, "s2.acc": 98.41504, "s2.loss_bbox": 0.0093, "loss": 0.608, "time": 1.9161}
{"mode": "train", "epoch": 2, "iter": 1200, "lr": 0.002, "memory": 17835, "data_time": 0.01143, "loss_rpn_cls": 0.05977, "loss_rpn_bbox": 0.03771, "s0.loss_cls": 0.28747, "s0.acc": 92.05762, "s0.loss_bbox": 0.12743, "s1.loss_cls": 0.07711, "s1.acc": 96.21875, "s1.loss_bbox": 0.05292, "s2.loss_cls": 0.02174, "s2.acc": 98.21582, "s2.loss_bbox": 0.01065, "loss": 0.6748, "time": 1.94875}
{"mode": "val", "epoch": 2, "iter": 448, "lr": 0.002, "bbox_mAP": 0.112, "bbox_mAP_50": 0.22, "bbox_mAP_75": 0.096, "bbox_mAP_s": 0.007, "bbox_mAP_m": 0.028, "bbox_mAP_l": 0.136, "bbox_mAP_copypaste": "0.112 0.220 0.096 0.007 0.028 0.136"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00199, "memory": 17835, "data_time": 0.05771, "loss_rpn_cls": 0.05185, "loss_rpn_bbox": 0.03433, "s0.loss_cls": 0.27142, "s0.acc": 92.81445, "s0.loss_bbox": 0.1184, "s1.loss_cls": 0.07362, "s1.acc": 96.50488, "s1.loss_bbox": 0.04914, "s2.loss_cls": 0.02094, "s2.acc": 98.2998, "s2.loss_bbox": 0.01011, "loss": 0.6298, "time": 1.94083}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.00199, "memory": 17835, "data_time": 0.01126, "loss_rpn_cls": 0.05109, "loss_rpn_bbox": 0.03708, "s0.loss_cls": 0.28118, "s0.acc": 92.24707, "s0.loss_bbox": 0.1294, "s1.loss_cls": 0.07684, "s1.acc": 96.14453, "s1.loss_bbox": 0.05617, "s2.loss_cls": 0.02142, "s2.acc": 98.15137, "s2.loss_bbox": 0.01119, "loss": 0.66437, "time": 1.98263}
