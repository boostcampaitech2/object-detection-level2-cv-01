{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.3\nMMCV: 1.3.14\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.17.0+044cccd", "config": "dataset_type = 'CocoDataset'\ndata_root = '/opt/ml/detection/dataset/'\nclasses = [\n    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\nimg_norm_cfg = dict(mean=[0, 0, 0], std=[255.0, 255.0, 255.0], to_rgb=True)\ntrain_pipeline = [\n    dict(type='Mosaic', img_scale=(300, 300)),\n    dict(type='Resize', img_scale=(300, 300), keep_ratio=True)\n]\ntest_pipeline = [dict(img_scale=(300, 300))]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/train_kfold1.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(300, 300), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/val_kfold1.json',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(300, 300),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/test.json',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(300, 300),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP_50')\ncheckpoint_config = dict(interval=100)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(type='WandbLoggerHook', init_kwargs=dict(project='mmdetection'))\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\noptimizer = dict(type='SGD', lr=0.002, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='CosineAnnealing',\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=0.01,\n    min_lr=1e-06)\nrunner = dict(type='EpochBasedRunner', max_epochs=50)\nmodel = dict(\n    type='HybridTaskCascade',\n    backbone=dict(\n        type='ResNeXt',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(\n            type='Pretrained', checkpoint='open-mmlab://resnext101_64x4d'),\n        groups=64,\n        base_width=4),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='HybridTaskCascadeRoIHead',\n        interleaved=True,\n        mask_info_flow=False,\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.001,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\nwork_dir = './work_dirs/HTC_x101_64x4d_FPN_Mosaic'\ngpu_ids = range(0, 1)\n", "seed": 2021, "exp_name": "HTC_x101_64x4d_FPN_Mosaic.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00012, "memory": 3365, "data_time": 0.04819, "loss_rpn_cls": 0.65206, "loss_rpn_bbox": 0.04362, "s0.loss_cls": 0.57946, "s0.acc": 88.22461, "s0.loss_bbox": 0.10549, "s1.loss_cls": 0.31217, "s1.acc": 82.58594, "s1.loss_bbox": 0.03686, "s2.loss_cls": 0.24779, "s2.acc": 71.25781, "s2.loss_bbox": 0.0112, "loss": 1.98864, "time": 0.44222}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00022, "memory": 3365, "data_time": 0.00476, "loss_rpn_cls": 0.41587, "loss_rpn_bbox": 0.03669, "s0.loss_cls": 0.25952, "s0.acc": 95.40137, "s0.loss_bbox": 0.11747, "s1.loss_cls": 0.08355, "s1.acc": 97.83008, "s1.loss_bbox": 0.0337, "s2.loss_cls": 0.03168, "s2.acc": 98.60938, "s2.loss_bbox": 0.00825, "loss": 0.98672, "time": 0.39607}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00032, "memory": 3365, "data_time": 0.00474, "loss_rpn_cls": 0.18381, "loss_rpn_bbox": 0.03398, "s0.loss_cls": 0.29279, "s0.acc": 94.36914, "s0.loss_bbox": 0.1403, "s1.loss_cls": 0.08441, "s1.acc": 97.42188, "s1.loss_bbox": 0.043, "s2.loss_cls": 0.02796, "s2.acc": 98.58984, "s2.loss_bbox": 0.00799, "loss": 0.81423, "time": 0.40505}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00041, "memory": 3365, "data_time": 0.00468, "loss_rpn_cls": 0.19284, "loss_rpn_bbox": 0.04058, "s0.loss_cls": 0.3009, "s0.acc": 93.80957, "s0.loss_bbox": 0.13809, "s1.loss_cls": 0.08607, "s1.acc": 97.19531, "s1.loss_bbox": 0.04234, "s2.loss_cls": 0.02786, "s2.acc": 98.44141, "s2.loss_bbox": 0.00706, "loss": 0.83574, "time": 0.39773}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00051, "memory": 3365, "data_time": 0.0049, "loss_rpn_cls": 0.151, "loss_rpn_bbox": 0.03241, "s0.loss_cls": 0.27472, "s0.acc": 94.32715, "s0.loss_bbox": 0.12872, "s1.loss_cls": 0.07434, "s1.acc": 97.53418, "s1.loss_bbox": 0.04009, "s2.loss_cls": 0.0228, "s2.acc": 98.70996, "s2.loss_bbox": 0.00666, "loss": 0.73074, "time": 0.39736}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00061, "memory": 3365, "data_time": 0.00482, "loss_rpn_cls": 0.15644, "loss_rpn_bbox": 0.03353, "s0.loss_cls": 0.30079, "s0.acc": 93.5166, "s0.loss_bbox": 0.14549, "s1.loss_cls": 0.08037, "s1.acc": 97.24805, "s1.loss_bbox": 0.04461, "s2.loss_cls": 0.02455, "s2.acc": 98.60254, "s2.loss_bbox": 0.00701, "loss": 0.79279, "time": 0.39716}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00071, "memory": 3365, "data_time": 0.00495, "loss_rpn_cls": 0.14466, "loss_rpn_bbox": 0.02948, "s0.loss_cls": 0.28114, "s0.acc": 93.91504, "s0.loss_bbox": 0.12848, "s1.loss_cls": 0.07723, "s1.acc": 97.31055, "s1.loss_bbox": 0.04296, "s2.loss_cls": 0.02308, "s2.acc": 98.65039, "s2.loss_bbox": 0.00623, "loss": 0.73328, "time": 0.39907}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00081, "memory": 3365, "data_time": 0.0049, "loss_rpn_cls": 0.14842, "loss_rpn_bbox": 0.03282, "s0.loss_cls": 0.27529, "s0.acc": 93.88477, "s0.loss_bbox": 0.13198, "s1.loss_cls": 0.07475, "s1.acc": 97.3584, "s1.loss_bbox": 0.04278, "s2.loss_cls": 0.02269, "s2.acc": 98.66211, "s2.loss_bbox": 0.00691, "loss": 0.73563, "time": 0.39788}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00091, "memory": 3365, "data_time": 0.00492, "loss_rpn_cls": 0.13978, "loss_rpn_bbox": 0.03025, "s0.loss_cls": 0.28914, "s0.acc": 93.50391, "s0.loss_bbox": 0.13983, "s1.loss_cls": 0.07542, "s1.acc": 97.29785, "s1.loss_bbox": 0.04407, "s2.loss_cls": 0.02257, "s2.acc": 98.67676, "s2.loss_bbox": 0.00688, "loss": 0.74794, "time": 0.40135}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00101, "memory": 3365, "data_time": 0.00484, "loss_rpn_cls": 0.12055, "loss_rpn_bbox": 0.0272, "s0.loss_cls": 0.25913, "s0.acc": 94.08789, "s0.loss_bbox": 0.12118, "s1.loss_cls": 0.06782, "s1.acc": 97.47168, "s1.loss_bbox": 0.04002, "s2.loss_cls": 0.02041, "s2.acc": 98.75879, "s2.loss_bbox": 0.00649, "loss": 0.66281, "time": 0.39751}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00111, "memory": 3365, "data_time": 0.00511, "loss_rpn_cls": 0.11742, "loss_rpn_bbox": 0.02606, "s0.loss_cls": 0.27885, "s0.acc": 93.63672, "s0.loss_bbox": 0.13076, "s1.loss_cls": 0.07273, "s1.acc": 97.30566, "s1.loss_bbox": 0.04329, "s2.loss_cls": 0.02118, "s2.acc": 98.72363, "s2.loss_bbox": 0.00689, "loss": 0.6972, "time": 0.3986}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00121, "memory": 3365, "data_time": 0.00518, "loss_rpn_cls": 0.12214, "loss_rpn_bbox": 0.02801, "s0.loss_cls": 0.27279, "s0.acc": 93.36523, "s0.loss_bbox": 0.12946, "s1.loss_cls": 0.07097, "s1.acc": 97.21289, "s1.loss_bbox": 0.04369, "s2.loss_cls": 0.02116, "s2.acc": 98.68848, "s2.loss_bbox": 0.00688, "loss": 0.69511, "time": 0.3968}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00131, "memory": 3365, "data_time": 0.00502, "loss_rpn_cls": 0.14904, "loss_rpn_bbox": 0.03656, "s0.loss_cls": 0.31868, "s0.acc": 92.20312, "s0.loss_bbox": 0.15767, "s1.loss_cls": 0.08668, "s1.acc": 96.55273, "s1.loss_bbox": 0.05291, "s2.loss_cls": 0.02697, "s2.acc": 98.26953, "s2.loss_bbox": 0.00887, "loss": 0.83738, "time": 0.39811}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.0014, "memory": 3365, "data_time": 0.00506, "loss_rpn_cls": 0.11895, "loss_rpn_bbox": 0.02985, "s0.loss_cls": 0.29662, "s0.acc": 92.95996, "s0.loss_bbox": 0.14007, "s1.loss_cls": 0.07852, "s1.acc": 96.96387, "s1.loss_bbox": 0.04834, "s2.loss_cls": 0.02317, "s2.acc": 98.56055, "s2.loss_bbox": 0.00797, "loss": 0.74348, "time": 0.41596}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.0015, "memory": 3365, "data_time": 0.00501, "loss_rpn_cls": 0.11711, "loss_rpn_bbox": 0.0324, "s0.loss_cls": 0.32191, "s0.acc": 91.84473, "s0.loss_bbox": 0.15916, "s1.loss_cls": 0.09141, "s1.acc": 96.21191, "s1.loss_bbox": 0.05924, "s2.loss_cls": 0.02722, "s2.acc": 98.19727, "s2.loss_bbox": 0.00959, "loss": 0.81804, "time": 0.40281}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.0016, "memory": 3365, "data_time": 0.00502, "loss_rpn_cls": 0.10395, "loss_rpn_bbox": 0.02838, "s0.loss_cls": 0.30605, "s0.acc": 92.66113, "s0.loss_bbox": 0.13715, "s1.loss_cls": 0.07842, "s1.acc": 96.76367, "s1.loss_bbox": 0.04926, "s2.loss_cls": 0.02237, "s2.acc": 98.51758, "s2.loss_bbox": 0.00741, "loss": 0.733, "time": 0.3924}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.0017, "memory": 3365, "data_time": 0.00507, "loss_rpn_cls": 0.11636, "loss_rpn_bbox": 0.03175, "s0.loss_cls": 0.33286, "s0.acc": 91.99121, "s0.loss_bbox": 0.15362, "s1.loss_cls": 0.08591, "s1.acc": 96.48047, "s1.loss_bbox": 0.05508, "s2.loss_cls": 0.02476, "s2.acc": 98.34277, "s2.loss_bbox": 0.01002, "loss": 0.81035, "time": 0.39573}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.0018, "memory": 3365, "data_time": 0.00488, "loss_rpn_cls": 0.11262, "loss_rpn_bbox": 0.02608, "s0.loss_cls": 0.28337, "s0.acc": 92.87109, "s0.loss_bbox": 0.12749, "s1.loss_cls": 0.07634, "s1.acc": 96.84277, "s1.loss_bbox": 0.04788, "s2.loss_cls": 0.02279, "s2.acc": 98.48047, "s2.loss_bbox": 0.00896, "loss": 0.70553, "time": 0.38931}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.0019, "memory": 3365, "data_time": 0.00495, "loss_rpn_cls": 0.12361, "loss_rpn_bbox": 0.03682, "s0.loss_cls": 0.3362, "s0.acc": 91.39746, "s0.loss_bbox": 0.15847, "s1.loss_cls": 0.09009, "s1.acc": 96.12598, "s1.loss_bbox": 0.05898, "s2.loss_cls": 0.02605, "s2.acc": 98.19727, "s2.loss_bbox": 0.01057, "loss": 0.84079, "time": 0.39445}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.002, "memory": 3365, "data_time": 0.00508, "loss_rpn_cls": 0.11135, "loss_rpn_bbox": 0.03431, "s0.loss_cls": 0.31134, "s0.acc": 92.23438, "s0.loss_bbox": 0.14059, "s1.loss_cls": 0.08109, "s1.acc": 96.57227, "s1.loss_bbox": 0.05186, "s2.loss_cls": 0.02333, "s2.acc": 98.38672, "s2.loss_bbox": 0.00854, "loss": 0.76242, "time": 0.39301}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.002, "memory": 3365, "data_time": 0.00518, "loss_rpn_cls": 0.08466, "loss_rpn_bbox": 0.02386, "s0.loss_cls": 0.28394, "s0.acc": 92.79199, "s0.loss_bbox": 0.11686, "s1.loss_cls": 0.07369, "s1.acc": 96.79395, "s1.loss_bbox": 0.04652, "s2.loss_cls": 0.02082, "s2.acc": 98.52734, "s2.loss_bbox": 0.00891, "loss": 0.65927, "time": 0.40407}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.002, "memory": 3365, "data_time": 0.00531, "loss_rpn_cls": 0.10935, "loss_rpn_bbox": 0.03426, "s0.loss_cls": 0.32399, "s0.acc": 91.52246, "s0.loss_bbox": 0.15189, "s1.loss_cls": 0.08562, "s1.acc": 96.14941, "s1.loss_bbox": 0.05605, "s2.loss_cls": 0.02476, "s2.acc": 98.17676, "s2.loss_bbox": 0.01058, "loss": 0.79649, "time": 0.40431}
{"mode": "val", "epoch": 1, "iter": 448, "lr": 0.002, "bbox_mAP": 0.062, "bbox_mAP_50": 0.134, "bbox_mAP_75": 0.05, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.003, "bbox_mAP_l": 0.077, "bbox_mAP_copypaste": "0.062 0.134 0.050 0.000 0.003 0.077"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.002, "memory": 3365, "data_time": 0.04881, "loss_rpn_cls": 0.08612, "loss_rpn_bbox": 0.02762, "s0.loss_cls": 0.28955, "s0.acc": 92.18457, "s0.loss_bbox": 0.13038, "s1.loss_cls": 0.0759, "s1.acc": 96.4043, "s1.loss_bbox": 0.05127, "s2.loss_cls": 0.0216, "s2.acc": 98.33398, "s2.loss_bbox": 0.0104, "loss": 0.69285, "time": 0.44152}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.002, "memory": 3365, "data_time": 0.00538, "loss_rpn_cls": 0.09047, "loss_rpn_bbox": 0.02753, "s0.loss_cls": 0.30799, "s0.acc": 91.95215, "s0.loss_bbox": 0.13235, "s1.loss_cls": 0.0808, "s1.acc": 96.23047, "s1.loss_bbox": 0.05518, "s2.loss_cls": 0.02323, "s2.acc": 98.20117, "s2.loss_bbox": 0.01103, "loss": 0.72859, "time": 0.40018}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.002, "memory": 3365, "data_time": 0.00509, "loss_rpn_cls": 0.09298, "loss_rpn_bbox": 0.0312, "s0.loss_cls": 0.31657, "s0.acc": 91.19043, "s0.loss_bbox": 0.14558, "s1.loss_cls": 0.08683, "s1.acc": 95.77734, "s1.loss_bbox": 0.0615, "s2.loss_cls": 0.02485, "s2.acc": 98.0127, "s2.loss_bbox": 0.01235, "loss": 0.77188, "time": 0.39229}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.002, "memory": 3365, "data_time": 0.00509, "loss_rpn_cls": 0.09739, "loss_rpn_bbox": 0.03182, "s0.loss_cls": 0.27593, "s0.acc": 92.81543, "s0.loss_bbox": 0.11071, "s1.loss_cls": 0.07346, "s1.acc": 96.66602, "s1.loss_bbox": 0.04341, "s2.loss_cls": 0.02115, "s2.acc": 98.4209, "s2.loss_bbox": 0.00847, "loss": 0.66235, "time": 0.39011}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.002, "memory": 3365, "data_time": 0.00514, "loss_rpn_cls": 0.08839, "loss_rpn_bbox": 0.02732, "s0.loss_cls": 0.28377, "s0.acc": 92.34863, "s0.loss_bbox": 0.13245, "s1.loss_cls": 0.07587, "s1.acc": 96.32422, "s1.loss_bbox": 0.05304, "s2.loss_cls": 0.02125, "s2.acc": 98.29395, "s2.loss_bbox": 0.01037, "loss": 0.69246, "time": 0.39306}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.002, "memory": 3365, "data_time": 0.00516, "loss_rpn_cls": 0.08542, "loss_rpn_bbox": 0.0249, "s0.loss_cls": 0.27965, "s0.acc": 92.08105, "s0.loss_bbox": 0.125, "s1.loss_cls": 0.07571, "s1.acc": 96.17578, "s1.loss_bbox": 0.05352, "s2.loss_cls": 0.02131, "s2.acc": 98.23535, "s2.loss_bbox": 0.01168, "loss": 0.67718, "time": 0.3951}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.002, "memory": 3365, "data_time": 0.0051, "loss_rpn_cls": 0.09392, "loss_rpn_bbox": 0.02806, "s0.loss_cls": 0.2972, "s0.acc": 91.69629, "s0.loss_bbox": 0.13801, "s1.loss_cls": 0.08163, "s1.acc": 95.90527, "s1.loss_bbox": 0.05858, "s2.loss_cls": 0.02359, "s2.acc": 98.01465, "s2.loss_bbox": 0.0122, "loss": 0.7332, "time": 0.39665}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.002, "memory": 3365, "data_time": 0.0053, "loss_rpn_cls": 0.11132, "loss_rpn_bbox": 0.0352, "s0.loss_cls": 0.32374, "s0.acc": 91.22754, "s0.loss_bbox": 0.14361, "s1.loss_cls": 0.08721, "s1.acc": 95.8252, "s1.loss_bbox": 0.05768, "s2.loss_cls": 0.02524, "s2.acc": 98.03125, "s2.loss_bbox": 0.01178, "loss": 0.79578, "time": 0.39374}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.002, "memory": 3365, "data_time": 0.00517, "loss_rpn_cls": 0.08651, "loss_rpn_bbox": 0.02787, "s0.loss_cls": 0.28696, "s0.acc": 92.31641, "s0.loss_bbox": 0.12107, "s1.loss_cls": 0.07723, "s1.acc": 96.29297, "s1.loss_bbox": 0.05127, "s2.loss_cls": 0.02159, "s2.acc": 98.26074, "s2.loss_bbox": 0.01043, "loss": 0.68294, "time": 0.39263}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.002, "memory": 3365, "data_time": 0.00519, "loss_rpn_cls": 0.07559, "loss_rpn_bbox": 0.0244, "s0.loss_cls": 0.26721, "s0.acc": 92.58691, "s0.loss_bbox": 0.11245, "s1.loss_cls": 0.07088, "s1.acc": 96.50195, "s1.loss_bbox": 0.04527, "s2.loss_cls": 0.02057, "s2.acc": 98.27832, "s2.loss_bbox": 0.01033, "loss": 0.6267, "time": 0.38941}
{"mode": "train", "epoch": 2, "iter": 550, "lr": 0.002, "memory": 3365, "data_time": 0.00521, "loss_rpn_cls": 0.08751, "loss_rpn_bbox": 0.0264, "s0.loss_cls": 0.27954, "s0.acc": 92.2373, "s0.loss_bbox": 0.1186, "s1.loss_cls": 0.07937, "s1.acc": 96.09863, "s1.loss_bbox": 0.05254, "s2.loss_cls": 0.0223, "s2.acc": 98.19141, "s2.loss_bbox": 0.01102, "loss": 0.67728, "time": 0.39121}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.002, "memory": 3365, "data_time": 0.00511, "loss_rpn_cls": 0.06823, "loss_rpn_bbox": 0.02294, "s0.loss_cls": 0.27653, "s0.acc": 92.39551, "s0.loss_bbox": 0.12209, "s1.loss_cls": 0.07277, "s1.acc": 96.3877, "s1.loss_bbox": 0.05149, "s2.loss_cls": 0.01995, "s2.acc": 98.31836, "s2.loss_bbox": 0.01056, "loss": 0.64455, "time": 0.39023}
{"mode": "train", "epoch": 2, "iter": 650, "lr": 0.002, "memory": 3365, "data_time": 0.00509, "loss_rpn_cls": 0.07033, "loss_rpn_bbox": 0.02507, "s0.loss_cls": 0.29623, "s0.acc": 91.59668, "s0.loss_bbox": 0.13483, "s1.loss_cls": 0.08236, "s1.acc": 95.86621, "s1.loss_bbox": 0.0584, "s2.loss_cls": 0.02258, "s2.acc": 98.10352, "s2.loss_bbox": 0.01269, "loss": 0.70249, "time": 0.39113}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.002, "memory": 3365, "data_time": 0.00512, "loss_rpn_cls": 0.07633, "loss_rpn_bbox": 0.02452, "s0.loss_cls": 0.27848, "s0.acc": 92.09082, "s0.loss_bbox": 0.12419, "s1.loss_cls": 0.07768, "s1.acc": 95.95312, "s1.loss_bbox": 0.05405, "s2.loss_cls": 0.0227, "s2.acc": 98.02246, "s2.loss_bbox": 0.01194, "loss": 0.66989, "time": 0.39164}
{"mode": "train", "epoch": 2, "iter": 750, "lr": 0.002, "memory": 3365, "data_time": 0.00524, "loss_rpn_cls": 0.08436, "loss_rpn_bbox": 0.02452, "s0.loss_cls": 0.27946, "s0.acc": 92.27539, "s0.loss_bbox": 0.11829, "s1.loss_cls": 0.07424, "s1.acc": 96.35059, "s1.loss_bbox": 0.04848, "s2.loss_cls": 0.0212, "s2.acc": 98.22363, "s2.loss_bbox": 0.01049, "loss": 0.66103, "time": 0.38935}
{"mode": "train", "epoch": 2, "iter": 800, "lr": 0.002, "memory": 3365, "data_time": 0.00508, "loss_rpn_cls": 0.0751, "loss_rpn_bbox": 0.02509, "s0.loss_cls": 0.26739, "s0.acc": 92.34375, "s0.loss_bbox": 0.12128, "s1.loss_cls": 0.07312, "s1.acc": 96.30078, "s1.loss_bbox": 0.05055, "s2.loss_cls": 0.02016, "s2.acc": 98.27734, "s2.loss_bbox": 0.01042, "loss": 0.64311, "time": 0.38969}
{"mode": "train", "epoch": 2, "iter": 850, "lr": 0.002, "memory": 3365, "data_time": 0.00536, "loss_rpn_cls": 0.09578, "loss_rpn_bbox": 0.02644, "s0.loss_cls": 0.31105, "s0.acc": 91.24512, "s0.loss_bbox": 0.1413, "s1.loss_cls": 0.08718, "s1.acc": 95.72363, "s1.loss_bbox": 0.05799, "s2.loss_cls": 0.02519, "s2.acc": 97.95312, "s2.loss_bbox": 0.01215, "loss": 0.75709, "time": 0.40111}
{"mode": "train", "epoch": 2, "iter": 900, "lr": 0.002, "memory": 3365, "data_time": 0.00525, "loss_rpn_cls": 0.09272, "loss_rpn_bbox": 0.0254, "s0.loss_cls": 0.30265, "s0.acc": 91.64551, "s0.loss_bbox": 0.13094, "s1.loss_cls": 0.082, "s1.acc": 96.0293, "s1.loss_bbox": 0.05415, "s2.loss_cls": 0.02337, "s2.acc": 98.12793, "s2.loss_bbox": 0.01168, "loss": 0.72291, "time": 0.39756}
{"mode": "train", "epoch": 2, "iter": 950, "lr": 0.002, "memory": 3365, "data_time": 0.00509, "loss_rpn_cls": 0.06858, "loss_rpn_bbox": 0.02408, "s0.loss_cls": 0.26201, "s0.acc": 92.67969, "s0.loss_bbox": 0.10665, "s1.loss_cls": 0.07031, "s1.acc": 96.4707, "s1.loss_bbox": 0.0471, "s2.loss_cls": 0.01964, "s2.acc": 98.25488, "s2.loss_bbox": 0.01074, "loss": 0.60909, "time": 0.38823}
{"mode": "train", "epoch": 2, "iter": 1000, "lr": 0.002, "memory": 3365, "data_time": 0.00517, "loss_rpn_cls": 0.07688, "loss_rpn_bbox": 0.02301, "s0.loss_cls": 0.29955, "s0.acc": 91.76855, "s0.loss_bbox": 0.1311, "s1.loss_cls": 0.0805, "s1.acc": 96.0332, "s1.loss_bbox": 0.05451, "s2.loss_cls": 0.02264, "s2.acc": 98.04688, "s2.loss_bbox": 0.01234, "loss": 0.70053, "time": 0.39565}
{"mode": "train", "epoch": 2, "iter": 1050, "lr": 0.002, "memory": 3365, "data_time": 0.00526, "loss_rpn_cls": 0.09882, "loss_rpn_bbox": 0.03437, "s0.loss_cls": 0.30156, "s0.acc": 91.22168, "s0.loss_bbox": 0.14292, "s1.loss_cls": 0.08853, "s1.acc": 95.3916, "s1.loss_bbox": 0.06365, "s2.loss_cls": 0.02566, "s2.acc": 97.78613, "s2.loss_bbox": 0.01333, "loss": 0.76884, "time": 0.39638}
{"mode": "train", "epoch": 2, "iter": 1100, "lr": 0.002, "memory": 3365, "data_time": 0.00516, "loss_rpn_cls": 0.07899, "loss_rpn_bbox": 0.02784, "s0.loss_cls": 0.31361, "s0.acc": 91.0498, "s0.loss_bbox": 0.13473, "s1.loss_cls": 0.09013, "s1.acc": 95.26074, "s1.loss_bbox": 0.06595, "s2.loss_cls": 0.02481, "s2.acc": 97.76465, "s2.loss_bbox": 0.01456, "loss": 0.75062, "time": 0.39424}
{"mode": "val", "epoch": 2, "iter": 448, "lr": 0.002, "bbox_mAP": 0.149, "bbox_mAP_50": 0.271, "bbox_mAP_75": 0.134, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.008, "bbox_mAP_l": 0.18, "bbox_mAP_copypaste": "0.149 0.271 0.134 0.000 0.008 0.180"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00199, "memory": 3365, "data_time": 0.04944, "loss_rpn_cls": 0.05554, "loss_rpn_bbox": 0.01875, "s0.loss_cls": 0.25726, "s0.acc": 92.375, "s0.loss_bbox": 0.11184, "s1.loss_cls": 0.06934, "s1.acc": 96.25879, "s1.loss_bbox": 0.04968, "s2.loss_cls": 0.01859, "s2.acc": 98.2832, "s2.loss_bbox": 0.01136, "loss": 0.59236, "time": 0.44782}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.00199, "memory": 3365, "data_time": 0.0053, "loss_rpn_cls": 0.07135, "loss_rpn_bbox": 0.02339, "s0.loss_cls": 0.26395, "s0.acc": 92.39258, "s0.loss_bbox": 0.11978, "s1.loss_cls": 0.07297, "s1.acc": 96.17676, "s1.loss_bbox": 0.05115, "s2.loss_cls": 0.02085, "s2.acc": 98.16016, "s2.loss_bbox": 0.01128, "loss": 0.63472, "time": 0.3896}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.00199, "memory": 3365, "data_time": 0.005, "loss_rpn_cls": 0.06927, "loss_rpn_bbox": 0.02111, "s0.loss_cls": 0.26748, "s0.acc": 92.24609, "s0.loss_bbox": 0.11523, "s1.loss_cls": 0.07241, "s1.acc": 96.18066, "s1.loss_bbox": 0.05136, "s2.loss_cls": 0.02028, "s2.acc": 98.16797, "s2.loss_bbox": 0.01161, "loss": 0.62875, "time": 0.3894}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.00199, "memory": 3365, "data_time": 0.00511, "loss_rpn_cls": 0.07471, "loss_rpn_bbox": 0.02505, "s0.loss_cls": 0.30451, "s0.acc": 91.47168, "s0.loss_bbox": 0.13306, "s1.loss_cls": 0.08765, "s1.acc": 95.56152, "s1.loss_bbox": 0.06227, "s2.loss_cls": 0.0243, "s2.acc": 97.87109, "s2.loss_bbox": 0.01344, "loss": 0.72499, "time": 0.39491}
