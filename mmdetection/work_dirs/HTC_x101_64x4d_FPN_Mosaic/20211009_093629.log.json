{"env_info": "sys.platform: linux\nPython: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]\nCUDA available: True\nGPU 0: Tesla V100-PCIE-32GB\nCUDA_HOME: None\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.3\nMMCV: 1.3.14\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.17.0+044cccd", "config": "dataset_type = 'CocoDataset'\ndata_root = '/opt/ml/detection/dataset/'\nclasses = [\n    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',\n    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n]\nimg_norm_cfg = dict(mean=[0, 0, 0], std=[255.0, 255.0, 255.0], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(300, 300), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[0, 0, 0],\n        std=[255.0, 255.0, 255.0],\n        to_rgb=True),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(300, 300),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/train_kfold1.json',\n        img_prefix='/opt/ml/detection/dataset/',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(300, 300), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[0, 0, 0],\n                std=[255.0, 255.0, 255.0],\n                to_rgb=True),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/val_kfold1.json',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(300, 300),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/opt/ml/detection/dataset/test.json',\n        classes=[\n            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',\n            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'\n        ],\n        img_prefix='/opt/ml/detection/dataset/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(300, 300),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[255.0, 255.0, 255.0],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP_50')\ncheckpoint_config = dict(interval=100)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook'),\n        dict(type='WandbLoggerHook', init_kwargs=dict(project='mmdetection'))\n    ])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\noptimizer = dict(type='SGD', lr=0.002, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='CosineAnnealing',\n    warmup='linear',\n    warmup_iters=1000,\n    warmup_ratio=0.01,\n    min_lr=1e-06)\nrunner = dict(type='EpochBasedRunner', max_epochs=50)\nmodel = dict(\n    type='HybridTaskCascade',\n    backbone=dict(\n        type='ResNeXt',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(\n            type='Pretrained', checkpoint='open-mmlab://resnext101_64x4d'),\n        groups=64,\n        base_width=4),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='HybridTaskCascadeRoIHead',\n        interleaved=True,\n        mask_info_flow=False,\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.05, 0.05, 0.1, 0.1]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=10,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.033, 0.033, 0.067, 0.067]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.001,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\nwork_dir = './work_dirs/HTC_x101_64x4d_FPN_Mosaic'\ngpu_ids = range(0, 1)\n", "seed": 2021, "exp_name": "HTC_x101_64x4d_FPN_Mosaic.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00012, "memory": 3365, "data_time": 0.04845, "loss_rpn_cls": 0.6519, "loss_rpn_bbox": 0.04358, "s0.loss_cls": 0.57778, "s0.acc": 88.28711, "s0.loss_bbox": 0.10511, "s1.loss_cls": 0.31151, "s1.acc": 82.60156, "s1.loss_bbox": 0.03659, "s2.loss_cls": 0.24769, "s2.acc": 71.27148, "s2.loss_bbox": 0.01119, "loss": 1.98535, "time": 0.44413}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00022, "memory": 3365, "data_time": 0.00505, "loss_rpn_cls": 0.41638, "loss_rpn_bbox": 0.03666, "s0.loss_cls": 0.2592, "s0.acc": 95.4248, "s0.loss_bbox": 0.11684, "s1.loss_cls": 0.08378, "s1.acc": 97.81738, "s1.loss_bbox": 0.03402, "s2.loss_cls": 0.03192, "s2.acc": 98.60938, "s2.loss_bbox": 0.00824, "loss": 0.98704, "time": 0.40076}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00032, "memory": 3365, "data_time": 0.005, "loss_rpn_cls": 0.18436, "loss_rpn_bbox": 0.03398, "s0.loss_cls": 0.29273, "s0.acc": 94.38574, "s0.loss_bbox": 0.14039, "s1.loss_cls": 0.08392, "s1.acc": 97.42773, "s1.loss_bbox": 0.04325, "s2.loss_cls": 0.02777, "s2.acc": 98.59766, "s2.loss_bbox": 0.00792, "loss": 0.81432, "time": 0.3978}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00041, "memory": 3365, "data_time": 0.00514, "loss_rpn_cls": 0.19302, "loss_rpn_bbox": 0.04053, "s0.loss_cls": 0.30059, "s0.acc": 93.80859, "s0.loss_bbox": 0.13852, "s1.loss_cls": 0.08561, "s1.acc": 97.20508, "s1.loss_bbox": 0.04195, "s2.loss_cls": 0.02804, "s2.acc": 98.4248, "s2.loss_bbox": 0.00731, "loss": 0.83557, "time": 0.39974}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00051, "memory": 3365, "data_time": 0.00492, "loss_rpn_cls": 0.15056, "loss_rpn_bbox": 0.03244, "s0.loss_cls": 0.27514, "s0.acc": 94.31152, "s0.loss_bbox": 0.12877, "s1.loss_cls": 0.07488, "s1.acc": 97.52441, "s1.loss_bbox": 0.04028, "s2.loss_cls": 0.02294, "s2.acc": 98.71094, "s2.loss_bbox": 0.00661, "loss": 0.73162, "time": 0.39858}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00061, "memory": 3365, "data_time": 0.00484, "loss_rpn_cls": 0.1566, "loss_rpn_bbox": 0.03357, "s0.loss_cls": 0.29833, "s0.acc": 93.58105, "s0.loss_bbox": 0.14393, "s1.loss_cls": 0.08043, "s1.acc": 97.23828, "s1.loss_bbox": 0.04496, "s2.loss_cls": 0.02433, "s2.acc": 98.62012, "s2.loss_bbox": 0.00679, "loss": 0.78894, "time": 0.39912}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00071, "memory": 3365, "data_time": 0.00499, "loss_rpn_cls": 0.14397, "loss_rpn_bbox": 0.02948, "s0.loss_cls": 0.28083, "s0.acc": 93.89648, "s0.loss_bbox": 0.12945, "s1.loss_cls": 0.07685, "s1.acc": 97.32129, "s1.loss_bbox": 0.04247, "s2.loss_cls": 0.02356, "s2.acc": 98.61914, "s2.loss_bbox": 0.0068, "loss": 0.73341, "time": 0.40824}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.00081, "memory": 3365, "data_time": 0.00495, "loss_rpn_cls": 0.14745, "loss_rpn_bbox": 0.03282, "s0.loss_cls": 0.276, "s0.acc": 93.8623, "s0.loss_bbox": 0.13201, "s1.loss_cls": 0.07524, "s1.acc": 97.32129, "s1.loss_bbox": 0.0438, "s2.loss_cls": 0.02272, "s2.acc": 98.66406, "s2.loss_bbox": 0.00689, "loss": 0.73693, "time": 0.40165}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.00091, "memory": 3365, "data_time": 0.00497, "loss_rpn_cls": 0.14072, "loss_rpn_bbox": 0.03024, "s0.loss_cls": 0.28732, "s0.acc": 93.50684, "s0.loss_bbox": 0.14067, "s1.loss_cls": 0.07587, "s1.acc": 97.2666, "s1.loss_bbox": 0.04438, "s2.loss_cls": 0.02274, "s2.acc": 98.65332, "s2.loss_bbox": 0.00728, "loss": 0.74922, "time": 0.39977}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.00101, "memory": 3365, "data_time": 0.00487, "loss_rpn_cls": 0.12064, "loss_rpn_bbox": 0.02716, "s0.loss_cls": 0.26019, "s0.acc": 94.08105, "s0.loss_bbox": 0.12207, "s1.loss_cls": 0.06771, "s1.acc": 97.48633, "s1.loss_bbox": 0.03971, "s2.loss_cls": 0.02033, "s2.acc": 98.76465, "s2.loss_bbox": 0.00639, "loss": 0.6642, "time": 0.39903}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00111, "memory": 3365, "data_time": 0.0051, "loss_rpn_cls": 0.1162, "loss_rpn_bbox": 0.02601, "s0.loss_cls": 0.27673, "s0.acc": 93.74805, "s0.loss_bbox": 0.12843, "s1.loss_cls": 0.07239, "s1.acc": 97.2998, "s1.loss_bbox": 0.04347, "s2.loss_cls": 0.02105, "s2.acc": 98.71875, "s2.loss_bbox": 0.007, "loss": 0.69127, "time": 0.40031}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00121, "memory": 3365, "data_time": 0.00518, "loss_rpn_cls": 0.12129, "loss_rpn_bbox": 0.02781, "s0.loss_cls": 0.27029, "s0.acc": 93.35742, "s0.loss_bbox": 0.13021, "s1.loss_cls": 0.0706, "s1.acc": 97.16406, "s1.loss_bbox": 0.0448, "s2.loss_cls": 0.02106, "s2.acc": 98.67676, "s2.loss_bbox": 0.00711, "loss": 0.69317, "time": 0.39846}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00131, "memory": 3365, "data_time": 0.00522, "loss_rpn_cls": 0.14708, "loss_rpn_bbox": 0.03645, "s0.loss_cls": 0.32668, "s0.acc": 92.04004, "s0.loss_bbox": 0.1614, "s1.loss_cls": 0.08867, "s1.acc": 96.46973, "s1.loss_bbox": 0.055, "s2.loss_cls": 0.02712, "s2.acc": 98.2627, "s2.loss_bbox": 0.00895, "loss": 0.85135, "time": 0.39939}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.0014, "memory": 3365, "data_time": 0.00514, "loss_rpn_cls": 0.11989, "loss_rpn_bbox": 0.02975, "s0.loss_cls": 0.30146, "s0.acc": 92.88379, "s0.loss_bbox": 0.14313, "s1.loss_cls": 0.07955, "s1.acc": 96.91797, "s1.loss_bbox": 0.04932, "s2.loss_cls": 0.02346, "s2.acc": 98.54297, "s2.loss_bbox": 0.0082, "loss": 0.75476, "time": 0.39904}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.0015, "memory": 3365, "data_time": 0.00522, "loss_rpn_cls": 0.11787, "loss_rpn_bbox": 0.03235, "s0.loss_cls": 0.32278, "s0.acc": 91.86133, "s0.loss_bbox": 0.15943, "s1.loss_cls": 0.09243, "s1.acc": 96.16699, "s1.loss_bbox": 0.05988, "s2.loss_cls": 0.02725, "s2.acc": 98.19336, "s2.loss_bbox": 0.0099, "loss": 0.82189, "time": 0.39759}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.0016, "memory": 3365, "data_time": 0.00513, "loss_rpn_cls": 0.10327, "loss_rpn_bbox": 0.02814, "s0.loss_cls": 0.30278, "s0.acc": 92.60742, "s0.loss_bbox": 0.13735, "s1.loss_cls": 0.07792, "s1.acc": 96.75977, "s1.loss_bbox": 0.04816, "s2.loss_cls": 0.02258, "s2.acc": 98.49121, "s2.loss_bbox": 0.0077, "loss": 0.72789, "time": 0.39564}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.0017, "memory": 3365, "data_time": 0.00528, "loss_rpn_cls": 0.11633, "loss_rpn_bbox": 0.03164, "s0.loss_cls": 0.33249, "s0.acc": 91.90234, "s0.loss_bbox": 0.15475, "s1.loss_cls": 0.08626, "s1.acc": 96.44043, "s1.loss_bbox": 0.05567, "s2.loss_cls": 0.02481, "s2.acc": 98.35938, "s2.loss_bbox": 0.00985, "loss": 0.8118, "time": 0.39647}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.0018, "memory": 3365, "data_time": 0.00515, "loss_rpn_cls": 0.11206, "loss_rpn_bbox": 0.02618, "s0.loss_cls": 0.28308, "s0.acc": 92.84961, "s0.loss_bbox": 0.12525, "s1.loss_cls": 0.07571, "s1.acc": 96.85742, "s1.loss_bbox": 0.04746, "s2.loss_cls": 0.02237, "s2.acc": 98.50391, "s2.loss_bbox": 0.00855, "loss": 0.70066, "time": 0.39215}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.0019, "memory": 3365, "data_time": 0.00541, "loss_rpn_cls": 0.12162, "loss_rpn_bbox": 0.03671, "s0.loss_cls": 0.34222, "s0.acc": 91.28516, "s0.loss_bbox": 0.1616, "s1.loss_cls": 0.08989, "s1.acc": 96.12109, "s1.loss_bbox": 0.05917, "s2.loss_cls": 0.02606, "s2.acc": 98.18848, "s2.loss_bbox": 0.0107, "loss": 0.84797, "time": 0.39766}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.002, "memory": 3365, "data_time": 0.00531, "loss_rpn_cls": 0.11155, "loss_rpn_bbox": 0.03449, "s0.loss_cls": 0.31258, "s0.acc": 92.20312, "s0.loss_bbox": 0.14069, "s1.loss_cls": 0.08125, "s1.acc": 96.57812, "s1.loss_bbox": 0.05103, "s2.loss_cls": 0.02321, "s2.acc": 98.3877, "s2.loss_bbox": 0.00861, "loss": 0.76341, "time": 0.39499}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.002, "memory": 3365, "data_time": 0.00543, "loss_rpn_cls": 0.08422, "loss_rpn_bbox": 0.02375, "s0.loss_cls": 0.28488, "s0.acc": 92.79004, "s0.loss_bbox": 0.11655, "s1.loss_cls": 0.07342, "s1.acc": 96.80957, "s1.loss_bbox": 0.04595, "s2.loss_cls": 0.02086, "s2.acc": 98.52246, "s2.loss_bbox": 0.0089, "loss": 0.65854, "time": 0.39514}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.002, "memory": 3365, "data_time": 0.00526, "loss_rpn_cls": 0.11153, "loss_rpn_bbox": 0.03421, "s0.loss_cls": 0.32636, "s0.acc": 91.50781, "s0.loss_bbox": 0.15032, "s1.loss_cls": 0.08487, "s1.acc": 96.16602, "s1.loss_bbox": 0.05584, "s2.loss_cls": 0.02454, "s2.acc": 98.19824, "s2.loss_bbox": 0.0102, "loss": 0.79786, "time": 0.40518}
