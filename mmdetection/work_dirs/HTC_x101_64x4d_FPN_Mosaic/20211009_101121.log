2021-10-09 10:11:22,123 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]
CUDA available: True
GPU 0: Tesla V100-PCIE-32GB
CUDA_HOME: None
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.5.3
MMCV: 1.3.14
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.0
MMDetection: 2.17.0+044cccd
------------------------------------------------------------

2021-10-09 10:11:22,605 - mmdet - INFO - Distributed training: False
2021-10-09 10:11:23,066 - mmdet - INFO - Config:
dataset_type = 'CocoDataset'
data_root = '/opt/ml/detection/dataset/'
classes = [
    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',
    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
]
img_norm_cfg = dict(mean=[0, 0, 0], std=[255.0, 255.0, 255.0], to_rgb=True)
train_pipeline = [
    dict(type='Mosaic', img_scale=(300, 300)),
    dict(type='Resize', img_scale=(300, 300), keep_ratio=True)
]
test_pipeline = [dict(img_scale=(300, 300))]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/train_kfold1.json',
        img_prefix='/opt/ml/detection/dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(300, 300), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[0, 0, 0],
                std=[255.0, 255.0, 255.0],
                to_rgb=True),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/val_kfold1.json',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        img_prefix='/opt/ml/detection/dataset/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(300, 300),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[0, 0, 0],
                        std=[255.0, 255.0, 255.0],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/test.json',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        img_prefix='/opt/ml/detection/dataset/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(300, 300),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[0, 0, 0],
                        std=[255.0, 255.0, 255.0],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP_50')
checkpoint_config = dict(interval=100)
log_config = dict(
    interval=50,
    hooks=[
        dict(type='TextLoggerHook'),
        dict(type='WandbLoggerHook', init_kwargs=dict(project='mmdetection'))
    ])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
optimizer = dict(type='SGD', lr=0.002, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='CosineAnnealing',
    warmup='linear',
    warmup_iters=1000,
    warmup_ratio=0.01,
    min_lr=1e-06)
runner = dict(type='EpochBasedRunner', max_epochs=50)
model = dict(
    type='HybridTaskCascade',
    backbone=dict(
        type='ResNeXt',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(
            type='Pretrained', checkpoint='open-mmlab://resnext101_64x4d'),
        groups=64,
        base_width=4),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='HybridTaskCascadeRoIHead',
        interleaved=True,
        mask_info_flow=False,
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))
        ]),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.001,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100,
            mask_thr_binary=0.5)))
work_dir = './work_dirs/HTC_x101_64x4d_FPN_Mosaic'
gpu_ids = range(0, 1)

2021-10-09 10:11:23,067 - mmdet - INFO - Set random seed to 2021, deterministic: True
2021-10-09 10:11:24,584 - mmdet - INFO - initialize ResNeXt with init_cfg {'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnext101_64x4d'}
2021-10-09 10:11:24,876 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2021-10-09 10:11:24,902 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2021-10-09 10:11:24,911 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-09 10:11:25,228 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-09 10:11:25,545 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.conv1.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.conv2.weight - torch.Size([256, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.conv3.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.conv1.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.conv2.weight - torch.Size([256, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.conv3.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.conv1.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.conv2.weight - torch.Size([256, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.conv3.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.conv1.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.conv2.weight - torch.Size([512, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.conv3.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.conv1.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.conv2.weight - torch.Size([512, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.conv3.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.conv1.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.conv2.weight - torch.Size([512, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.conv3.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.conv1.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.conv2.weight - torch.Size([512, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.conv3.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.conv1.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.conv1.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.conv2.weight - torch.Size([2048, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn2.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn2.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.conv3.weight - torch.Size([2048, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.conv1.weight - torch.Size([2048, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.conv2.weight - torch.Size([2048, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn2.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn2.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.conv3.weight - torch.Size([2048, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.conv1.weight - torch.Size([2048, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.conv2.weight - torch.Size([2048, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn2.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn2.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.conv3.weight - torch.Size([2048, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 
2021-10-09 10:11:29,480 - mmdet - INFO - Start running, host: root@00a46a6c3ac0, work_dir: /opt/ml/detection/object-detection-level2-cv-01/work_dirs/HTC_x101_64x4d_FPN_Mosaic
2021-10-09 10:11:29,480 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_run:
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
2021-10-09 10:11:29,480 - mmdet - INFO - workflow: [('train', 1)], max: 50 epochs
2021-10-09 10:11:58,217 - mmdet - INFO - Epoch [1][50/1109]	lr: 1.170e-04, eta: 6:48:18, time: 0.442, data_time: 0.048, memory: 3365, loss_rpn_cls: 0.6521, loss_rpn_bbox: 0.0436, s0.loss_cls: 0.5795, s0.acc: 88.2246, s0.loss_bbox: 0.1055, s1.loss_cls: 0.3122, s1.acc: 82.5859, s1.loss_bbox: 0.0369, s2.loss_cls: 0.2478, s2.acc: 71.2578, s2.loss_bbox: 0.0112, loss: 1.9886
2021-10-09 10:12:18,020 - mmdet - INFO - Epoch [1][100/1109]	lr: 2.160e-04, eta: 6:26:39, time: 0.396, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.4159, loss_rpn_bbox: 0.0367, s0.loss_cls: 0.2595, s0.acc: 95.4014, s0.loss_bbox: 0.1175, s1.loss_cls: 0.0835, s1.acc: 97.8301, s1.loss_bbox: 0.0337, s2.loss_cls: 0.0317, s2.acc: 98.6094, s2.loss_bbox: 0.0083, loss: 0.9867
2021-10-09 10:12:38,273 - mmdet - INFO - Epoch [1][150/1109]	lr: 3.150e-04, eta: 6:21:58, time: 0.405, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.1838, loss_rpn_bbox: 0.0340, s0.loss_cls: 0.2928, s0.acc: 94.3691, s0.loss_bbox: 0.1403, s1.loss_cls: 0.0844, s1.acc: 97.4219, s1.loss_bbox: 0.0430, s2.loss_cls: 0.0280, s2.acc: 98.5898, s2.loss_bbox: 0.0080, loss: 0.8142
2021-10-09 10:12:58,160 - mmdet - INFO - Epoch [1][200/1109]	lr: 4.140e-04, eta: 6:17:47, time: 0.398, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.1928, loss_rpn_bbox: 0.0406, s0.loss_cls: 0.3009, s0.acc: 93.8096, s0.loss_bbox: 0.1381, s1.loss_cls: 0.0861, s1.acc: 97.1953, s1.loss_bbox: 0.0423, s2.loss_cls: 0.0279, s2.acc: 98.4414, s2.loss_bbox: 0.0071, loss: 0.8357
2021-10-09 10:13:18,029 - mmdet - INFO - Epoch [1][250/1109]	lr: 5.130e-04, eta: 6:15:04, time: 0.397, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.1510, loss_rpn_bbox: 0.0324, s0.loss_cls: 0.2747, s0.acc: 94.3271, s0.loss_bbox: 0.1287, s1.loss_cls: 0.0743, s1.acc: 97.5342, s1.loss_bbox: 0.0401, s2.loss_cls: 0.0228, s2.acc: 98.7100, s2.loss_bbox: 0.0067, loss: 0.7307
2021-10-09 10:13:37,887 - mmdet - INFO - Epoch [1][300/1109]	lr: 6.120e-04, eta: 6:13:07, time: 0.397, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.1564, loss_rpn_bbox: 0.0335, s0.loss_cls: 0.3008, s0.acc: 93.5166, s0.loss_bbox: 0.1455, s1.loss_cls: 0.0804, s1.acc: 97.2480, s1.loss_bbox: 0.0446, s2.loss_cls: 0.0245, s2.acc: 98.6025, s2.loss_bbox: 0.0070, loss: 0.7928
2021-10-09 10:13:57,841 - mmdet - INFO - Epoch [1][350/1109]	lr: 7.110e-04, eta: 6:11:52, time: 0.399, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.1447, loss_rpn_bbox: 0.0295, s0.loss_cls: 0.2811, s0.acc: 93.9150, s0.loss_bbox: 0.1285, s1.loss_cls: 0.0772, s1.acc: 97.3105, s1.loss_bbox: 0.0430, s2.loss_cls: 0.0231, s2.acc: 98.6504, s2.loss_bbox: 0.0062, loss: 0.7333
2021-10-09 10:14:17,735 - mmdet - INFO - Epoch [1][400/1109]	lr: 8.100e-04, eta: 6:10:43, time: 0.398, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.1484, loss_rpn_bbox: 0.0328, s0.loss_cls: 0.2753, s0.acc: 93.8848, s0.loss_bbox: 0.1320, s1.loss_cls: 0.0748, s1.acc: 97.3584, s1.loss_bbox: 0.0428, s2.loss_cls: 0.0227, s2.acc: 98.6621, s2.loss_bbox: 0.0069, loss: 0.7356
2021-10-09 10:14:37,803 - mmdet - INFO - Epoch [1][450/1109]	lr: 9.090e-04, eta: 6:10:07, time: 0.401, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.1398, loss_rpn_bbox: 0.0303, s0.loss_cls: 0.2891, s0.acc: 93.5039, s0.loss_bbox: 0.1398, s1.loss_cls: 0.0754, s1.acc: 97.2979, s1.loss_bbox: 0.0441, s2.loss_cls: 0.0226, s2.acc: 98.6768, s2.loss_bbox: 0.0069, loss: 0.7479
2021-10-09 10:14:57,679 - mmdet - INFO - Epoch [1][500/1109]	lr: 1.008e-03, eta: 6:09:12, time: 0.398, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.1206, loss_rpn_bbox: 0.0272, s0.loss_cls: 0.2591, s0.acc: 94.0879, s0.loss_bbox: 0.1212, s1.loss_cls: 0.0678, s1.acc: 97.4717, s1.loss_bbox: 0.0400, s2.loss_cls: 0.0204, s2.acc: 98.7588, s2.loss_bbox: 0.0065, loss: 0.6628
2021-10-09 10:15:17,610 - mmdet - INFO - Epoch [1][550/1109]	lr: 1.107e-03, eta: 6:08:29, time: 0.399, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.1174, loss_rpn_bbox: 0.0261, s0.loss_cls: 0.2789, s0.acc: 93.6367, s0.loss_bbox: 0.1308, s1.loss_cls: 0.0727, s1.acc: 97.3057, s1.loss_bbox: 0.0433, s2.loss_cls: 0.0212, s2.acc: 98.7236, s2.loss_bbox: 0.0069, loss: 0.6972
2021-10-09 10:15:37,450 - mmdet - INFO - Epoch [1][600/1109]	lr: 1.206e-03, eta: 6:07:42, time: 0.397, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.1221, loss_rpn_bbox: 0.0280, s0.loss_cls: 0.2728, s0.acc: 93.3652, s0.loss_bbox: 0.1295, s1.loss_cls: 0.0710, s1.acc: 97.2129, s1.loss_bbox: 0.0437, s2.loss_cls: 0.0212, s2.acc: 98.6885, s2.loss_bbox: 0.0069, loss: 0.6951
2021-10-09 10:15:57,356 - mmdet - INFO - Epoch [1][650/1109]	lr: 1.305e-03, eta: 6:07:05, time: 0.398, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.1490, loss_rpn_bbox: 0.0366, s0.loss_cls: 0.3187, s0.acc: 92.2031, s0.loss_bbox: 0.1577, s1.loss_cls: 0.0867, s1.acc: 96.5527, s1.loss_bbox: 0.0529, s2.loss_cls: 0.0270, s2.acc: 98.2695, s2.loss_bbox: 0.0089, loss: 0.8374
2021-10-09 10:16:18,152 - mmdet - INFO - Epoch [1][700/1109]	lr: 1.404e-03, eta: 6:07:39, time: 0.416, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.1190, loss_rpn_bbox: 0.0298, s0.loss_cls: 0.2966, s0.acc: 92.9600, s0.loss_bbox: 0.1401, s1.loss_cls: 0.0785, s1.acc: 96.9639, s1.loss_bbox: 0.0483, s2.loss_cls: 0.0232, s2.acc: 98.5605, s2.loss_bbox: 0.0080, loss: 0.7435
2021-10-09 10:16:38,295 - mmdet - INFO - Epoch [1][750/1109]	lr: 1.503e-03, eta: 6:07:19, time: 0.403, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.1171, loss_rpn_bbox: 0.0324, s0.loss_cls: 0.3219, s0.acc: 91.8447, s0.loss_bbox: 0.1592, s1.loss_cls: 0.0914, s1.acc: 96.2119, s1.loss_bbox: 0.0592, s2.loss_cls: 0.0272, s2.acc: 98.1973, s2.loss_bbox: 0.0096, loss: 0.8180
2021-10-09 10:16:57,915 - mmdet - INFO - Epoch [1][800/1109]	lr: 1.602e-03, eta: 6:06:23, time: 0.392, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.1040, loss_rpn_bbox: 0.0284, s0.loss_cls: 0.3061, s0.acc: 92.6611, s0.loss_bbox: 0.1371, s1.loss_cls: 0.0784, s1.acc: 96.7637, s1.loss_bbox: 0.0493, s2.loss_cls: 0.0224, s2.acc: 98.5176, s2.loss_bbox: 0.0074, loss: 0.7330
2021-10-09 10:17:17,702 - mmdet - INFO - Epoch [1][850/1109]	lr: 1.701e-03, eta: 6:05:42, time: 0.396, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.1164, loss_rpn_bbox: 0.0318, s0.loss_cls: 0.3329, s0.acc: 91.9912, s0.loss_bbox: 0.1536, s1.loss_cls: 0.0859, s1.acc: 96.4805, s1.loss_bbox: 0.0551, s2.loss_cls: 0.0248, s2.acc: 98.3428, s2.loss_bbox: 0.0100, loss: 0.8104
2021-10-09 10:17:37,168 - mmdet - INFO - Epoch [1][900/1109]	lr: 1.800e-03, eta: 6:04:44, time: 0.389, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.1126, loss_rpn_bbox: 0.0261, s0.loss_cls: 0.2834, s0.acc: 92.8711, s0.loss_bbox: 0.1275, s1.loss_cls: 0.0763, s1.acc: 96.8428, s1.loss_bbox: 0.0479, s2.loss_cls: 0.0228, s2.acc: 98.4805, s2.loss_bbox: 0.0090, loss: 0.7055
2021-10-09 10:17:56,891 - mmdet - INFO - Epoch [1][950/1109]	lr: 1.899e-03, eta: 6:04:04, time: 0.394, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.1236, loss_rpn_bbox: 0.0368, s0.loss_cls: 0.3362, s0.acc: 91.3975, s0.loss_bbox: 0.1585, s1.loss_cls: 0.0901, s1.acc: 96.1260, s1.loss_bbox: 0.0590, s2.loss_cls: 0.0261, s2.acc: 98.1973, s2.loss_bbox: 0.0106, loss: 0.8408
2021-10-09 10:18:16,542 - mmdet - INFO - Exp name: HTC_x101_64x4d_FPN_Mosaic.py
2021-10-09 10:18:16,542 - mmdet - INFO - Epoch [1][1000/1109]	lr: 1.998e-03, eta: 6:03:23, time: 0.393, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.1114, loss_rpn_bbox: 0.0343, s0.loss_cls: 0.3113, s0.acc: 92.2344, s0.loss_bbox: 0.1406, s1.loss_cls: 0.0811, s1.acc: 96.5723, s1.loss_bbox: 0.0519, s2.loss_cls: 0.0233, s2.acc: 98.3867, s2.loss_bbox: 0.0085, loss: 0.7624
2021-10-09 10:18:36,746 - mmdet - INFO - Epoch [1][1050/1109]	lr: 2.000e-03, eta: 6:03:12, time: 0.404, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.0847, loss_rpn_bbox: 0.0239, s0.loss_cls: 0.2839, s0.acc: 92.7920, s0.loss_bbox: 0.1169, s1.loss_cls: 0.0737, s1.acc: 96.7939, s1.loss_bbox: 0.0465, s2.loss_cls: 0.0208, s2.acc: 98.5273, s2.loss_bbox: 0.0089, loss: 0.6593
2021-10-09 10:18:56,962 - mmdet - INFO - Epoch [1][1100/1109]	lr: 2.000e-03, eta: 6:03:01, time: 0.404, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.1093, loss_rpn_bbox: 0.0343, s0.loss_cls: 0.3240, s0.acc: 91.5225, s0.loss_bbox: 0.1519, s1.loss_cls: 0.0856, s1.acc: 96.1494, s1.loss_bbox: 0.0561, s2.loss_cls: 0.0248, s2.acc: 98.1768, s2.loss_bbox: 0.0106, loss: 0.7965
2021-10-09 10:19:32,433 - mmdet - INFO - Evaluating bbox...
2021-10-09 10:19:39,120 - mmdet - INFO - Now best checkpoint is saved as best_bbox_mAP_50_epoch_1.pth.
2021-10-09 10:19:39,121 - mmdet - INFO - Best bbox_mAP_50 is 0.1340 at 1 epoch.
2021-10-09 10:19:39,122 - mmdet - INFO - Exp name: HTC_x101_64x4d_FPN_Mosaic.py
2021-10-09 10:19:39,123 - mmdet - INFO - Epoch(val) [1][448]	bbox_mAP: 0.0620, bbox_mAP_50: 0.1340, bbox_mAP_75: 0.0500, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0030, bbox_mAP_l: 0.0770, bbox_mAP_copypaste: 0.062 0.134 0.050 0.000 0.003 0.077
2021-10-09 10:20:01,212 - mmdet - INFO - Epoch [2][50/1109]	lr: 1.998e-03, eta: 6:01:24, time: 0.442, data_time: 0.049, memory: 3365, loss_rpn_cls: 0.0861, loss_rpn_bbox: 0.0276, s0.loss_cls: 0.2895, s0.acc: 92.1846, s0.loss_bbox: 0.1304, s1.loss_cls: 0.0759, s1.acc: 96.4043, s1.loss_bbox: 0.0513, s2.loss_cls: 0.0216, s2.acc: 98.3340, s2.loss_bbox: 0.0104, loss: 0.6928
2021-10-09 10:20:21,221 - mmdet - INFO - Epoch [2][100/1109]	lr: 1.998e-03, eta: 6:01:06, time: 0.400, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.0905, loss_rpn_bbox: 0.0275, s0.loss_cls: 0.3080, s0.acc: 91.9521, s0.loss_bbox: 0.1324, s1.loss_cls: 0.0808, s1.acc: 96.2305, s1.loss_bbox: 0.0552, s2.loss_cls: 0.0232, s2.acc: 98.2012, s2.loss_bbox: 0.0110, loss: 0.7286
2021-10-09 10:20:40,837 - mmdet - INFO - Epoch [2][150/1109]	lr: 1.998e-03, eta: 6:00:31, time: 0.392, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.0930, loss_rpn_bbox: 0.0312, s0.loss_cls: 0.3166, s0.acc: 91.1904, s0.loss_bbox: 0.1456, s1.loss_cls: 0.0868, s1.acc: 95.7773, s1.loss_bbox: 0.0615, s2.loss_cls: 0.0248, s2.acc: 98.0127, s2.loss_bbox: 0.0124, loss: 0.7719
2021-10-09 10:21:00,343 - mmdet - INFO - Epoch [2][200/1109]	lr: 1.998e-03, eta: 5:59:52, time: 0.390, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.0974, loss_rpn_bbox: 0.0318, s0.loss_cls: 0.2759, s0.acc: 92.8154, s0.loss_bbox: 0.1107, s1.loss_cls: 0.0735, s1.acc: 96.6660, s1.loss_bbox: 0.0434, s2.loss_cls: 0.0212, s2.acc: 98.4209, s2.loss_bbox: 0.0085, loss: 0.6623
2021-10-09 10:21:19,997 - mmdet - INFO - Epoch [2][250/1109]	lr: 1.998e-03, eta: 5:59:21, time: 0.393, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.0884, loss_rpn_bbox: 0.0273, s0.loss_cls: 0.2838, s0.acc: 92.3486, s0.loss_bbox: 0.1325, s1.loss_cls: 0.0759, s1.acc: 96.3242, s1.loss_bbox: 0.0530, s2.loss_cls: 0.0212, s2.acc: 98.2939, s2.loss_bbox: 0.0104, loss: 0.6925
2021-10-09 10:21:39,750 - mmdet - INFO - Epoch [2][300/1109]	lr: 1.998e-03, eta: 5:58:54, time: 0.395, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.0854, loss_rpn_bbox: 0.0249, s0.loss_cls: 0.2796, s0.acc: 92.0811, s0.loss_bbox: 0.1250, s1.loss_cls: 0.0757, s1.acc: 96.1758, s1.loss_bbox: 0.0535, s2.loss_cls: 0.0213, s2.acc: 98.2354, s2.loss_bbox: 0.0117, loss: 0.6772
2021-10-09 10:21:59,585 - mmdet - INFO - Epoch [2][350/1109]	lr: 1.998e-03, eta: 5:58:31, time: 0.397, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.0939, loss_rpn_bbox: 0.0281, s0.loss_cls: 0.2972, s0.acc: 91.6963, s0.loss_bbox: 0.1380, s1.loss_cls: 0.0816, s1.acc: 95.9053, s1.loss_bbox: 0.0586, s2.loss_cls: 0.0236, s2.acc: 98.0146, s2.loss_bbox: 0.0122, loss: 0.7332
2021-10-09 10:22:19,273 - mmdet - INFO - Epoch [2][400/1109]	lr: 1.998e-03, eta: 5:58:02, time: 0.394, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.1113, loss_rpn_bbox: 0.0352, s0.loss_cls: 0.3237, s0.acc: 91.2275, s0.loss_bbox: 0.1436, s1.loss_cls: 0.0872, s1.acc: 95.8252, s1.loss_bbox: 0.0577, s2.loss_cls: 0.0252, s2.acc: 98.0312, s2.loss_bbox: 0.0118, loss: 0.7958
2021-10-09 10:22:38,905 - mmdet - INFO - Epoch [2][450/1109]	lr: 1.998e-03, eta: 5:57:33, time: 0.393, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.0865, loss_rpn_bbox: 0.0279, s0.loss_cls: 0.2870, s0.acc: 92.3164, s0.loss_bbox: 0.1211, s1.loss_cls: 0.0772, s1.acc: 96.2930, s1.loss_bbox: 0.0513, s2.loss_cls: 0.0216, s2.acc: 98.2607, s2.loss_bbox: 0.0104, loss: 0.6829
2021-10-09 10:22:58,376 - mmdet - INFO - Epoch [2][500/1109]	lr: 1.998e-03, eta: 5:56:58, time: 0.389, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.0756, loss_rpn_bbox: 0.0244, s0.loss_cls: 0.2672, s0.acc: 92.5869, s0.loss_bbox: 0.1124, s1.loss_cls: 0.0709, s1.acc: 96.5020, s1.loss_bbox: 0.0453, s2.loss_cls: 0.0206, s2.acc: 98.2783, s2.loss_bbox: 0.0103, loss: 0.6267
2021-10-09 10:23:17,937 - mmdet - INFO - Epoch [2][550/1109]	lr: 1.998e-03, eta: 5:56:28, time: 0.391, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.0875, loss_rpn_bbox: 0.0264, s0.loss_cls: 0.2795, s0.acc: 92.2373, s0.loss_bbox: 0.1186, s1.loss_cls: 0.0794, s1.acc: 96.0986, s1.loss_bbox: 0.0525, s2.loss_cls: 0.0223, s2.acc: 98.1914, s2.loss_bbox: 0.0110, loss: 0.6773
2021-10-09 10:23:37,449 - mmdet - INFO - Epoch [2][600/1109]	lr: 1.998e-03, eta: 5:55:56, time: 0.390, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.0682, loss_rpn_bbox: 0.0229, s0.loss_cls: 0.2765, s0.acc: 92.3955, s0.loss_bbox: 0.1221, s1.loss_cls: 0.0728, s1.acc: 96.3877, s1.loss_bbox: 0.0515, s2.loss_cls: 0.0200, s2.acc: 98.3184, s2.loss_bbox: 0.0106, loss: 0.6446
2021-10-09 10:23:57,006 - mmdet - INFO - Epoch [2][650/1109]	lr: 1.998e-03, eta: 5:55:27, time: 0.391, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.0703, loss_rpn_bbox: 0.0251, s0.loss_cls: 0.2962, s0.acc: 91.5967, s0.loss_bbox: 0.1348, s1.loss_cls: 0.0824, s1.acc: 95.8662, s1.loss_bbox: 0.0584, s2.loss_cls: 0.0226, s2.acc: 98.1035, s2.loss_bbox: 0.0127, loss: 0.7025
2021-10-09 10:24:16,589 - mmdet - INFO - Epoch [2][700/1109]	lr: 1.998e-03, eta: 5:54:59, time: 0.392, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.0763, loss_rpn_bbox: 0.0245, s0.loss_cls: 0.2785, s0.acc: 92.0908, s0.loss_bbox: 0.1242, s1.loss_cls: 0.0777, s1.acc: 95.9531, s1.loss_bbox: 0.0540, s2.loss_cls: 0.0227, s2.acc: 98.0225, s2.loss_bbox: 0.0119, loss: 0.6699
2021-10-09 10:24:36,057 - mmdet - INFO - Epoch [2][750/1109]	lr: 1.998e-03, eta: 5:54:28, time: 0.389, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.0844, loss_rpn_bbox: 0.0245, s0.loss_cls: 0.2795, s0.acc: 92.2754, s0.loss_bbox: 0.1183, s1.loss_cls: 0.0742, s1.acc: 96.3506, s1.loss_bbox: 0.0485, s2.loss_cls: 0.0212, s2.acc: 98.2236, s2.loss_bbox: 0.0105, loss: 0.6610
2021-10-09 10:24:55,542 - mmdet - INFO - Epoch [2][800/1109]	lr: 1.998e-03, eta: 5:53:58, time: 0.390, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.0751, loss_rpn_bbox: 0.0251, s0.loss_cls: 0.2674, s0.acc: 92.3438, s0.loss_bbox: 0.1213, s1.loss_cls: 0.0731, s1.acc: 96.3008, s1.loss_bbox: 0.0506, s2.loss_cls: 0.0202, s2.acc: 98.2773, s2.loss_bbox: 0.0104, loss: 0.6431
2021-10-09 10:25:15,598 - mmdet - INFO - Epoch [2][850/1109]	lr: 1.998e-03, eta: 5:53:44, time: 0.401, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.0958, loss_rpn_bbox: 0.0264, s0.loss_cls: 0.3111, s0.acc: 91.2451, s0.loss_bbox: 0.1413, s1.loss_cls: 0.0872, s1.acc: 95.7236, s1.loss_bbox: 0.0580, s2.loss_cls: 0.0252, s2.acc: 97.9531, s2.loss_bbox: 0.0122, loss: 0.7571
2021-10-09 10:25:35,476 - mmdet - INFO - Epoch [2][900/1109]	lr: 1.998e-03, eta: 5:53:25, time: 0.398, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.0927, loss_rpn_bbox: 0.0254, s0.loss_cls: 0.3026, s0.acc: 91.6455, s0.loss_bbox: 0.1309, s1.loss_cls: 0.0820, s1.acc: 96.0293, s1.loss_bbox: 0.0542, s2.loss_cls: 0.0234, s2.acc: 98.1279, s2.loss_bbox: 0.0117, loss: 0.7229
2021-10-09 10:25:54,888 - mmdet - INFO - Epoch [2][950/1109]	lr: 1.998e-03, eta: 5:52:54, time: 0.388, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.0686, loss_rpn_bbox: 0.0241, s0.loss_cls: 0.2620, s0.acc: 92.6797, s0.loss_bbox: 0.1066, s1.loss_cls: 0.0703, s1.acc: 96.4707, s1.loss_bbox: 0.0471, s2.loss_cls: 0.0196, s2.acc: 98.2549, s2.loss_bbox: 0.0107, loss: 0.6091
2021-10-09 10:26:14,671 - mmdet - INFO - Epoch [2][1000/1109]	lr: 1.998e-03, eta: 5:52:33, time: 0.396, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.0769, loss_rpn_bbox: 0.0230, s0.loss_cls: 0.2996, s0.acc: 91.7686, s0.loss_bbox: 0.1311, s1.loss_cls: 0.0805, s1.acc: 96.0332, s1.loss_bbox: 0.0545, s2.loss_cls: 0.0226, s2.acc: 98.0469, s2.loss_bbox: 0.0123, loss: 0.7005
2021-10-09 10:26:34,491 - mmdet - INFO - Epoch [2][1050/1109]	lr: 1.998e-03, eta: 5:52:13, time: 0.396, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.0988, loss_rpn_bbox: 0.0344, s0.loss_cls: 0.3016, s0.acc: 91.2217, s0.loss_bbox: 0.1429, s1.loss_cls: 0.0885, s1.acc: 95.3916, s1.loss_bbox: 0.0637, s2.loss_cls: 0.0257, s2.acc: 97.7861, s2.loss_bbox: 0.0133, loss: 0.7688
2021-10-09 10:26:54,203 - mmdet - INFO - Epoch [2][1100/1109]	lr: 1.998e-03, eta: 5:51:50, time: 0.394, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.0790, loss_rpn_bbox: 0.0278, s0.loss_cls: 0.3136, s0.acc: 91.0498, s0.loss_bbox: 0.1347, s1.loss_cls: 0.0901, s1.acc: 95.2607, s1.loss_bbox: 0.0659, s2.loss_cls: 0.0248, s2.acc: 97.7646, s2.loss_bbox: 0.0146, loss: 0.7506
2021-10-09 10:27:29,511 - mmdet - INFO - Evaluating bbox...
2021-10-09 10:27:36,565 - mmdet - INFO - Now best checkpoint is saved as best_bbox_mAP_50_epoch_2.pth.
2021-10-09 10:27:36,565 - mmdet - INFO - Best bbox_mAP_50 is 0.2710 at 2 epoch.
2021-10-09 10:27:36,567 - mmdet - INFO - Exp name: HTC_x101_64x4d_FPN_Mosaic.py
2021-10-09 10:27:36,567 - mmdet - INFO - Epoch(val) [2][448]	bbox_mAP: 0.1490, bbox_mAP_50: 0.2710, bbox_mAP_75: 0.1340, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0080, bbox_mAP_l: 0.1800, bbox_mAP_copypaste: 0.149 0.271 0.134 0.000 0.008 0.180
2021-10-09 10:27:58,971 - mmdet - INFO - Epoch [3][50/1109]	lr: 1.992e-03, eta: 5:51:03, time: 0.448, data_time: 0.049, memory: 3365, loss_rpn_cls: 0.0555, loss_rpn_bbox: 0.0188, s0.loss_cls: 0.2573, s0.acc: 92.3750, s0.loss_bbox: 0.1118, s1.loss_cls: 0.0693, s1.acc: 96.2588, s1.loss_bbox: 0.0497, s2.loss_cls: 0.0186, s2.acc: 98.2832, s2.loss_bbox: 0.0114, loss: 0.5924
2021-10-09 10:28:18,451 - mmdet - INFO - Epoch [3][100/1109]	lr: 1.992e-03, eta: 5:50:36, time: 0.390, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.0714, loss_rpn_bbox: 0.0234, s0.loss_cls: 0.2640, s0.acc: 92.3926, s0.loss_bbox: 0.1198, s1.loss_cls: 0.0730, s1.acc: 96.1768, s1.loss_bbox: 0.0511, s2.loss_cls: 0.0208, s2.acc: 98.1602, s2.loss_bbox: 0.0113, loss: 0.6347
2021-10-09 10:28:37,922 - mmdet - INFO - Epoch [3][150/1109]	lr: 1.992e-03, eta: 5:50:09, time: 0.389, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.0693, loss_rpn_bbox: 0.0211, s0.loss_cls: 0.2675, s0.acc: 92.2461, s0.loss_bbox: 0.1152, s1.loss_cls: 0.0724, s1.acc: 96.1807, s1.loss_bbox: 0.0514, s2.loss_cls: 0.0203, s2.acc: 98.1680, s2.loss_bbox: 0.0116, loss: 0.6287
2021-10-09 10:28:57,666 - mmdet - INFO - Epoch [3][200/1109]	lr: 1.992e-03, eta: 5:49:48, time: 0.395, data_time: 0.005, memory: 3365, loss_rpn_cls: 0.0747, loss_rpn_bbox: 0.0251, s0.loss_cls: 0.3045, s0.acc: 91.4717, s0.loss_bbox: 0.1331, s1.loss_cls: 0.0876, s1.acc: 95.5615, s1.loss_bbox: 0.0623, s2.loss_cls: 0.0243, s2.acc: 97.8711, s2.loss_bbox: 0.0134, loss: 0.7250
