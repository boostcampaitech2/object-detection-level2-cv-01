2021-10-12 07:28:23,487 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]
CUDA available: True
GPU 0: Tesla V100-PCIE-32GB
CUDA_HOME: None
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.5.3
MMCV: 1.3.14
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.0
MMDetection: 2.17.0+044cccd
------------------------------------------------------------

2021-10-12 07:28:24,008 - mmdet - INFO - Distributed training: False
2021-10-12 07:28:24,509 - mmdet - INFO - Config:
dataset_type = 'CocoDataset'
data_root = '/opt/ml/detection/dataset/'
classes = [
    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',
    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
]
img_norm_cfg = dict(mean=[0, 0, 0], std=[255.0, 255.0, 255.0], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(300, 300), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[0, 0, 0],
        std=[255.0, 255.0, 255.0],
        to_rgb=True),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(300, 300),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[0, 0, 0],
                std=[255.0, 255.0, 255.0],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/train_kfold1.json',
        img_prefix='/opt/ml/detection/dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(300, 300), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[0, 0, 0],
                std=[255.0, 255.0, 255.0],
                to_rgb=True),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/val_kfold1.json',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        img_prefix='/opt/ml/detection/dataset/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(300, 300),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[0, 0, 0],
                        std=[255.0, 255.0, 255.0],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/test.json',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        img_prefix='/opt/ml/detection/dataset/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(300, 300),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[0, 0, 0],
                        std=[255.0, 255.0, 255.0],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP_50')
checkpoint_config = dict(interval=100)
log_config = dict(
    interval=50,
    hooks=[
        dict(type='TextLoggerHook'),
        dict(type='WandbLoggerHook', init_kwargs=dict(project='mmdetection'))
    ])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = '/opt/ml/detection/object-detection-level2-cv-01/work_dirs/HTC_x101_64x4d_FPN_Focal/best_bbox_mAP_50_epoch_13.pth'
resume_from = None
workflow = [('train', 1)]
optimizer = dict(type='SGD', lr=0.002, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='CosineAnnealing',
    warmup='linear',
    warmup_iters=1000,
    warmup_ratio=0.01,
    min_lr=1e-06)
runner = dict(type='EpochBasedRunner', max_epochs=50)
model = dict(
    type='HybridTaskCascade',
    backbone=dict(
        type='ResNeXt',
        depth=101,
        groups=64,
        base_width=4,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(
            type='Pretrained', checkpoint='open-mmlab://resnext101_64x4d')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(type='FocalLoss'),
        loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0)),
    roi_head=dict(
        type='HybridTaskCascadeRoIHead',
        interleaved=True,
        mask_info_flow=False,
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(type='FocalLoss'),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=True,
                loss_cls=dict(type='FocalLoss'),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=True,
                loss_cls=dict(type='FocalLoss'),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))
        ]),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.001,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100,
            mask_thr_binary=0.5)))
work_dir = './work_dirs/HTC_x101_64x4d_FPN_Focal_restart'
gpu_ids = range(0, 1)

2021-10-12 07:28:24,510 - mmdet - INFO - Set random seed to 2021, deterministic: True
2021-10-12 07:28:26,027 - mmdet - INFO - initialize ResNeXt with init_cfg {'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnext101_64x4d'}
2021-10-12 07:28:26,318 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2021-10-12 07:28:26,344 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2021-10-12 07:28:26,353 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-12 07:28:26,669 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-12 07:28:26,986 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.conv1.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.conv2.weight - torch.Size([256, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.conv3.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.conv1.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.conv2.weight - torch.Size([256, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.conv3.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.conv1.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.conv2.weight - torch.Size([256, 4, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.conv3.weight - torch.Size([256, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.conv1.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.conv2.weight - torch.Size([512, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.conv3.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.conv1.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.conv2.weight - torch.Size([512, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.conv3.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.conv1.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.conv2.weight - torch.Size([512, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.conv3.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.conv1.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.conv2.weight - torch.Size([512, 8, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.conv3.weight - torch.Size([512, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.conv1.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.conv2.weight - torch.Size([1024, 16, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn2.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn2.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.conv3.weight - torch.Size([1024, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.conv1.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.conv2.weight - torch.Size([2048, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn2.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn2.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.conv3.weight - torch.Size([2048, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.conv1.weight - torch.Size([2048, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.conv2.weight - torch.Size([2048, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn2.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn2.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.conv3.weight - torch.Size([2048, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.conv1.weight - torch.Size([2048, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.conv2.weight - torch.Size([2048, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn2.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn2.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.conv3.weight - torch.Size([2048, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnext101_64x4d 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([6, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([6]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 
2021-10-12 07:28:30,894 - mmdet - INFO - load checkpoint from /opt/ml/detection/object-detection-level2-cv-01/work_dirs/HTC_x101_64x4d_FPN_Focal/best_bbox_mAP_50_epoch_13.pth
2021-10-12 07:28:30,894 - mmdet - INFO - Use load_from_local loader
2021-10-12 07:28:31,661 - mmdet - INFO - Start running, host: root@00a46a6c3ac0, work_dir: /opt/ml/detection/object-detection-level2-cv-01/work_dirs/HTC_x101_64x4d_FPN_Focal_restart
2021-10-12 07:28:31,662 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_run:
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
2021-10-12 07:28:31,662 - mmdet - INFO - workflow: [('train', 1)], max: 50 epochs
2021-10-12 07:29:00,097 - mmdet - INFO - Epoch [1][50/1109]	lr: 1.170e-04, eta: 6:42:41, time: 0.436, data_time: 0.048, memory: 3366, loss_rpn_cls: 0.2538, loss_rpn_bbox: 0.0453, s0.loss_cls: 0.0505, s0.acc: 91.1699, s0.loss_bbox: 0.1317, s1.loss_cls: 0.0183, s1.acc: 94.4453, s1.loss_bbox: 0.0756, s2.loss_cls: 0.0061, s2.acc: 97.1152, s2.loss_bbox: 0.0190, loss: 0.6003
2021-10-12 07:29:19,528 - mmdet - INFO - Epoch [1][100/1109]	lr: 2.160e-04, eta: 6:20:25, time: 0.389, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.2556, loss_rpn_bbox: 0.0387, s0.loss_cls: 0.0473, s0.acc: 91.5215, s0.loss_bbox: 0.1190, s1.loss_cls: 0.0169, s1.acc: 94.7422, s1.loss_bbox: 0.0682, s2.loss_cls: 0.0055, s2.acc: 97.4424, s2.loss_bbox: 0.0163, loss: 0.5677
2021-10-12 07:29:38,641 - mmdet - INFO - Epoch [1][150/1109]	lr: 3.150e-04, eta: 6:10:49, time: 0.382, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.2316, loss_rpn_bbox: 0.0396, s0.loss_cls: 0.0483, s0.acc: 91.2676, s0.loss_bbox: 0.1181, s1.loss_cls: 0.0175, s1.acc: 94.6406, s1.loss_bbox: 0.0680, s2.loss_cls: 0.0056, s2.acc: 97.4141, s2.loss_bbox: 0.0161, loss: 0.5448
2021-10-12 07:29:57,892 - mmdet - INFO - Epoch [1][200/1109]	lr: 4.140e-04, eta: 6:06:29, time: 0.385, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.3121, loss_rpn_bbox: 0.0520, s0.loss_cls: 0.0516, s0.acc: 90.8750, s0.loss_bbox: 0.1317, s1.loss_cls: 0.0185, s1.acc: 94.3887, s1.loss_bbox: 0.0742, s2.loss_cls: 0.0061, s2.acc: 97.2686, s2.loss_bbox: 0.0172, loss: 0.6634
2021-10-12 07:30:17,072 - mmdet - INFO - Epoch [1][250/1109]	lr: 5.130e-04, eta: 6:03:30, time: 0.384, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.7461, loss_rpn_bbox: 0.0615, s0.loss_cls: 0.0483, s0.acc: 92.1270, s0.loss_bbox: 0.1167, s1.loss_cls: 0.0162, s1.acc: 95.6455, s1.loss_bbox: 0.0572, s2.loss_cls: 0.0053, s2.acc: 97.9502, s2.loss_bbox: 0.0130, loss: 1.0644
2021-10-12 07:30:36,370 - mmdet - INFO - Epoch [1][300/1109]	lr: 6.120e-04, eta: 6:01:46, time: 0.386, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.8542, loss_rpn_bbox: 0.0718, s0.loss_cls: 0.0572, s0.acc: 91.1719, s0.loss_bbox: 0.1322, s1.loss_cls: 0.0183, s1.acc: 95.4307, s1.loss_bbox: 0.0601, s2.loss_cls: 0.0059, s2.acc: 97.9326, s2.loss_bbox: 0.0122, loss: 1.2118
2021-10-12 07:30:55,630 - mmdet - INFO - Epoch [1][350/1109]	lr: 7.110e-04, eta: 6:00:20, time: 0.385, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.8411, loss_rpn_bbox: 0.0600, s0.loss_cls: 0.0493, s0.acc: 92.0879, s0.loss_bbox: 0.1186, s1.loss_cls: 0.0158, s1.acc: 95.8301, s1.loss_bbox: 0.0535, s2.loss_cls: 0.0052, s2.acc: 98.0068, s2.loss_bbox: 0.0115, loss: 1.1550
2021-10-12 07:31:14,861 - mmdet - INFO - Epoch [1][400/1109]	lr: 8.100e-04, eta: 5:59:07, time: 0.385, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.9381, loss_rpn_bbox: 0.0721, s0.loss_cls: 0.0529, s0.acc: 91.6494, s0.loss_bbox: 0.1306, s1.loss_cls: 0.0171, s1.acc: 95.6924, s1.loss_bbox: 0.0579, s2.loss_cls: 0.0055, s2.acc: 98.0088, s2.loss_bbox: 0.0120, loss: 1.2862
2021-10-12 07:31:34,084 - mmdet - INFO - Epoch [1][450/1109]	lr: 9.090e-04, eta: 5:58:05, time: 0.384, data_time: 0.005, memory: 3366, loss_rpn_cls: 1.0958, loss_rpn_bbox: 0.0750, s0.loss_cls: 0.0532, s0.acc: 92.1133, s0.loss_bbox: 0.1296, s1.loss_cls: 0.0168, s1.acc: 96.0791, s1.loss_bbox: 0.0508, s2.loss_cls: 0.0056, s2.acc: 98.1475, s2.loss_bbox: 0.0110, loss: 1.4379
2021-10-12 07:31:53,391 - mmdet - INFO - Epoch [1][500/1109]	lr: 1.008e-03, eta: 5:57:21, time: 0.386, data_time: 0.005, memory: 3366, loss_rpn_cls: 1.3542, loss_rpn_bbox: 0.0763, s0.loss_cls: 0.0498, s0.acc: 92.8125, s0.loss_bbox: 0.1124, s1.loss_cls: 0.0157, s1.acc: 96.3721, s1.loss_bbox: 0.0476, s2.loss_cls: 0.0051, s2.acc: 98.2705, s2.loss_bbox: 0.0107, loss: 1.6719
2021-10-12 07:32:12,644 - mmdet - INFO - Epoch [1][550/1109]	lr: 1.107e-03, eta: 5:56:36, time: 0.385, data_time: 0.005, memory: 3366, loss_rpn_cls: 1.2147, loss_rpn_bbox: 0.0806, s0.loss_cls: 0.0619, s0.acc: 91.4180, s0.loss_bbox: 0.1412, s1.loss_cls: 0.0183, s1.acc: 96.0732, s1.loss_bbox: 0.0566, s2.loss_cls: 0.0057, s2.acc: 98.2852, s2.loss_bbox: 0.0107, loss: 1.5897
2021-10-12 07:32:31,814 - mmdet - INFO - Epoch [1][600/1109]	lr: 1.206e-03, eta: 5:55:47, time: 0.383, data_time: 0.005, memory: 3366, loss_rpn_cls: 1.2361, loss_rpn_bbox: 0.0782, s0.loss_cls: 0.0536, s0.acc: 91.8770, s0.loss_bbox: 0.1248, s1.loss_cls: 0.0169, s1.acc: 95.9600, s1.loss_bbox: 0.0543, s2.loss_cls: 0.0056, s2.acc: 98.1299, s2.loss_bbox: 0.0117, loss: 1.5811
2021-10-12 07:32:51,185 - mmdet - INFO - Epoch [1][650/1109]	lr: 1.305e-03, eta: 5:55:20, time: 0.387, data_time: 0.005, memory: 3366, loss_rpn_cls: 1.4549, loss_rpn_bbox: 0.0849, s0.loss_cls: 0.0627, s0.acc: 91.0312, s0.loss_bbox: 0.1486, s1.loss_cls: 0.0209, s1.acc: 95.3926, s1.loss_bbox: 0.0622, s2.loss_cls: 0.0069, s2.acc: 97.7930, s2.loss_bbox: 0.0128, loss: 1.8539
2021-10-12 07:33:10,676 - mmdet - INFO - Epoch [1][700/1109]	lr: 1.404e-03, eta: 5:55:04, time: 0.390, data_time: 0.005, memory: 3366, loss_rpn_cls: 1.0721, loss_rpn_bbox: 0.0797, s0.loss_cls: 0.0583, s0.acc: 91.5381, s0.loss_bbox: 0.1322, s1.loss_cls: 0.0182, s1.acc: 95.8594, s1.loss_bbox: 0.0563, s2.loss_cls: 0.0060, s2.acc: 98.0918, s2.loss_bbox: 0.0119, loss: 1.4348
2021-10-12 07:33:30,116 - mmdet - INFO - Epoch [1][750/1109]	lr: 1.503e-03, eta: 5:54:43, time: 0.389, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.9558, loss_rpn_bbox: 0.0643, s0.loss_cls: 0.0626, s0.acc: 90.1533, s0.loss_bbox: 0.1444, s1.loss_cls: 0.0204, s1.acc: 94.8555, s1.loss_bbox: 0.0683, s2.loss_cls: 0.0068, s2.acc: 97.5332, s2.loss_bbox: 0.0149, loss: 1.3376
2021-10-12 07:33:49,488 - mmdet - INFO - Epoch [1][800/1109]	lr: 1.602e-03, eta: 5:54:18, time: 0.387, data_time: 0.005, memory: 3366, loss_rpn_cls: 1.1595, loss_rpn_bbox: 0.0711, s0.loss_cls: 0.0574, s0.acc: 91.3184, s0.loss_bbox: 0.1284, s1.loss_cls: 0.0182, s1.acc: 95.6064, s1.loss_bbox: 0.0562, s2.loss_cls: 0.0060, s2.acc: 97.9570, s2.loss_bbox: 0.0121, loss: 1.5090
2021-10-12 07:34:08,832 - mmdet - INFO - Epoch [1][850/1109]	lr: 1.701e-03, eta: 5:53:52, time: 0.387, data_time: 0.005, memory: 3366, loss_rpn_cls: 1.3090, loss_rpn_bbox: 0.0858, s0.loss_cls: 0.0644, s0.acc: 91.1680, s0.loss_bbox: 0.1399, s1.loss_cls: 0.0199, s1.acc: 95.6602, s1.loss_bbox: 0.0589, s2.loss_cls: 0.0065, s2.acc: 97.9229, s2.loss_bbox: 0.0133, loss: 1.6976
2021-10-12 07:34:28,114 - mmdet - INFO - Epoch [1][900/1109]	lr: 1.800e-03, eta: 5:53:22, time: 0.386, data_time: 0.005, memory: 3366, loss_rpn_cls: 1.0915, loss_rpn_bbox: 0.0697, s0.loss_cls: 0.0538, s0.acc: 91.9072, s0.loss_bbox: 0.1183, s1.loss_cls: 0.0167, s1.acc: 95.9668, s1.loss_bbox: 0.0527, s2.loss_cls: 0.0054, s2.acc: 98.0684, s2.loss_bbox: 0.0115, loss: 1.4198
2021-10-12 07:34:47,574 - mmdet - INFO - Epoch [1][950/1109]	lr: 1.899e-03, eta: 5:53:04, time: 0.389, data_time: 0.005, memory: 3366, loss_rpn_cls: 1.1244, loss_rpn_bbox: 0.0788, s0.loss_cls: 0.0617, s0.acc: 91.1191, s0.loss_bbox: 0.1399, s1.loss_cls: 0.0199, s1.acc: 95.3740, s1.loss_bbox: 0.0627, s2.loss_cls: 0.0066, s2.acc: 97.8145, s2.loss_bbox: 0.0128, loss: 1.5069
2021-10-12 07:35:07,159 - mmdet - INFO - Exp name: HTC_x101_64x4d_FPN_Focal_restart.py
2021-10-12 07:35:07,159 - mmdet - INFO - Epoch [1][1000/1109]	lr: 1.998e-03, eta: 5:52:53, time: 0.392, data_time: 0.005, memory: 3366, loss_rpn_cls: 1.5210, loss_rpn_bbox: 0.1252, s0.loss_cls: 0.0573, s0.acc: 92.3779, s0.loss_bbox: 0.1186, s1.loss_cls: 0.0178, s1.acc: 96.2529, s1.loss_bbox: 0.0499, s2.loss_cls: 0.0061, s2.acc: 98.1602, s2.loss_bbox: 0.0100, loss: 1.9059
2021-10-12 07:35:26,409 - mmdet - INFO - Epoch [1][1050/1109]	lr: 2.000e-03, eta: 5:52:24, time: 0.385, data_time: 0.005, memory: 3366, loss_rpn_cls: 1.1481, loss_rpn_bbox: 0.0748, s0.loss_cls: 0.0502, s0.acc: 92.4834, s0.loss_bbox: 0.1107, s1.loss_cls: 0.0155, s1.acc: 96.2373, s1.loss_bbox: 0.0485, s2.loss_cls: 0.0051, s2.acc: 98.2217, s2.loss_bbox: 0.0106, loss: 1.4635
2021-10-12 07:35:46,057 - mmdet - INFO - Epoch [1][1100/1109]	lr: 2.000e-03, eta: 5:52:15, time: 0.393, data_time: 0.005, memory: 3366, loss_rpn_cls: 1.0792, loss_rpn_bbox: 0.0781, s0.loss_cls: 0.0637, s0.acc: 90.5127, s0.loss_bbox: 0.1461, s1.loss_cls: 0.0200, s1.acc: 95.2783, s1.loss_bbox: 0.0624, s2.loss_cls: 0.0064, s2.acc: 97.8184, s2.loss_bbox: 0.0129, loss: 1.4688
2021-10-12 07:36:21,313 - mmdet - INFO - Evaluating bbox...
2021-10-12 07:36:27,702 - mmdet - INFO - Now best checkpoint is saved as best_bbox_mAP_50_epoch_1.pth.
2021-10-12 07:36:27,702 - mmdet - INFO - Best bbox_mAP_50 is 0.0590 at 1 epoch.
2021-10-12 07:36:27,704 - mmdet - INFO - Exp name: HTC_x101_64x4d_FPN_Focal_restart.py
2021-10-12 07:36:27,704 - mmdet - INFO - Epoch(val) [1][448]	bbox_mAP: 0.0310, bbox_mAP_50: 0.0590, bbox_mAP_75: 0.0310, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0040, bbox_mAP_l: 0.0390, bbox_mAP_copypaste: 0.031 0.059 0.031 0.000 0.004 0.039
2021-10-12 07:36:49,245 - mmdet - INFO - Epoch [2][50/1109]	lr: 1.998e-03, eta: 5:50:45, time: 0.431, data_time: 0.049, memory: 3366, loss_rpn_cls: 0.8854, loss_rpn_bbox: 0.0588, s0.loss_cls: 0.0583, s0.acc: 90.9189, s0.loss_bbox: 0.1258, s1.loss_cls: 0.0184, s1.acc: 95.2920, s1.loss_bbox: 0.0602, s2.loss_cls: 0.0056, s2.acc: 97.8613, s2.loss_bbox: 0.0128, loss: 1.2253
2021-10-12 07:37:09,115 - mmdet - INFO - Epoch [2][100/1109]	lr: 1.998e-03, eta: 5:50:48, time: 0.397, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.9771, loss_rpn_bbox: 0.0666, s0.loss_cls: 0.0548, s0.acc: 91.5273, s0.loss_bbox: 0.1234, s1.loss_cls: 0.0175, s1.acc: 95.5107, s1.loss_bbox: 0.0571, s2.loss_cls: 0.0056, s2.acc: 97.8818, s2.loss_bbox: 0.0125, loss: 1.3146
2021-10-12 07:37:28,567 - mmdet - INFO - Epoch [2][150/1109]	lr: 1.998e-03, eta: 5:50:31, time: 0.389, data_time: 0.005, memory: 3366, loss_rpn_cls: 1.0410, loss_rpn_bbox: 0.0633, s0.loss_cls: 0.0587, s0.acc: 90.6914, s0.loss_bbox: 0.1365, s1.loss_cls: 0.0191, s1.acc: 94.9639, s1.loss_bbox: 0.0663, s2.loss_cls: 0.0062, s2.acc: 97.6201, s2.loss_bbox: 0.0149, loss: 1.4060
2021-10-12 07:37:47,853 - mmdet - INFO - Epoch [2][200/1109]	lr: 1.998e-03, eta: 5:50:06, time: 0.386, data_time: 0.005, memory: 3366, loss_rpn_cls: 1.0023, loss_rpn_bbox: 0.0729, s0.loss_cls: 0.0540, s0.acc: 91.8984, s0.loss_bbox: 0.1124, s1.loss_cls: 0.0165, s1.acc: 96.0283, s1.loss_bbox: 0.0494, s2.loss_cls: 0.0052, s2.acc: 98.1377, s2.loss_bbox: 0.0103, loss: 1.3230
2021-10-12 07:38:07,369 - mmdet - INFO - Epoch [2][250/1109]	lr: 1.998e-03, eta: 5:49:51, time: 0.390, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.8640, loss_rpn_bbox: 0.0672, s0.loss_cls: 0.0530, s0.acc: 91.5078, s0.loss_bbox: 0.1240, s1.loss_cls: 0.0170, s1.acc: 95.5098, s1.loss_bbox: 0.0587, s2.loss_cls: 0.0054, s2.acc: 97.9111, s2.loss_bbox: 0.0129, loss: 1.2022
2021-10-12 07:38:26,929 - mmdet - INFO - Epoch [2][300/1109]	lr: 1.998e-03, eta: 5:49:38, time: 0.391, data_time: 0.005, memory: 3366, loss_rpn_cls: 1.1803, loss_rpn_bbox: 0.0726, s0.loss_cls: 0.0558, s0.acc: 91.3906, s0.loss_bbox: 0.1273, s1.loss_cls: 0.0172, s1.acc: 95.6426, s1.loss_bbox: 0.0587, s2.loss_cls: 0.0054, s2.acc: 98.0088, s2.loss_bbox: 0.0123, loss: 1.5295
2021-10-12 07:38:46,412 - mmdet - INFO - Epoch [2][350/1109]	lr: 1.998e-03, eta: 5:49:21, time: 0.390, data_time: 0.005, memory: 3366, loss_rpn_cls: 1.1619, loss_rpn_bbox: 0.0716, s0.loss_cls: 0.0563, s0.acc: 91.2725, s0.loss_bbox: 0.1236, s1.loss_cls: 0.0179, s1.acc: 95.4463, s1.loss_bbox: 0.0587, s2.loss_cls: 0.0060, s2.acc: 97.7441, s2.loss_bbox: 0.0127, loss: 1.5088
2021-10-12 07:39:05,887 - mmdet - INFO - Epoch [2][400/1109]	lr: 1.998e-03, eta: 5:49:04, time: 0.389, data_time: 0.005, memory: 3366, loss_rpn_cls: 1.0695, loss_rpn_bbox: 0.0719, s0.loss_cls: 0.0619, s0.acc: 90.7197, s0.loss_bbox: 0.1416, s1.loss_cls: 0.0199, s1.acc: 95.1455, s1.loss_bbox: 0.0646, s2.loss_cls: 0.0066, s2.acc: 97.6348, s2.loss_bbox: 0.0143, loss: 1.4502
2021-10-12 07:39:25,160 - mmdet - INFO - Epoch [2][450/1109]	lr: 1.998e-03, eta: 5:48:40, time: 0.385, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.9031, loss_rpn_bbox: 0.0624, s0.loss_cls: 0.0556, s0.acc: 91.4893, s0.loss_bbox: 0.1199, s1.loss_cls: 0.0173, s1.acc: 95.6572, s1.loss_bbox: 0.0546, s2.loss_cls: 0.0056, s2.acc: 97.9209, s2.loss_bbox: 0.0126, loss: 1.2311
2021-10-12 07:39:44,546 - mmdet - INFO - Epoch [2][500/1109]	lr: 1.998e-03, eta: 5:48:19, time: 0.388, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.9906, loss_rpn_bbox: 0.0654, s0.loss_cls: 0.0532, s0.acc: 91.7354, s0.loss_bbox: 0.1113, s1.loss_cls: 0.0165, s1.acc: 95.8467, s1.loss_bbox: 0.0504, s2.loss_cls: 0.0052, s2.acc: 98.0527, s2.loss_bbox: 0.0115, loss: 1.3039
2021-10-12 07:40:04,106 - mmdet - INFO - Epoch [2][550/1109]	lr: 1.998e-03, eta: 5:48:05, time: 0.391, data_time: 0.005, memory: 3366, loss_rpn_cls: 1.1252, loss_rpn_bbox: 0.0782, s0.loss_cls: 0.0556, s0.acc: 91.8818, s0.loss_bbox: 0.1175, s1.loss_cls: 0.0173, s1.acc: 95.8760, s1.loss_bbox: 0.0520, s2.loss_cls: 0.0057, s2.acc: 97.9707, s2.loss_bbox: 0.0118, loss: 1.4633
2021-10-12 07:40:24,039 - mmdet - INFO - Epoch [2][600/1109]	lr: 1.998e-03, eta: 5:48:02, time: 0.399, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.9712, loss_rpn_bbox: 0.0589, s0.loss_cls: 0.0556, s0.acc: 91.7236, s0.loss_bbox: 0.1194, s1.loss_cls: 0.0168, s1.acc: 95.8164, s1.loss_bbox: 0.0542, s2.loss_cls: 0.0052, s2.acc: 98.0547, s2.loss_bbox: 0.0122, loss: 1.2935
2021-10-12 07:40:43,635 - mmdet - INFO - Epoch [2][650/1109]	lr: 1.998e-03, eta: 5:47:48, time: 0.392, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.8920, loss_rpn_bbox: 0.0731, s0.loss_cls: 0.0571, s0.acc: 91.2891, s0.loss_bbox: 0.1254, s1.loss_cls: 0.0179, s1.acc: 95.5293, s1.loss_bbox: 0.0595, s2.loss_cls: 0.0056, s2.acc: 97.9297, s2.loss_bbox: 0.0128, loss: 1.2433
2021-10-12 07:41:03,247 - mmdet - INFO - Epoch [2][700/1109]	lr: 1.998e-03, eta: 5:47:33, time: 0.392, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.8561, loss_rpn_bbox: 0.0619, s0.loss_cls: 0.0540, s0.acc: 91.5352, s0.loss_bbox: 0.1144, s1.loss_cls: 0.0175, s1.acc: 95.3750, s1.loss_bbox: 0.0565, s2.loss_cls: 0.0057, s2.acc: 97.7188, s2.loss_bbox: 0.0137, loss: 1.1800
2021-10-12 07:41:22,705 - mmdet - INFO - Epoch [2][750/1109]	lr: 1.998e-03, eta: 5:47:14, time: 0.389, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.9230, loss_rpn_bbox: 0.0701, s0.loss_cls: 0.0538, s0.acc: 91.7969, s0.loss_bbox: 0.1128, s1.loss_cls: 0.0168, s1.acc: 95.7598, s1.loss_bbox: 0.0520, s2.loss_cls: 0.0054, s2.acc: 97.9512, s2.loss_bbox: 0.0120, loss: 1.2459
2021-10-12 07:41:42,075 - mmdet - INFO - Epoch [2][800/1109]	lr: 1.998e-03, eta: 5:46:53, time: 0.387, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.9226, loss_rpn_bbox: 0.0655, s0.loss_cls: 0.0553, s0.acc: 91.5088, s0.loss_bbox: 0.1202, s1.loss_cls: 0.0173, s1.acc: 95.6533, s1.loss_bbox: 0.0553, s2.loss_cls: 0.0053, s2.acc: 97.9717, s2.loss_bbox: 0.0122, loss: 1.2538
2021-10-12 07:42:01,567 - mmdet - INFO - Epoch [2][850/1109]	lr: 1.998e-03, eta: 5:46:35, time: 0.390, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.9622, loss_rpn_bbox: 0.0588, s0.loss_cls: 0.0582, s0.acc: 91.2217, s0.loss_bbox: 0.1251, s1.loss_cls: 0.0193, s1.acc: 95.1562, s1.loss_bbox: 0.0621, s2.loss_cls: 0.0061, s2.acc: 97.7080, s2.loss_bbox: 0.0132, loss: 1.3051
2021-10-12 07:42:21,019 - mmdet - INFO - Epoch [2][900/1109]	lr: 1.998e-03, eta: 5:46:16, time: 0.389, data_time: 0.005, memory: 3366, loss_rpn_cls: 1.1013, loss_rpn_bbox: 0.0663, s0.loss_cls: 0.0570, s0.acc: 91.4160, s0.loss_bbox: 0.1242, s1.loss_cls: 0.0181, s1.acc: 95.5098, s1.loss_bbox: 0.0588, s2.loss_cls: 0.0055, s2.acc: 97.9082, s2.loss_bbox: 0.0127, loss: 1.4440
2021-10-12 07:42:40,453 - mmdet - INFO - Epoch [2][950/1109]	lr: 1.998e-03, eta: 5:45:56, time: 0.389, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.8635, loss_rpn_bbox: 0.0565, s0.loss_cls: 0.0499, s0.acc: 92.2773, s0.loss_bbox: 0.1020, s1.loss_cls: 0.0156, s1.acc: 95.9160, s1.loss_bbox: 0.0492, s2.loss_cls: 0.0048, s2.acc: 98.0332, s2.loss_bbox: 0.0117, loss: 1.1533
2021-10-12 07:42:59,906 - mmdet - INFO - Epoch [2][1000/1109]	lr: 1.998e-03, eta: 5:45:37, time: 0.389, data_time: 0.005, memory: 3366, loss_rpn_cls: 1.0539, loss_rpn_bbox: 0.0724, s0.loss_cls: 0.0582, s0.acc: 91.2041, s0.loss_bbox: 0.1220, s1.loss_cls: 0.0181, s1.acc: 95.4365, s1.loss_bbox: 0.0565, s2.loss_cls: 0.0056, s2.acc: 97.8525, s2.loss_bbox: 0.0128, loss: 1.3995
2021-10-12 07:43:19,833 - mmdet - INFO - Epoch [2][1050/1109]	lr: 1.998e-03, eta: 5:45:30, time: 0.399, data_time: 0.005, memory: 3366, loss_rpn_cls: 1.0215, loss_rpn_bbox: 0.0705, s0.loss_cls: 0.0606, s0.acc: 90.6562, s0.loss_bbox: 0.1411, s1.loss_cls: 0.0203, s1.acc: 94.8184, s1.loss_bbox: 0.0683, s2.loss_cls: 0.0069, s2.acc: 97.3447, s2.loss_bbox: 0.0165, loss: 1.4057
2021-10-12 07:43:39,452 - mmdet - INFO - Epoch [2][1100/1109]	lr: 1.998e-03, eta: 5:45:15, time: 0.392, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.7998, loss_rpn_bbox: 0.0713, s0.loss_cls: 0.0585, s0.acc: 90.5508, s0.loss_bbox: 0.1347, s1.loss_cls: 0.0193, s1.acc: 94.7002, s1.loss_bbox: 0.0690, s2.loss_cls: 0.0061, s2.acc: 97.4893, s2.loss_bbox: 0.0154, loss: 1.1741
2021-10-12 07:44:15,382 - mmdet - INFO - Evaluating bbox...
2021-10-12 07:44:22,069 - mmdet - INFO - Now best checkpoint is saved as best_bbox_mAP_50_epoch_2.pth.
2021-10-12 07:44:22,069 - mmdet - INFO - Best bbox_mAP_50 is 0.0970 at 2 epoch.
2021-10-12 07:44:22,080 - mmdet - INFO - Exp name: HTC_x101_64x4d_FPN_Focal_restart.py
2021-10-12 07:44:22,080 - mmdet - INFO - Epoch(val) [2][448]	bbox_mAP: 0.0530, bbox_mAP_50: 0.0970, bbox_mAP_75: 0.0560, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0080, bbox_mAP_l: 0.0660, bbox_mAP_copypaste: 0.053 0.097 0.056 0.000 0.008 0.066
2021-10-12 07:44:43,977 - mmdet - INFO - Epoch [3][50/1109]	lr: 1.992e-03, eta: 5:44:27, time: 0.438, data_time: 0.049, memory: 3366, loss_rpn_cls: 0.7463, loss_rpn_bbox: 0.0549, s0.loss_cls: 0.0515, s0.acc: 91.8652, s0.loss_bbox: 0.1065, s1.loss_cls: 0.0157, s1.acc: 95.7812, s1.loss_bbox: 0.0519, s2.loss_cls: 0.0048, s2.acc: 98.0430, s2.loss_bbox: 0.0120, loss: 1.0436
2021-10-12 07:45:03,978 - mmdet - INFO - Epoch [3][100/1109]	lr: 1.992e-03, eta: 5:44:20, time: 0.400, data_time: 0.006, memory: 3366, loss_rpn_cls: 0.9622, loss_rpn_bbox: 0.0623, s0.loss_cls: 0.0538, s0.acc: 91.7100, s0.loss_bbox: 0.1180, s1.loss_cls: 0.0168, s1.acc: 95.6787, s1.loss_bbox: 0.0544, s2.loss_cls: 0.0053, s2.acc: 97.9209, s2.loss_bbox: 0.0124, loss: 1.2851
2021-10-12 07:45:23,461 - mmdet - INFO - Epoch [3][150/1109]	lr: 1.992e-03, eta: 5:44:02, time: 0.390, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.8261, loss_rpn_bbox: 0.0508, s0.loss_cls: 0.0532, s0.acc: 91.5146, s0.loss_bbox: 0.1122, s1.loss_cls: 0.0167, s1.acc: 95.5332, s1.loss_bbox: 0.0546, s2.loss_cls: 0.0052, s2.acc: 97.8623, s2.loss_bbox: 0.0132, loss: 1.1320
2021-10-12 07:45:43,088 - mmdet - INFO - Epoch [3][200/1109]	lr: 1.992e-03, eta: 5:43:46, time: 0.393, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.8143, loss_rpn_bbox: 0.0573, s0.loss_cls: 0.0602, s0.acc: 90.4141, s0.loss_bbox: 0.1299, s1.loss_cls: 0.0198, s1.acc: 94.7119, s1.loss_bbox: 0.0659, s2.loss_cls: 0.0063, s2.acc: 97.4277, s2.loss_bbox: 0.0156, loss: 1.1693
2021-10-12 07:46:02,592 - mmdet - INFO - Epoch [3][250/1109]	lr: 1.992e-03, eta: 5:43:28, time: 0.390, data_time: 0.005, memory: 3366, loss_rpn_cls: 1.0338, loss_rpn_bbox: 0.0573, s0.loss_cls: 0.0507, s0.acc: 92.3496, s0.loss_bbox: 0.1052, s1.loss_cls: 0.0164, s1.acc: 95.8633, s1.loss_bbox: 0.0508, s2.loss_cls: 0.0051, s2.acc: 98.0518, s2.loss_bbox: 0.0111, loss: 1.3305
2021-10-12 07:46:22,418 - mmdet - INFO - Epoch [3][300/1109]	lr: 1.992e-03, eta: 5:43:16, time: 0.396, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.9582, loss_rpn_bbox: 0.0626, s0.loss_cls: 0.0495, s0.acc: 92.3613, s0.loss_bbox: 0.1065, s1.loss_cls: 0.0159, s1.acc: 95.9590, s1.loss_bbox: 0.0522, s2.loss_cls: 0.0049, s2.acc: 98.0986, s2.loss_bbox: 0.0114, loss: 1.2612
2021-10-12 07:46:42,051 - mmdet - INFO - Epoch [3][350/1109]	lr: 1.992e-03, eta: 5:43:01, time: 0.393, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.6722, loss_rpn_bbox: 0.0623, s0.loss_cls: 0.0557, s0.acc: 91.0000, s0.loss_bbox: 0.1225, s1.loss_cls: 0.0176, s1.acc: 95.1924, s1.loss_bbox: 0.0617, s2.loss_cls: 0.0054, s2.acc: 97.8008, s2.loss_bbox: 0.0139, loss: 1.0113
2021-10-12 07:47:01,522 - mmdet - INFO - Epoch [3][400/1109]	lr: 1.992e-03, eta: 5:42:41, time: 0.389, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.7675, loss_rpn_bbox: 0.0561, s0.loss_cls: 0.0536, s0.acc: 91.5801, s0.loss_bbox: 0.1162, s1.loss_cls: 0.0170, s1.acc: 95.5098, s1.loss_bbox: 0.0572, s2.loss_cls: 0.0054, s2.acc: 97.7871, s2.loss_bbox: 0.0140, loss: 1.0868
2021-10-12 07:47:21,241 - mmdet - INFO - Epoch [3][450/1109]	lr: 1.992e-03, eta: 5:42:27, time: 0.394, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.7850, loss_rpn_bbox: 0.0722, s0.loss_cls: 0.0601, s0.acc: 90.4072, s0.loss_bbox: 0.1468, s1.loss_cls: 0.0204, s1.acc: 94.5146, s1.loss_bbox: 0.0734, s2.loss_cls: 0.0065, s2.acc: 97.2812, s2.loss_bbox: 0.0165, loss: 1.1809
2021-10-12 07:47:40,819 - mmdet - INFO - Epoch [3][500/1109]	lr: 1.992e-03, eta: 5:42:10, time: 0.392, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.8324, loss_rpn_bbox: 0.0677, s0.loss_cls: 0.0620, s0.acc: 89.9609, s0.loss_bbox: 0.1460, s1.loss_cls: 0.0205, s1.acc: 94.4795, s1.loss_bbox: 0.0732, s2.loss_cls: 0.0064, s2.acc: 97.3984, s2.loss_bbox: 0.0162, loss: 1.2245
2021-10-12 07:48:00,270 - mmdet - INFO - Epoch [3][550/1109]	lr: 1.992e-03, eta: 5:41:50, time: 0.389, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.7631, loss_rpn_bbox: 0.0620, s0.loss_cls: 0.0574, s0.acc: 90.8877, s0.loss_bbox: 0.1263, s1.loss_cls: 0.0185, s1.acc: 95.0449, s1.loss_bbox: 0.0630, s2.loss_cls: 0.0060, s2.acc: 97.5146, s2.loss_bbox: 0.0150, loss: 1.1112
2021-10-12 07:48:19,606 - mmdet - INFO - Epoch [3][600/1109]	lr: 1.992e-03, eta: 5:41:28, time: 0.387, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.6740, loss_rpn_bbox: 0.0485, s0.loss_cls: 0.0506, s0.acc: 91.9033, s0.loss_bbox: 0.1012, s1.loss_cls: 0.0161, s1.acc: 95.6348, s1.loss_bbox: 0.0521, s2.loss_cls: 0.0050, s2.acc: 97.9160, s2.loss_bbox: 0.0127, loss: 0.9603
2021-10-12 07:48:39,060 - mmdet - INFO - Epoch [3][650/1109]	lr: 1.992e-03, eta: 5:41:08, time: 0.389, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.8461, loss_rpn_bbox: 0.0667, s0.loss_cls: 0.0540, s0.acc: 91.4658, s0.loss_bbox: 0.1100, s1.loss_cls: 0.0175, s1.acc: 95.3789, s1.loss_bbox: 0.0555, s2.loss_cls: 0.0056, s2.acc: 97.7207, s2.loss_bbox: 0.0139, loss: 1.1693
2021-10-12 07:48:58,512 - mmdet - INFO - Epoch [3][700/1109]	lr: 1.992e-03, eta: 5:40:49, time: 0.389, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.8105, loss_rpn_bbox: 0.0612, s0.loss_cls: 0.0557, s0.acc: 91.1797, s0.loss_bbox: 0.1179, s1.loss_cls: 0.0181, s1.acc: 95.2314, s1.loss_bbox: 0.0596, s2.loss_cls: 0.0057, s2.acc: 97.6846, s2.loss_bbox: 0.0137, loss: 1.1426
2021-10-12 07:49:17,976 - mmdet - INFO - Epoch [3][750/1109]	lr: 1.992e-03, eta: 5:40:29, time: 0.389, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.9499, loss_rpn_bbox: 0.0649, s0.loss_cls: 0.0583, s0.acc: 90.7012, s0.loss_bbox: 0.1328, s1.loss_cls: 0.0185, s1.acc: 95.0693, s1.loss_bbox: 0.0640, s2.loss_cls: 0.0057, s2.acc: 97.6631, s2.loss_bbox: 0.0142, loss: 1.3083
2021-10-12 07:49:37,543 - mmdet - INFO - Epoch [3][800/1109]	lr: 1.992e-03, eta: 5:40:12, time: 0.391, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.7274, loss_rpn_bbox: 0.0547, s0.loss_cls: 0.0537, s0.acc: 91.2695, s0.loss_bbox: 0.1166, s1.loss_cls: 0.0174, s1.acc: 95.2510, s1.loss_bbox: 0.0598, s2.loss_cls: 0.0054, s2.acc: 97.7578, s2.loss_bbox: 0.0135, loss: 1.0484
2021-10-12 07:49:57,147 - mmdet - INFO - Epoch [3][850/1109]	lr: 1.992e-03, eta: 5:39:54, time: 0.392, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.7460, loss_rpn_bbox: 0.0552, s0.loss_cls: 0.0589, s0.acc: 90.2617, s0.loss_bbox: 0.1358, s1.loss_cls: 0.0199, s1.acc: 94.3799, s1.loss_bbox: 0.0731, s2.loss_cls: 0.0061, s2.acc: 97.3652, s2.loss_bbox: 0.0167, loss: 1.1118
2021-10-12 07:50:16,636 - mmdet - INFO - Epoch [3][900/1109]	lr: 1.992e-03, eta: 5:39:35, time: 0.390, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.8283, loss_rpn_bbox: 0.0571, s0.loss_cls: 0.0524, s0.acc: 91.6514, s0.loss_bbox: 0.1054, s1.loss_cls: 0.0164, s1.acc: 95.6406, s1.loss_bbox: 0.0529, s2.loss_cls: 0.0049, s2.acc: 97.9863, s2.loss_bbox: 0.0123, loss: 1.1296
2021-10-12 07:50:36,330 - mmdet - INFO - Epoch [3][950/1109]	lr: 1.992e-03, eta: 5:39:20, time: 0.394, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.8374, loss_rpn_bbox: 0.0580, s0.loss_cls: 0.0569, s0.acc: 90.6777, s0.loss_bbox: 0.1272, s1.loss_cls: 0.0183, s1.acc: 94.9355, s1.loss_bbox: 0.0645, s2.loss_cls: 0.0056, s2.acc: 97.6318, s2.loss_bbox: 0.0149, loss: 1.1829
2021-10-12 07:50:55,813 - mmdet - INFO - Epoch [3][1000/1109]	lr: 1.992e-03, eta: 5:39:00, time: 0.390, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.8586, loss_rpn_bbox: 0.0541, s0.loss_cls: 0.0525, s0.acc: 91.7207, s0.loss_bbox: 0.1072, s1.loss_cls: 0.0170, s1.acc: 95.4580, s1.loss_bbox: 0.0554, s2.loss_cls: 0.0054, s2.acc: 97.7900, s2.loss_bbox: 0.0129, loss: 1.1631
2021-10-12 07:51:15,388 - mmdet - INFO - Epoch [3][1050/1109]	lr: 1.992e-03, eta: 5:38:42, time: 0.392, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.7878, loss_rpn_bbox: 0.0611, s0.loss_cls: 0.0491, s0.acc: 92.1523, s0.loss_bbox: 0.1043, s1.loss_cls: 0.0151, s1.acc: 95.9648, s1.loss_bbox: 0.0490, s2.loss_cls: 0.0045, s2.acc: 98.1299, s2.loss_bbox: 0.0116, loss: 1.0825
2021-10-12 07:51:35,121 - mmdet - INFO - Epoch [3][1100/1109]	lr: 1.992e-03, eta: 5:38:27, time: 0.395, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.8776, loss_rpn_bbox: 0.0715, s0.loss_cls: 0.0561, s0.acc: 90.9551, s0.loss_bbox: 0.1198, s1.loss_cls: 0.0178, s1.acc: 95.1553, s1.loss_bbox: 0.0588, s2.loss_cls: 0.0056, s2.acc: 97.6533, s2.loss_bbox: 0.0137, loss: 1.2209
2021-10-12 07:52:12,754 - mmdet - INFO - Evaluating bbox...
2021-10-12 07:52:19,481 - mmdet - INFO - Now best checkpoint is saved as best_bbox_mAP_50_epoch_3.pth.
2021-10-12 07:52:19,482 - mmdet - INFO - Best bbox_mAP_50 is 0.1050 at 3 epoch.
2021-10-12 07:52:19,483 - mmdet - INFO - Exp name: HTC_x101_64x4d_FPN_Focal_restart.py
2021-10-12 07:52:19,484 - mmdet - INFO - Epoch(val) [3][448]	bbox_mAP: 0.0550, bbox_mAP_50: 0.1050, bbox_mAP_75: 0.0500, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0090, bbox_mAP_l: 0.0660, bbox_mAP_copypaste: 0.055 0.105 0.050 0.000 0.009 0.066
2021-10-12 07:52:41,292 - mmdet - INFO - Epoch [4][50/1109]	lr: 1.982e-03, eta: 5:37:46, time: 0.436, data_time: 0.049, memory: 3366, loss_rpn_cls: 0.7368, loss_rpn_bbox: 0.0503, s0.loss_cls: 0.0535, s0.acc: 91.2881, s0.loss_bbox: 0.1115, s1.loss_cls: 0.0171, s1.acc: 95.2676, s1.loss_bbox: 0.0565, s2.loss_cls: 0.0054, s2.acc: 97.7197, s2.loss_bbox: 0.0135, loss: 1.0447
2021-10-12 07:53:01,215 - mmdet - INFO - Epoch [4][100/1109]	lr: 1.982e-03, eta: 5:37:33, time: 0.398, data_time: 0.006, memory: 3366, loss_rpn_cls: 0.6650, loss_rpn_bbox: 0.0525, s0.loss_cls: 0.0496, s0.acc: 91.7295, s0.loss_bbox: 0.1068, s1.loss_cls: 0.0160, s1.acc: 95.4668, s1.loss_bbox: 0.0570, s2.loss_cls: 0.0050, s2.acc: 97.8145, s2.loss_bbox: 0.0137, loss: 0.9656
2021-10-12 07:53:20,919 - mmdet - INFO - Epoch [4][150/1109]	lr: 1.982e-03, eta: 5:37:17, time: 0.394, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.5817, loss_rpn_bbox: 0.0482, s0.loss_cls: 0.0531, s0.acc: 91.0479, s0.loss_bbox: 0.1091, s1.loss_cls: 0.0172, s1.acc: 94.9600, s1.loss_bbox: 0.0593, s2.loss_cls: 0.0052, s2.acc: 97.6592, s2.loss_bbox: 0.0141, loss: 0.8879
2021-10-12 07:53:40,369 - mmdet - INFO - Epoch [4][200/1109]	lr: 1.982e-03, eta: 5:36:58, time: 0.389, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.7031, loss_rpn_bbox: 0.0508, s0.loss_cls: 0.0536, s0.acc: 91.1748, s0.loss_bbox: 0.1195, s1.loss_cls: 0.0174, s1.acc: 95.0996, s1.loss_bbox: 0.0603, s2.loss_cls: 0.0055, s2.acc: 97.6914, s2.loss_bbox: 0.0143, loss: 1.0245
2021-10-12 07:54:00,173 - mmdet - INFO - Epoch [4][250/1109]	lr: 1.982e-03, eta: 5:36:43, time: 0.396, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.8832, loss_rpn_bbox: 0.0557, s0.loss_cls: 0.0593, s0.acc: 90.5986, s0.loss_bbox: 0.1382, s1.loss_cls: 0.0192, s1.acc: 94.8613, s1.loss_bbox: 0.0686, s2.loss_cls: 0.0060, s2.acc: 97.5771, s2.loss_bbox: 0.0150, loss: 1.2451
2021-10-12 07:54:20,177 - mmdet - INFO - Epoch [4][300/1109]	lr: 1.982e-03, eta: 5:36:31, time: 0.400, data_time: 0.006, memory: 3366, loss_rpn_cls: 0.8847, loss_rpn_bbox: 0.0639, s0.loss_cls: 0.0509, s0.acc: 92.1631, s0.loss_bbox: 0.1056, s1.loss_cls: 0.0161, s1.acc: 95.8574, s1.loss_bbox: 0.0508, s2.loss_cls: 0.0050, s2.acc: 97.9824, s2.loss_bbox: 0.0123, loss: 1.1893
2021-10-12 07:54:39,802 - mmdet - INFO - Epoch [4][350/1109]	lr: 1.982e-03, eta: 5:36:14, time: 0.393, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.7799, loss_rpn_bbox: 0.0628, s0.loss_cls: 0.0605, s0.acc: 90.1904, s0.loss_bbox: 0.1357, s1.loss_cls: 0.0201, s1.acc: 94.4717, s1.loss_bbox: 0.0708, s2.loss_cls: 0.0062, s2.acc: 97.4102, s2.loss_bbox: 0.0147, loss: 1.1507
2021-10-12 07:54:59,344 - mmdet - INFO - Epoch [4][400/1109]	lr: 1.982e-03, eta: 5:35:55, time: 0.391, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.6871, loss_rpn_bbox: 0.0564, s0.loss_cls: 0.0515, s0.acc: 91.8848, s0.loss_bbox: 0.1051, s1.loss_cls: 0.0164, s1.acc: 95.5664, s1.loss_bbox: 0.0537, s2.loss_cls: 0.0049, s2.acc: 97.9355, s2.loss_bbox: 0.0121, loss: 0.9871
2021-10-12 07:55:18,819 - mmdet - INFO - Epoch [4][450/1109]	lr: 1.982e-03, eta: 5:35:35, time: 0.389, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.9220, loss_rpn_bbox: 0.0523, s0.loss_cls: 0.0528, s0.acc: 91.7764, s0.loss_bbox: 0.1073, s1.loss_cls: 0.0167, s1.acc: 95.6143, s1.loss_bbox: 0.0512, s2.loss_cls: 0.0052, s2.acc: 97.9170, s2.loss_bbox: 0.0118, loss: 1.2194
2021-10-12 07:55:38,303 - mmdet - INFO - Epoch [4][500/1109]	lr: 1.982e-03, eta: 5:35:16, time: 0.390, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.7149, loss_rpn_bbox: 0.0565, s0.loss_cls: 0.0578, s0.acc: 90.7178, s0.loss_bbox: 0.1310, s1.loss_cls: 0.0188, s1.acc: 94.8525, s1.loss_bbox: 0.0653, s2.loss_cls: 0.0058, s2.acc: 97.5723, s2.loss_bbox: 0.0153, loss: 1.0654
2021-10-12 07:55:57,772 - mmdet - INFO - Epoch [4][550/1109]	lr: 1.982e-03, eta: 5:34:56, time: 0.389, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.7293, loss_rpn_bbox: 0.0580, s0.loss_cls: 0.0550, s0.acc: 90.8516, s0.loss_bbox: 0.1148, s1.loss_cls: 0.0178, s1.acc: 94.9648, s1.loss_bbox: 0.0607, s2.loss_cls: 0.0055, s2.acc: 97.6084, s2.loss_bbox: 0.0143, loss: 1.0554
2021-10-12 07:56:17,154 - mmdet - INFO - Epoch [4][600/1109]	lr: 1.982e-03, eta: 5:34:35, time: 0.388, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.7339, loss_rpn_bbox: 0.0552, s0.loss_cls: 0.0476, s0.acc: 92.1172, s0.loss_bbox: 0.0976, s1.loss_cls: 0.0158, s1.acc: 95.6016, s1.loss_bbox: 0.0522, s2.loss_cls: 0.0049, s2.acc: 97.8555, s2.loss_bbox: 0.0123, loss: 1.0195
2021-10-12 07:56:36,569 - mmdet - INFO - Epoch [4][650/1109]	lr: 1.982e-03, eta: 5:34:15, time: 0.388, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.7596, loss_rpn_bbox: 0.0619, s0.loss_cls: 0.0503, s0.acc: 92.0107, s0.loss_bbox: 0.1019, s1.loss_cls: 0.0160, s1.acc: 95.6689, s1.loss_bbox: 0.0517, s2.loss_cls: 0.0050, s2.acc: 97.9170, s2.loss_bbox: 0.0121, loss: 1.0586
2021-10-12 07:56:55,996 - mmdet - INFO - Epoch [4][700/1109]	lr: 1.982e-03, eta: 5:33:55, time: 0.389, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.7322, loss_rpn_bbox: 0.0573, s0.loss_cls: 0.0514, s0.acc: 91.6211, s0.loss_bbox: 0.1140, s1.loss_cls: 0.0165, s1.acc: 95.4316, s1.loss_bbox: 0.0575, s2.loss_cls: 0.0051, s2.acc: 97.7930, s2.loss_bbox: 0.0136, loss: 1.0476
2021-10-12 07:57:15,573 - mmdet - INFO - Epoch [4][750/1109]	lr: 1.982e-03, eta: 5:33:37, time: 0.392, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.7661, loss_rpn_bbox: 0.0575, s0.loss_cls: 0.0572, s0.acc: 90.7715, s0.loss_bbox: 0.1173, s1.loss_cls: 0.0194, s1.acc: 94.6855, s1.loss_bbox: 0.0651, s2.loss_cls: 0.0061, s2.acc: 97.4375, s2.loss_bbox: 0.0155, loss: 1.1041
2021-10-12 07:57:35,408 - mmdet - INFO - Epoch [4][800/1109]	lr: 1.982e-03, eta: 5:33:21, time: 0.397, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.7239, loss_rpn_bbox: 0.0507, s0.loss_cls: 0.0497, s0.acc: 91.8467, s0.loss_bbox: 0.1060, s1.loss_cls: 0.0163, s1.acc: 95.4043, s1.loss_bbox: 0.0565, s2.loss_cls: 0.0050, s2.acc: 97.7832, s2.loss_bbox: 0.0138, loss: 1.0218
2021-10-12 07:57:54,977 - mmdet - INFO - Epoch [4][850/1109]	lr: 1.982e-03, eta: 5:33:03, time: 0.391, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.7372, loss_rpn_bbox: 0.0497, s0.loss_cls: 0.0566, s0.acc: 90.6914, s0.loss_bbox: 0.1247, s1.loss_cls: 0.0187, s1.acc: 94.7363, s1.loss_bbox: 0.0649, s2.loss_cls: 0.0058, s2.acc: 97.4795, s2.loss_bbox: 0.0153, loss: 1.0729
2021-10-12 07:58:14,429 - mmdet - INFO - Epoch [4][900/1109]	lr: 1.982e-03, eta: 5:32:43, time: 0.389, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.6355, loss_rpn_bbox: 0.0505, s0.loss_cls: 0.0517, s0.acc: 91.5557, s0.loss_bbox: 0.1060, s1.loss_cls: 0.0165, s1.acc: 95.4082, s1.loss_bbox: 0.0542, s2.loss_cls: 0.0051, s2.acc: 97.8281, s2.loss_bbox: 0.0127, loss: 0.9322
2021-10-12 07:58:33,997 - mmdet - INFO - Epoch [4][950/1109]	lr: 1.982e-03, eta: 5:32:24, time: 0.391, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.5969, loss_rpn_bbox: 0.0553, s0.loss_cls: 0.0528, s0.acc: 91.2588, s0.loss_bbox: 0.1143, s1.loss_cls: 0.0167, s1.acc: 95.2051, s1.loss_bbox: 0.0583, s2.loss_cls: 0.0051, s2.acc: 97.7275, s2.loss_bbox: 0.0138, loss: 0.9132
2021-10-12 07:58:53,529 - mmdet - INFO - Epoch [4][1000/1109]	lr: 1.982e-03, eta: 5:32:06, time: 0.391, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.7174, loss_rpn_bbox: 0.0553, s0.loss_cls: 0.0523, s0.acc: 91.4404, s0.loss_bbox: 0.1144, s1.loss_cls: 0.0168, s1.acc: 95.3887, s1.loss_bbox: 0.0574, s2.loss_cls: 0.0051, s2.acc: 97.7773, s2.loss_bbox: 0.0127, loss: 1.0315
2021-10-12 07:59:13,285 - mmdet - INFO - Epoch [4][1050/1109]	lr: 1.982e-03, eta: 5:31:49, time: 0.395, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.6658, loss_rpn_bbox: 0.0515, s0.loss_cls: 0.0541, s0.acc: 91.0156, s0.loss_bbox: 0.1220, s1.loss_cls: 0.0177, s1.acc: 95.0371, s1.loss_bbox: 0.0621, s2.loss_cls: 0.0054, s2.acc: 97.6240, s2.loss_bbox: 0.0148, loss: 0.9934
2021-10-12 07:59:33,011 - mmdet - INFO - Epoch [4][1100/1109]	lr: 1.982e-03, eta: 5:31:32, time: 0.395, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.7111, loss_rpn_bbox: 0.0643, s0.loss_cls: 0.0509, s0.acc: 91.8105, s0.loss_bbox: 0.1050, s1.loss_cls: 0.0170, s1.acc: 95.3320, s1.loss_bbox: 0.0565, s2.loss_cls: 0.0053, s2.acc: 97.7471, s2.loss_bbox: 0.0138, loss: 1.0238
2021-10-12 08:00:09,302 - mmdet - INFO - Evaluating bbox...
2021-10-12 08:00:16,020 - mmdet - INFO - Now best checkpoint is saved as best_bbox_mAP_50_epoch_4.pth.
2021-10-12 08:00:16,020 - mmdet - INFO - Best bbox_mAP_50 is 0.1370 at 4 epoch.
2021-10-12 08:00:16,022 - mmdet - INFO - Exp name: HTC_x101_64x4d_FPN_Focal_restart.py
2021-10-12 08:00:16,022 - mmdet - INFO - Epoch(val) [4][448]	bbox_mAP: 0.0730, bbox_mAP_50: 0.1370, bbox_mAP_75: 0.0720, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0090, bbox_mAP_l: 0.0880, bbox_mAP_copypaste: 0.073 0.137 0.072 0.000 0.009 0.088
2021-10-12 08:00:37,520 - mmdet - INFO - Epoch [5][50/1109]	lr: 1.969e-03, eta: 5:30:52, time: 0.430, data_time: 0.049, memory: 3366, loss_rpn_cls: 0.5570, loss_rpn_bbox: 0.0552, s0.loss_cls: 0.0470, s0.acc: 91.9922, s0.loss_bbox: 0.0982, s1.loss_cls: 0.0142, s1.acc: 95.8691, s1.loss_bbox: 0.0471, s2.loss_cls: 0.0044, s2.acc: 98.0186, s2.loss_bbox: 0.0119, loss: 0.8349
2021-10-12 08:00:57,381 - mmdet - INFO - Epoch [5][100/1109]	lr: 1.969e-03, eta: 5:30:37, time: 0.397, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.5906, loss_rpn_bbox: 0.0553, s0.loss_cls: 0.0546, s0.acc: 90.9619, s0.loss_bbox: 0.1155, s1.loss_cls: 0.0179, s1.acc: 94.9424, s1.loss_bbox: 0.0614, s2.loss_cls: 0.0054, s2.acc: 97.6357, s2.loss_bbox: 0.0142, loss: 0.9148
2021-10-12 08:01:16,646 - mmdet - INFO - Epoch [5][150/1109]	lr: 1.969e-03, eta: 5:30:15, time: 0.385, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.6425, loss_rpn_bbox: 0.0464, s0.loss_cls: 0.0486, s0.acc: 91.8818, s0.loss_bbox: 0.0983, s1.loss_cls: 0.0159, s1.acc: 95.4668, s1.loss_bbox: 0.0526, s2.loss_cls: 0.0049, s2.acc: 97.8086, s2.loss_bbox: 0.0126, loss: 0.9219
2021-10-12 08:01:36,011 - mmdet - INFO - Epoch [5][200/1109]	lr: 1.969e-03, eta: 5:29:54, time: 0.387, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.6537, loss_rpn_bbox: 0.0552, s0.loss_cls: 0.0542, s0.acc: 90.8955, s0.loss_bbox: 0.1221, s1.loss_cls: 0.0177, s1.acc: 94.9512, s1.loss_bbox: 0.0642, s2.loss_cls: 0.0053, s2.acc: 97.6494, s2.loss_bbox: 0.0141, loss: 0.9866
2021-10-12 08:01:55,436 - mmdet - INFO - Epoch [5][250/1109]	lr: 1.969e-03, eta: 5:29:34, time: 0.388, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.6196, loss_rpn_bbox: 0.0537, s0.loss_cls: 0.0575, s0.acc: 90.5430, s0.loss_bbox: 0.1250, s1.loss_cls: 0.0191, s1.acc: 94.6113, s1.loss_bbox: 0.0684, s2.loss_cls: 0.0057, s2.acc: 97.4092, s2.loss_bbox: 0.0157, loss: 0.9648
2021-10-12 08:02:14,910 - mmdet - INFO - Epoch [5][300/1109]	lr: 1.969e-03, eta: 5:29:15, time: 0.389, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.6536, loss_rpn_bbox: 0.0521, s0.loss_cls: 0.0507, s0.acc: 91.5205, s0.loss_bbox: 0.1007, s1.loss_cls: 0.0169, s1.acc: 95.1025, s1.loss_bbox: 0.0560, s2.loss_cls: 0.0052, s2.acc: 97.6543, s2.loss_bbox: 0.0142, loss: 0.9495
2021-10-12 08:02:34,308 - mmdet - INFO - Epoch [5][350/1109]	lr: 1.969e-03, eta: 5:28:54, time: 0.388, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.7405, loss_rpn_bbox: 0.0528, s0.loss_cls: 0.0546, s0.acc: 91.1738, s0.loss_bbox: 0.1090, s1.loss_cls: 0.0169, s1.acc: 95.3506, s1.loss_bbox: 0.0538, s2.loss_cls: 0.0051, s2.acc: 97.8174, s2.loss_bbox: 0.0125, loss: 1.0452
2021-10-12 08:02:53,887 - mmdet - INFO - Epoch [5][400/1109]	lr: 1.969e-03, eta: 5:28:36, time: 0.392, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.8156, loss_rpn_bbox: 0.0677, s0.loss_cls: 0.0558, s0.acc: 90.9141, s0.loss_bbox: 0.1239, s1.loss_cls: 0.0187, s1.acc: 94.7471, s1.loss_bbox: 0.0656, s2.loss_cls: 0.0059, s2.acc: 97.4189, s2.loss_bbox: 0.0153, loss: 1.1686
2021-10-12 08:03:13,284 - mmdet - INFO - Epoch [5][450/1109]	lr: 1.969e-03, eta: 5:28:16, time: 0.388, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.6515, loss_rpn_bbox: 0.0476, s0.loss_cls: 0.0529, s0.acc: 91.3721, s0.loss_bbox: 0.1098, s1.loss_cls: 0.0174, s1.acc: 95.0371, s1.loss_bbox: 0.0613, s2.loss_cls: 0.0052, s2.acc: 97.6719, s2.loss_bbox: 0.0143, loss: 0.9600
2021-10-12 08:03:32,734 - mmdet - INFO - Epoch [5][500/1109]	lr: 1.969e-03, eta: 5:27:56, time: 0.389, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.6864, loss_rpn_bbox: 0.0486, s0.loss_cls: 0.0553, s0.acc: 90.9014, s0.loss_bbox: 0.1108, s1.loss_cls: 0.0173, s1.acc: 95.0762, s1.loss_bbox: 0.0566, s2.loss_cls: 0.0052, s2.acc: 97.7158, s2.loss_bbox: 0.0135, loss: 0.9937
2021-10-12 08:03:52,015 - mmdet - INFO - Epoch [5][550/1109]	lr: 1.969e-03, eta: 5:27:34, time: 0.386, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.6635, loss_rpn_bbox: 0.0547, s0.loss_cls: 0.0505, s0.acc: 91.8525, s0.loss_bbox: 0.1071, s1.loss_cls: 0.0162, s1.acc: 95.5166, s1.loss_bbox: 0.0554, s2.loss_cls: 0.0049, s2.acc: 97.8633, s2.loss_bbox: 0.0132, loss: 0.9656
2021-10-12 08:04:11,369 - mmdet - INFO - Epoch [5][600/1109]	lr: 1.969e-03, eta: 5:27:14, time: 0.387, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.5943, loss_rpn_bbox: 0.0502, s0.loss_cls: 0.0502, s0.acc: 91.4307, s0.loss_bbox: 0.1061, s1.loss_cls: 0.0164, s1.acc: 95.0674, s1.loss_bbox: 0.0572, s2.loss_cls: 0.0053, s2.acc: 97.5566, s2.loss_bbox: 0.0149, loss: 0.8945
2021-10-12 08:04:30,731 - mmdet - INFO - Epoch [5][650/1109]	lr: 1.969e-03, eta: 5:26:53, time: 0.387, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.5901, loss_rpn_bbox: 0.0497, s0.loss_cls: 0.0501, s0.acc: 91.5557, s0.loss_bbox: 0.0990, s1.loss_cls: 0.0161, s1.acc: 95.2705, s1.loss_bbox: 0.0548, s2.loss_cls: 0.0047, s2.acc: 97.8447, s2.loss_bbox: 0.0127, loss: 0.8771
2021-10-12 08:04:50,018 - mmdet - INFO - Epoch [5][700/1109]	lr: 1.969e-03, eta: 5:26:32, time: 0.386, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.6762, loss_rpn_bbox: 0.0500, s0.loss_cls: 0.0510, s0.acc: 91.7715, s0.loss_bbox: 0.1050, s1.loss_cls: 0.0161, s1.acc: 95.5176, s1.loss_bbox: 0.0543, s2.loss_cls: 0.0050, s2.acc: 97.8652, s2.loss_bbox: 0.0128, loss: 0.9704
2021-10-12 08:05:09,565 - mmdet - INFO - Epoch [5][750/1109]	lr: 1.969e-03, eta: 5:26:13, time: 0.391, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.7582, loss_rpn_bbox: 0.0550, s0.loss_cls: 0.0578, s0.acc: 90.5977, s0.loss_bbox: 0.1242, s1.loss_cls: 0.0188, s1.acc: 94.8115, s1.loss_bbox: 0.0638, s2.loss_cls: 0.0056, s2.acc: 97.5664, s2.loss_bbox: 0.0144, loss: 1.0979
2021-10-12 08:05:29,376 - mmdet - INFO - Epoch [5][800/1109]	lr: 1.969e-03, eta: 5:25:57, time: 0.396, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.7633, loss_rpn_bbox: 0.0509, s0.loss_cls: 0.0543, s0.acc: 91.3975, s0.loss_bbox: 0.1145, s1.loss_cls: 0.0178, s1.acc: 95.1904, s1.loss_bbox: 0.0583, s2.loss_cls: 0.0055, s2.acc: 97.6914, s2.loss_bbox: 0.0137, loss: 1.0783
2021-10-12 08:05:48,803 - mmdet - INFO - Epoch [5][850/1109]	lr: 1.969e-03, eta: 5:25:37, time: 0.389, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.5919, loss_rpn_bbox: 0.0588, s0.loss_cls: 0.0559, s0.acc: 90.6074, s0.loss_bbox: 0.1283, s1.loss_cls: 0.0185, s1.acc: 94.6377, s1.loss_bbox: 0.0661, s2.loss_cls: 0.0057, s2.acc: 97.4639, s2.loss_bbox: 0.0161, loss: 0.9412
2021-10-12 08:06:08,099 - mmdet - INFO - Epoch [5][900/1109]	lr: 1.969e-03, eta: 5:25:16, time: 0.386, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.5951, loss_rpn_bbox: 0.0490, s0.loss_cls: 0.0531, s0.acc: 91.2412, s0.loss_bbox: 0.1205, s1.loss_cls: 0.0171, s1.acc: 95.1826, s1.loss_bbox: 0.0630, s2.loss_cls: 0.0052, s2.acc: 97.6885, s2.loss_bbox: 0.0146, loss: 0.9175
2021-10-12 08:06:27,268 - mmdet - INFO - Epoch [5][950/1109]	lr: 1.969e-03, eta: 5:24:54, time: 0.383, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.9382, loss_rpn_bbox: 0.0613, s0.loss_cls: 0.0473, s0.acc: 92.5361, s0.loss_bbox: 0.0952, s1.loss_cls: 0.0150, s1.acc: 95.9502, s1.loss_bbox: 0.0468, s2.loss_cls: 0.0048, s2.acc: 97.9912, s2.loss_bbox: 0.0116, loss: 1.2203
2021-10-12 08:06:46,697 - mmdet - INFO - Epoch [5][1000/1109]	lr: 1.969e-03, eta: 5:24:34, time: 0.389, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.7917, loss_rpn_bbox: 0.0564, s0.loss_cls: 0.0581, s0.acc: 90.4258, s0.loss_bbox: 0.1246, s1.loss_cls: 0.0196, s1.acc: 94.6045, s1.loss_bbox: 0.0663, s2.loss_cls: 0.0061, s2.acc: 97.3701, s2.loss_bbox: 0.0157, loss: 1.1385
2021-10-12 08:07:06,062 - mmdet - INFO - Epoch [5][1050/1109]	lr: 1.969e-03, eta: 5:24:13, time: 0.387, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.6860, loss_rpn_bbox: 0.0454, s0.loss_cls: 0.0529, s0.acc: 91.4043, s0.loss_bbox: 0.1100, s1.loss_cls: 0.0168, s1.acc: 95.2461, s1.loss_bbox: 0.0564, s2.loss_cls: 0.0051, s2.acc: 97.7061, s2.loss_bbox: 0.0137, loss: 0.9864
2021-10-12 08:07:25,492 - mmdet - INFO - Epoch [5][1100/1109]	lr: 1.969e-03, eta: 5:23:54, time: 0.389, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.6539, loss_rpn_bbox: 0.0507, s0.loss_cls: 0.0558, s0.acc: 90.5449, s0.loss_bbox: 0.1214, s1.loss_cls: 0.0184, s1.acc: 94.6846, s1.loss_bbox: 0.0653, s2.loss_cls: 0.0056, s2.acc: 97.4766, s2.loss_bbox: 0.0150, loss: 0.9861
2021-10-12 08:08:01,202 - mmdet - INFO - Evaluating bbox...
2021-10-12 08:08:07,895 - mmdet - INFO - Now best checkpoint is saved as best_bbox_mAP_50_epoch_5.pth.
2021-10-12 08:08:07,895 - mmdet - INFO - Best bbox_mAP_50 is 0.1510 at 5 epoch.
2021-10-12 08:08:07,897 - mmdet - INFO - Exp name: HTC_x101_64x4d_FPN_Focal_restart.py
2021-10-12 08:08:07,897 - mmdet - INFO - Epoch(val) [5][448]	bbox_mAP: 0.0840, bbox_mAP_50: 0.1510, bbox_mAP_75: 0.0880, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0110, bbox_mAP_l: 0.1020, bbox_mAP_copypaste: 0.084 0.151 0.088 0.000 0.011 0.102
2021-10-12 08:08:29,857 - mmdet - INFO - Epoch [6][50/1109]	lr: 1.951e-03, eta: 5:23:21, time: 0.439, data_time: 0.048, memory: 3366, loss_rpn_cls: 0.5665, loss_rpn_bbox: 0.0577, s0.loss_cls: 0.0566, s0.acc: 90.4346, s0.loss_bbox: 0.1247, s1.loss_cls: 0.0186, s1.acc: 94.6035, s1.loss_bbox: 0.0675, s2.loss_cls: 0.0057, s2.acc: 97.4648, s2.loss_bbox: 0.0157, loss: 0.9128
2021-10-12 08:08:49,736 - mmdet - INFO - Epoch [6][100/1109]	lr: 1.951e-03, eta: 5:23:06, time: 0.398, data_time: 0.006, memory: 3366, loss_rpn_cls: 0.5096, loss_rpn_bbox: 0.0511, s0.loss_cls: 0.0516, s0.acc: 91.3379, s0.loss_bbox: 0.1004, s1.loss_cls: 0.0163, s1.acc: 95.2031, s1.loss_bbox: 0.0546, s2.loss_cls: 0.0050, s2.acc: 97.7324, s2.loss_bbox: 0.0132, loss: 0.8019
2021-10-12 08:09:09,160 - mmdet - INFO - Epoch [6][150/1109]	lr: 1.951e-03, eta: 5:22:46, time: 0.388, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.6236, loss_rpn_bbox: 0.0483, s0.loss_cls: 0.0521, s0.acc: 91.5615, s0.loss_bbox: 0.1123, s1.loss_cls: 0.0164, s1.acc: 95.3887, s1.loss_bbox: 0.0567, s2.loss_cls: 0.0050, s2.acc: 97.8008, s2.loss_bbox: 0.0134, loss: 0.9278
2021-10-12 08:09:28,653 - mmdet - INFO - Epoch [6][200/1109]	lr: 1.951e-03, eta: 5:22:27, time: 0.390, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.5836, loss_rpn_bbox: 0.0534, s0.loss_cls: 0.0547, s0.acc: 90.8516, s0.loss_bbox: 0.1206, s1.loss_cls: 0.0180, s1.acc: 94.8291, s1.loss_bbox: 0.0663, s2.loss_cls: 0.0054, s2.acc: 97.5547, s2.loss_bbox: 0.0150, loss: 0.9170
2021-10-12 08:09:48,144 - mmdet - INFO - Epoch [6][250/1109]	lr: 1.951e-03, eta: 5:22:07, time: 0.390, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.5561, loss_rpn_bbox: 0.0533, s0.loss_cls: 0.0541, s0.acc: 91.0176, s0.loss_bbox: 0.1160, s1.loss_cls: 0.0180, s1.acc: 94.8242, s1.loss_bbox: 0.0632, s2.loss_cls: 0.0055, s2.acc: 97.4912, s2.loss_bbox: 0.0152, loss: 0.8814
2021-10-12 08:10:07,628 - mmdet - INFO - Epoch [6][300/1109]	lr: 1.951e-03, eta: 5:21:48, time: 0.390, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.4991, loss_rpn_bbox: 0.0528, s0.loss_cls: 0.0545, s0.acc: 90.8184, s0.loss_bbox: 0.1159, s1.loss_cls: 0.0178, s1.acc: 94.7178, s1.loss_bbox: 0.0622, s2.loss_cls: 0.0054, s2.acc: 97.5098, s2.loss_bbox: 0.0151, loss: 0.8229
2021-10-12 08:10:27,193 - mmdet - INFO - Epoch [6][350/1109]	lr: 1.951e-03, eta: 5:21:30, time: 0.391, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.5353, loss_rpn_bbox: 0.0529, s0.loss_cls: 0.0556, s0.acc: 90.4258, s0.loss_bbox: 0.1232, s1.loss_cls: 0.0187, s1.acc: 94.3936, s1.loss_bbox: 0.0676, s2.loss_cls: 0.0058, s2.acc: 97.2686, s2.loss_bbox: 0.0167, loss: 0.8758
2021-10-12 08:10:46,376 - mmdet - INFO - Epoch [6][400/1109]	lr: 1.951e-03, eta: 5:21:08, time: 0.384, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.4840, loss_rpn_bbox: 0.0422, s0.loss_cls: 0.0430, s0.acc: 92.8438, s0.loss_bbox: 0.0842, s1.loss_cls: 0.0144, s1.acc: 95.8037, s1.loss_bbox: 0.0479, s2.loss_cls: 0.0044, s2.acc: 98.0029, s2.loss_bbox: 0.0120, loss: 0.7321
2021-10-12 08:11:05,741 - mmdet - INFO - Epoch [6][450/1109]	lr: 1.951e-03, eta: 5:20:48, time: 0.387, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.8225, loss_rpn_bbox: 0.0558, s0.loss_cls: 0.0549, s0.acc: 91.1895, s0.loss_bbox: 0.1149, s1.loss_cls: 0.0175, s1.acc: 95.2012, s1.loss_bbox: 0.0593, s2.loss_cls: 0.0053, s2.acc: 97.7852, s2.loss_bbox: 0.0136, loss: 1.1437
2021-10-12 08:11:25,390 - mmdet - INFO - Epoch [6][500/1109]	lr: 1.951e-03, eta: 5:20:30, time: 0.393, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.6353, loss_rpn_bbox: 0.0576, s0.loss_cls: 0.0562, s0.acc: 90.6621, s0.loss_bbox: 0.1238, s1.loss_cls: 0.0181, s1.acc: 94.7471, s1.loss_bbox: 0.0644, s2.loss_cls: 0.0056, s2.acc: 97.4785, s2.loss_bbox: 0.0145, loss: 0.9755
2021-10-12 08:11:44,813 - mmdet - INFO - Epoch [6][550/1109]	lr: 1.951e-03, eta: 5:20:10, time: 0.388, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.5811, loss_rpn_bbox: 0.0454, s0.loss_cls: 0.0507, s0.acc: 91.5752, s0.loss_bbox: 0.1016, s1.loss_cls: 0.0164, s1.acc: 95.2695, s1.loss_bbox: 0.0544, s2.loss_cls: 0.0050, s2.acc: 97.7100, s2.loss_bbox: 0.0135, loss: 0.8681
2021-10-12 08:12:04,339 - mmdet - INFO - Epoch [6][600/1109]	lr: 1.951e-03, eta: 5:19:51, time: 0.391, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.5649, loss_rpn_bbox: 0.0482, s0.loss_cls: 0.0506, s0.acc: 91.5293, s0.loss_bbox: 0.1114, s1.loss_cls: 0.0171, s1.acc: 95.0762, s1.loss_bbox: 0.0604, s2.loss_cls: 0.0053, s2.acc: 97.6064, s2.loss_bbox: 0.0142, loss: 0.8721
2021-10-12 08:12:23,844 - mmdet - INFO - Epoch [6][650/1109]	lr: 1.951e-03, eta: 5:19:32, time: 0.390, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.5504, loss_rpn_bbox: 0.0495, s0.loss_cls: 0.0541, s0.acc: 90.8682, s0.loss_bbox: 0.1098, s1.loss_cls: 0.0176, s1.acc: 94.8623, s1.loss_bbox: 0.0600, s2.loss_cls: 0.0054, s2.acc: 97.5107, s2.loss_bbox: 0.0147, loss: 0.8615
2021-10-12 08:12:43,347 - mmdet - INFO - Epoch [6][700/1109]	lr: 1.951e-03, eta: 5:19:13, time: 0.390, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.4930, loss_rpn_bbox: 0.0459, s0.loss_cls: 0.0509, s0.acc: 91.3301, s0.loss_bbox: 0.1042, s1.loss_cls: 0.0166, s1.acc: 95.1055, s1.loss_bbox: 0.0574, s2.loss_cls: 0.0049, s2.acc: 97.6875, s2.loss_bbox: 0.0139, loss: 0.7868
2021-10-12 08:13:02,810 - mmdet - INFO - Epoch [6][750/1109]	lr: 1.951e-03, eta: 5:18:53, time: 0.389, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.5398, loss_rpn_bbox: 0.0453, s0.loss_cls: 0.0484, s0.acc: 91.9043, s0.loss_bbox: 0.0950, s1.loss_cls: 0.0152, s1.acc: 95.5791, s1.loss_bbox: 0.0520, s2.loss_cls: 0.0046, s2.acc: 97.8682, s2.loss_bbox: 0.0131, loss: 0.8136
2021-10-12 08:13:22,157 - mmdet - INFO - Epoch [6][800/1109]	lr: 1.951e-03, eta: 5:18:33, time: 0.387, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.7128, loss_rpn_bbox: 0.0554, s0.loss_cls: 0.0518, s0.acc: 91.4395, s0.loss_bbox: 0.1147, s1.loss_cls: 0.0168, s1.acc: 95.2559, s1.loss_bbox: 0.0594, s2.loss_cls: 0.0052, s2.acc: 97.6982, s2.loss_bbox: 0.0140, loss: 1.0301
2021-10-12 08:13:41,490 - mmdet - INFO - Epoch [6][850/1109]	lr: 1.951e-03, eta: 5:18:12, time: 0.387, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.6090, loss_rpn_bbox: 0.0474, s0.loss_cls: 0.0465, s0.acc: 92.5381, s0.loss_bbox: 0.0953, s1.loss_cls: 0.0143, s1.acc: 96.1143, s1.loss_bbox: 0.0472, s2.loss_cls: 0.0042, s2.acc: 98.1973, s2.loss_bbox: 0.0110, loss: 0.8749
2021-10-12 08:14:01,708 - mmdet - INFO - Epoch [6][900/1109]	lr: 1.951e-03, eta: 5:17:59, time: 0.404, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.5763, loss_rpn_bbox: 0.0531, s0.loss_cls: 0.0543, s0.acc: 90.7695, s0.loss_bbox: 0.1209, s1.loss_cls: 0.0175, s1.acc: 94.8379, s1.loss_bbox: 0.0626, s2.loss_cls: 0.0052, s2.acc: 97.5615, s2.loss_bbox: 0.0145, loss: 0.9045
2021-10-12 08:14:21,351 - mmdet - INFO - Epoch [6][950/1109]	lr: 1.951e-03, eta: 5:17:40, time: 0.393, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.7571, loss_rpn_bbox: 0.0597, s0.loss_cls: 0.0572, s0.acc: 90.9229, s0.loss_bbox: 0.1197, s1.loss_cls: 0.0187, s1.acc: 94.9023, s1.loss_bbox: 0.0642, s2.loss_cls: 0.0055, s2.acc: 97.6006, s2.loss_bbox: 0.0140, loss: 1.0961
2021-10-12 08:14:40,877 - mmdet - INFO - Epoch [6][1000/1109]	lr: 1.951e-03, eta: 5:17:21, time: 0.390, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.6612, loss_rpn_bbox: 0.0560, s0.loss_cls: 0.0537, s0.acc: 91.2754, s0.loss_bbox: 0.1159, s1.loss_cls: 0.0178, s1.acc: 95.0273, s1.loss_bbox: 0.0620, s2.loss_cls: 0.0055, s2.acc: 97.6240, s2.loss_bbox: 0.0140, loss: 0.9861
2021-10-12 08:15:00,283 - mmdet - INFO - Epoch [6][1050/1109]	lr: 1.951e-03, eta: 5:17:02, time: 0.388, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.6318, loss_rpn_bbox: 0.0498, s0.loss_cls: 0.0482, s0.acc: 92.2705, s0.loss_bbox: 0.1013, s1.loss_cls: 0.0152, s1.acc: 95.7822, s1.loss_bbox: 0.0527, s2.loss_cls: 0.0045, s2.acc: 98.0244, s2.loss_bbox: 0.0115, loss: 0.9151
2021-10-12 08:15:20,065 - mmdet - INFO - Epoch [6][1100/1109]	lr: 1.951e-03, eta: 5:16:44, time: 0.396, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.6420, loss_rpn_bbox: 0.0513, s0.loss_cls: 0.0515, s0.acc: 91.4531, s0.loss_bbox: 0.1107, s1.loss_cls: 0.0176, s1.acc: 95.0244, s1.loss_bbox: 0.0613, s2.loss_cls: 0.0053, s2.acc: 97.6416, s2.loss_bbox: 0.0140, loss: 0.9538
2021-10-12 08:15:55,846 - mmdet - INFO - Evaluating bbox...
2021-10-12 08:16:02,673 - mmdet - INFO - Now best checkpoint is saved as best_bbox_mAP_50_epoch_6.pth.
2021-10-12 08:16:02,674 - mmdet - INFO - Best bbox_mAP_50 is 0.1530 at 6 epoch.
2021-10-12 08:16:02,685 - mmdet - INFO - Exp name: HTC_x101_64x4d_FPN_Focal_restart.py
2021-10-12 08:16:02,686 - mmdet - INFO - Epoch(val) [6][448]	bbox_mAP: 0.0860, bbox_mAP_50: 0.1530, bbox_mAP_75: 0.0840, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.0100, bbox_mAP_l: 0.1050, bbox_mAP_copypaste: 0.086 0.153 0.084 0.000 0.010 0.105
2021-10-12 08:16:24,347 - mmdet - INFO - Epoch [7][50/1109]	lr: 1.930e-03, eta: 5:16:12, time: 0.433, data_time: 0.050, memory: 3366, loss_rpn_cls: 0.5087, loss_rpn_bbox: 0.0438, s0.loss_cls: 0.0536, s0.acc: 91.0146, s0.loss_bbox: 0.1183, s1.loss_cls: 0.0178, s1.acc: 94.7725, s1.loss_bbox: 0.0656, s2.loss_cls: 0.0054, s2.acc: 97.5215, s2.loss_bbox: 0.0155, loss: 0.8287
2021-10-12 08:16:44,195 - mmdet - INFO - Epoch [7][100/1109]	lr: 1.930e-03, eta: 5:15:55, time: 0.397, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.4333, loss_rpn_bbox: 0.0406, s0.loss_cls: 0.0504, s0.acc: 91.4697, s0.loss_bbox: 0.1070, s1.loss_cls: 0.0162, s1.acc: 95.2881, s1.loss_bbox: 0.0565, s2.loss_cls: 0.0048, s2.acc: 97.7676, s2.loss_bbox: 0.0136, loss: 0.7224
2021-10-12 08:17:03,479 - mmdet - INFO - Epoch [7][150/1109]	lr: 1.930e-03, eta: 5:15:34, time: 0.386, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.4493, loss_rpn_bbox: 0.0446, s0.loss_cls: 0.0495, s0.acc: 91.8379, s0.loss_bbox: 0.1004, s1.loss_cls: 0.0160, s1.acc: 95.4492, s1.loss_bbox: 0.0533, s2.loss_cls: 0.0050, s2.acc: 97.6631, s2.loss_bbox: 0.0139, loss: 0.7319
2021-10-12 08:17:22,909 - mmdet - INFO - Epoch [7][200/1109]	lr: 1.930e-03, eta: 5:15:15, time: 0.389, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.3994, loss_rpn_bbox: 0.0445, s0.loss_cls: 0.0500, s0.acc: 91.4727, s0.loss_bbox: 0.1060, s1.loss_cls: 0.0165, s1.acc: 95.0596, s1.loss_bbox: 0.0593, s2.loss_cls: 0.0051, s2.acc: 97.5596, s2.loss_bbox: 0.0146, loss: 0.6953
2021-10-12 08:17:42,614 - mmdet - INFO - Epoch [7][250/1109]	lr: 1.930e-03, eta: 5:14:57, time: 0.394, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.4700, loss_rpn_bbox: 0.0441, s0.loss_cls: 0.0498, s0.acc: 91.4238, s0.loss_bbox: 0.1040, s1.loss_cls: 0.0165, s1.acc: 94.9697, s1.loss_bbox: 0.0586, s2.loss_cls: 0.0051, s2.acc: 97.5010, s2.loss_bbox: 0.0149, loss: 0.7629
2021-10-12 08:18:03,050 - mmdet - INFO - Epoch [7][300/1109]	lr: 1.930e-03, eta: 5:14:44, time: 0.409, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.4707, loss_rpn_bbox: 0.0439, s0.loss_cls: 0.0503, s0.acc: 91.5244, s0.loss_bbox: 0.1102, s1.loss_cls: 0.0165, s1.acc: 95.0977, s1.loss_bbox: 0.0590, s2.loss_cls: 0.0051, s2.acc: 97.5820, s2.loss_bbox: 0.0152, loss: 0.7709
2021-10-12 08:18:22,630 - mmdet - INFO - Epoch [7][350/1109]	lr: 1.930e-03, eta: 5:14:25, time: 0.392, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.4493, loss_rpn_bbox: 0.0449, s0.loss_cls: 0.0465, s0.acc: 91.9102, s0.loss_bbox: 0.0986, s1.loss_cls: 0.0154, s1.acc: 95.2783, s1.loss_bbox: 0.0564, s2.loss_cls: 0.0048, s2.acc: 97.6621, s2.loss_bbox: 0.0137, loss: 0.7296
2021-10-12 08:18:41,938 - mmdet - INFO - Epoch [7][400/1109]	lr: 1.930e-03, eta: 5:14:05, time: 0.386, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.4983, loss_rpn_bbox: 0.0461, s0.loss_cls: 0.0486, s0.acc: 91.6260, s0.loss_bbox: 0.1080, s1.loss_cls: 0.0159, s1.acc: 95.2715, s1.loss_bbox: 0.0574, s2.loss_cls: 0.0048, s2.acc: 97.7129, s2.loss_bbox: 0.0141, loss: 0.7932
2021-10-12 08:19:01,275 - mmdet - INFO - Epoch [7][450/1109]	lr: 1.930e-03, eta: 5:13:45, time: 0.387, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.5156, loss_rpn_bbox: 0.0499, s0.loss_cls: 0.0479, s0.acc: 91.9541, s0.loss_bbox: 0.0910, s1.loss_cls: 0.0156, s1.acc: 95.5068, s1.loss_bbox: 0.0499, s2.loss_cls: 0.0048, s2.acc: 97.8340, s2.loss_bbox: 0.0122, loss: 0.7867
2021-10-12 08:19:20,664 - mmdet - INFO - Epoch [7][500/1109]	lr: 1.930e-03, eta: 5:13:24, time: 0.388, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.5053, loss_rpn_bbox: 0.0494, s0.loss_cls: 0.0491, s0.acc: 91.7891, s0.loss_bbox: 0.1030, s1.loss_cls: 0.0168, s1.acc: 94.9873, s1.loss_bbox: 0.0603, s2.loss_cls: 0.0051, s2.acc: 97.6045, s2.loss_bbox: 0.0145, loss: 0.8034
2021-10-12 08:19:39,918 - mmdet - INFO - Epoch [7][550/1109]	lr: 1.930e-03, eta: 5:13:04, time: 0.385, data_time: 0.005, memory: 3366, loss_rpn_cls: 0.5711, loss_rpn_bbox: 0.0513, s0.loss_cls: 0.0498, s0.acc: 91.5615, s0.loss_bbox: 0.1086, s1.loss_cls: 0.0163, s1.acc: 95.1553, s1.loss_bbox: 0.0582, s2.loss_cls: 0.0049, s2.acc: 97.7031, s2.loss_bbox: 0.0134, loss: 0.8736
