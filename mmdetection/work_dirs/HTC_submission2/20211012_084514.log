2021-10-12 08:45:15,508 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]
CUDA available: True
GPU 0: Tesla V100-PCIE-32GB
CUDA_HOME: None
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.5.3
MMCV: 1.3.14
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.0
MMDetection: 2.17.0+044cccd
------------------------------------------------------------

2021-10-12 08:45:16,235 - mmdet - INFO - Distributed training: False
2021-10-12 08:45:16,877 - mmdet - INFO - Config:
dataset_type = 'CocoDataset'
data_root = '/opt/ml/detection/dataset/'
classes = [
    'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass', 'Plastic',
    'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
]
img_norm_cfg = dict(mean=[0, 0, 0], std=[255.0, 255.0, 255.0], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='Resize',
        img_scale=[(1024, 1024), (768, 768), (512, 512)],
        keep_ratio=True,
        multiscale_mode='value'),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(type='CutOut', n_holes=10, cutout_shape=(15, 15)),
    dict(type='BrightnessTransform', level=2, prob=0.3),
    dict(type='RandomAffine'),
    dict(
        type='Normalize',
        mean=[0, 0, 0],
        std=[255.0, 255.0, 255.0],
        to_rgb=True),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1024, 1024),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[0, 0, 0],
                std=[255.0, 255.0, 255.0],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/train.json',
        img_prefix='/opt/ml/detection/dataset/',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='Resize',
                img_scale=[(1024, 1024), (768, 768), (512, 512)],
                keep_ratio=True,
                multiscale_mode='value'),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(type='CutOut', n_holes=10, cutout_shape=(15, 15)),
            dict(type='BrightnessTransform', level=2, prob=0.3),
            dict(type='RandomAffine'),
            dict(
                type='Normalize',
                mean=[0, 0, 0],
                std=[255.0, 255.0, 255.0],
                to_rgb=True),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/val_kfold1.json',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        img_prefix='/opt/ml/detection/dataset/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1024, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[0, 0, 0],
                        std=[255.0, 255.0, 255.0],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='/opt/ml/detection/dataset/test.json',
        classes=[
            'General trash', 'Paper', 'Paper pack', 'Metal', 'Glass',
            'Plastic', 'Styrofoam', 'Plastic bag', 'Battery', 'Clothing'
        ],
        img_prefix='/opt/ml/detection/dataset/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1024, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[0, 0, 0],
                        std=[255.0, 255.0, 255.0],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric='bbox', save_best='bbox_mAP_50')
checkpoint_config = dict(interval=100)
log_config = dict(
    interval=50,
    hooks=[
        dict(type='TextLoggerHook'),
        dict(type='WandbLoggerHook', init_kwargs=dict(project='mmdetection'))
    ])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
optimizer = dict(type='SGD', lr=0.002, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='CosineAnnealing',
    warmup='linear',
    warmup_iters=1000,
    warmup_ratio=0.01,
    min_lr=1e-06)
runner = dict(type='EpochBasedRunner', max_epochs=50)
model = dict(
    type='HybridTaskCascade',
    backbone=dict(
        type='DetectoRS_ResNeXt',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50'),
        conv_cfg=dict(type='ConvAWS'),
        sac=dict(type='SAC', use_deform=True),
        stage_with_sac=(False, True, True, True),
        output_img=True),
    neck=dict(
        type='RFP',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5,
        rfp_steps=2,
        aspp_out_channels=64,
        aspp_dilations=(1, 3, 6, 1),
        rfp_backbone=dict(
            rfp_inplanes=256,
            type='DetectoRS_ResNeXt',
            depth=101,
            groups=32,
            base_width=4,
            num_stages=4,
            out_indices=(0, 1, 2, 3),
            frozen_stages=1,
            norm_cfg=dict(type='BN', requires_grad=True),
            norm_eval=True,
            conv_cfg=dict(type='ConvAWS'),
            sac=dict(type='SAC', use_deform=True),
            stage_with_sac=(False, True, True, True),
            init_cfg=dict(
                type='Pretrained', checkpoint='open-mmlab://resnext101_64x4d'),
            style='pytorch')),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='HybridTaskCascadeRoIHead',
        interleaved=True,
        mask_info_flow=False,
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=10,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))
        ]),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.001,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100,
            mask_thr_binary=0.5)))
work_dir = './work_dirs/HTC_submission2'
gpu_ids = range(0, 1)

2021-10-12 08:45:16,878 - mmdet - INFO - Set random seed to 2021, deterministic: True
2021-10-12 08:45:20,113 - mmdet - INFO - Use load_from_torchvision loader
2021-10-12 08:45:20,366 - mmdet - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

missing keys in source state_dict: layer2.0.conv2.weight_diff, layer2.0.conv2.switch.weight, layer2.0.conv2.switch.bias, layer2.0.conv2.pre_context.weight, layer2.0.conv2.pre_context.bias, layer2.0.conv2.post_context.weight, layer2.0.conv2.post_context.bias, layer2.0.conv2.offset_s.weight, layer2.0.conv2.offset_s.bias, layer2.0.conv2.offset_l.weight, layer2.0.conv2.offset_l.bias, layer2.1.conv2.weight_diff, layer2.1.conv2.switch.weight, layer2.1.conv2.switch.bias, layer2.1.conv2.pre_context.weight, layer2.1.conv2.pre_context.bias, layer2.1.conv2.post_context.weight, layer2.1.conv2.post_context.bias, layer2.1.conv2.offset_s.weight, layer2.1.conv2.offset_s.bias, layer2.1.conv2.offset_l.weight, layer2.1.conv2.offset_l.bias, layer2.2.conv2.weight_diff, layer2.2.conv2.switch.weight, layer2.2.conv2.switch.bias, layer2.2.conv2.pre_context.weight, layer2.2.conv2.pre_context.bias, layer2.2.conv2.post_context.weight, layer2.2.conv2.post_context.bias, layer2.2.conv2.offset_s.weight, layer2.2.conv2.offset_s.bias, layer2.2.conv2.offset_l.weight, layer2.2.conv2.offset_l.bias, layer2.3.conv2.weight_diff, layer2.3.conv2.switch.weight, layer2.3.conv2.switch.bias, layer2.3.conv2.pre_context.weight, layer2.3.conv2.pre_context.bias, layer2.3.conv2.post_context.weight, layer2.3.conv2.post_context.bias, layer2.3.conv2.offset_s.weight, layer2.3.conv2.offset_s.bias, layer2.3.conv2.offset_l.weight, layer2.3.conv2.offset_l.bias, layer3.0.conv2.weight_diff, layer3.0.conv2.switch.weight, layer3.0.conv2.switch.bias, layer3.0.conv2.pre_context.weight, layer3.0.conv2.pre_context.bias, layer3.0.conv2.post_context.weight, layer3.0.conv2.post_context.bias, layer3.0.conv2.offset_s.weight, layer3.0.conv2.offset_s.bias, layer3.0.conv2.offset_l.weight, layer3.0.conv2.offset_l.bias, layer3.1.conv2.weight_diff, layer3.1.conv2.switch.weight, layer3.1.conv2.switch.bias, layer3.1.conv2.pre_context.weight, layer3.1.conv2.pre_context.bias, layer3.1.conv2.post_context.weight, layer3.1.conv2.post_context.bias, layer3.1.conv2.offset_s.weight, layer3.1.conv2.offset_s.bias, layer3.1.conv2.offset_l.weight, layer3.1.conv2.offset_l.bias, layer3.2.conv2.weight_diff, layer3.2.conv2.switch.weight, layer3.2.conv2.switch.bias, layer3.2.conv2.pre_context.weight, layer3.2.conv2.pre_context.bias, layer3.2.conv2.post_context.weight, layer3.2.conv2.post_context.bias, layer3.2.conv2.offset_s.weight, layer3.2.conv2.offset_s.bias, layer3.2.conv2.offset_l.weight, layer3.2.conv2.offset_l.bias, layer3.3.conv2.weight_diff, layer3.3.conv2.switch.weight, layer3.3.conv2.switch.bias, layer3.3.conv2.pre_context.weight, layer3.3.conv2.pre_context.bias, layer3.3.conv2.post_context.weight, layer3.3.conv2.post_context.bias, layer3.3.conv2.offset_s.weight, layer3.3.conv2.offset_s.bias, layer3.3.conv2.offset_l.weight, layer3.3.conv2.offset_l.bias, layer3.4.conv2.weight_diff, layer3.4.conv2.switch.weight, layer3.4.conv2.switch.bias, layer3.4.conv2.pre_context.weight, layer3.4.conv2.pre_context.bias, layer3.4.conv2.post_context.weight, layer3.4.conv2.post_context.bias, layer3.4.conv2.offset_s.weight, layer3.4.conv2.offset_s.bias, layer3.4.conv2.offset_l.weight, layer3.4.conv2.offset_l.bias, layer3.5.conv2.weight_diff, layer3.5.conv2.switch.weight, layer3.5.conv2.switch.bias, layer3.5.conv2.pre_context.weight, layer3.5.conv2.pre_context.bias, layer3.5.conv2.post_context.weight, layer3.5.conv2.post_context.bias, layer3.5.conv2.offset_s.weight, layer3.5.conv2.offset_s.bias, layer3.5.conv2.offset_l.weight, layer3.5.conv2.offset_l.bias, layer4.0.conv2.weight_diff, layer4.0.conv2.switch.weight, layer4.0.conv2.switch.bias, layer4.0.conv2.pre_context.weight, layer4.0.conv2.pre_context.bias, layer4.0.conv2.post_context.weight, layer4.0.conv2.post_context.bias, layer4.0.conv2.offset_s.weight, layer4.0.conv2.offset_s.bias, layer4.0.conv2.offset_l.weight, layer4.0.conv2.offset_l.bias, layer4.1.conv2.weight_diff, layer4.1.conv2.switch.weight, layer4.1.conv2.switch.bias, layer4.1.conv2.pre_context.weight, layer4.1.conv2.pre_context.bias, layer4.1.conv2.post_context.weight, layer4.1.conv2.post_context.bias, layer4.1.conv2.offset_s.weight, layer4.1.conv2.offset_s.bias, layer4.1.conv2.offset_l.weight, layer4.1.conv2.offset_l.bias, layer4.2.conv2.weight_diff, layer4.2.conv2.switch.weight, layer4.2.conv2.switch.bias, layer4.2.conv2.pre_context.weight, layer4.2.conv2.pre_context.bias, layer4.2.conv2.post_context.weight, layer4.2.conv2.post_context.bias, layer4.2.conv2.offset_s.weight, layer4.2.conv2.offset_s.bias, layer4.2.conv2.offset_l.weight, layer4.2.conv2.offset_l.bias

2021-10-12 08:45:20,412 - mmdet - INFO - Use load_from_openmmlab loader
2021-10-12 08:45:20,720 - mmdet - WARNING - The model and loaded state dict do not match exactly

size mismatch for layer1.0.conv1.weight: copying a param with shape torch.Size([256, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([128, 64, 1, 1]).
size mismatch for layer1.0.bn1.weight: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([128]).
size mismatch for layer1.0.bn1.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([128]).
size mismatch for layer1.0.bn1.running_mean: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([128]).
size mismatch for layer1.0.bn1.running_var: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([128]).
size mismatch for layer1.0.conv2.weight: copying a param with shape torch.Size([256, 4, 3, 3]) from checkpoint, the shape in current model is torch.Size([128, 4, 3, 3]).
size mismatch for layer1.0.bn2.weight: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([128]).
size mismatch for layer1.0.bn2.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([128]).
size mismatch for layer1.0.bn2.running_mean: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([128]).
size mismatch for layer1.0.bn2.running_var: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([128]).
size mismatch for layer1.0.conv3.weight: copying a param with shape torch.Size([256, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([256, 128, 1, 1]).
size mismatch for layer1.1.conv1.weight: copying a param with shape torch.Size([256, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([128, 256, 1, 1]).
size mismatch for layer1.1.bn1.weight: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([128]).
size mismatch for layer1.1.bn1.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([128]).
size mismatch for layer1.1.bn1.running_mean: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([128]).
size mismatch for layer1.1.bn1.running_var: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([128]).
size mismatch for layer1.1.conv2.weight: copying a param with shape torch.Size([256, 4, 3, 3]) from checkpoint, the shape in current model is torch.Size([128, 4, 3, 3]).
size mismatch for layer1.1.bn2.weight: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([128]).
size mismatch for layer1.1.bn2.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([128]).
size mismatch for layer1.1.bn2.running_mean: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([128]).
size mismatch for layer1.1.bn2.running_var: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([128]).
size mismatch for layer1.1.conv3.weight: copying a param with shape torch.Size([256, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([256, 128, 1, 1]).
size mismatch for layer1.2.conv1.weight: copying a param with shape torch.Size([256, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([128, 256, 1, 1]).
size mismatch for layer1.2.bn1.weight: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([128]).
size mismatch for layer1.2.bn1.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([128]).
size mismatch for layer1.2.bn1.running_mean: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([128]).
size mismatch for layer1.2.bn1.running_var: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([128]).
size mismatch for layer1.2.conv2.weight: copying a param with shape torch.Size([256, 4, 3, 3]) from checkpoint, the shape in current model is torch.Size([128, 4, 3, 3]).
size mismatch for layer1.2.bn2.weight: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([128]).
size mismatch for layer1.2.bn2.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([128]).
size mismatch for layer1.2.bn2.running_mean: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([128]).
size mismatch for layer1.2.bn2.running_var: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([128]).
size mismatch for layer1.2.conv3.weight: copying a param with shape torch.Size([256, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([256, 128, 1, 1]).
size mismatch for layer2.0.conv1.weight: copying a param with shape torch.Size([512, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([256, 256, 1, 1]).
size mismatch for layer2.0.bn1.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.0.bn1.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.0.bn1.running_mean: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.0.bn1.running_var: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.0.conv2.weight: copying a param with shape torch.Size([512, 8, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 8, 3, 3]).
size mismatch for layer2.0.bn2.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.0.bn2.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.0.bn2.running_mean: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.0.bn2.running_var: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.0.conv3.weight: copying a param with shape torch.Size([512, 512, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 256, 1, 1]).
size mismatch for layer2.1.conv1.weight: copying a param with shape torch.Size([512, 512, 1, 1]) from checkpoint, the shape in current model is torch.Size([256, 512, 1, 1]).
size mismatch for layer2.1.bn1.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.1.bn1.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.1.bn1.running_mean: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.1.bn1.running_var: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.1.conv2.weight: copying a param with shape torch.Size([512, 8, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 8, 3, 3]).
size mismatch for layer2.1.bn2.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.1.bn2.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.1.bn2.running_mean: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.1.bn2.running_var: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.1.conv3.weight: copying a param with shape torch.Size([512, 512, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 256, 1, 1]).
size mismatch for layer2.2.conv1.weight: copying a param with shape torch.Size([512, 512, 1, 1]) from checkpoint, the shape in current model is torch.Size([256, 512, 1, 1]).
size mismatch for layer2.2.bn1.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.2.bn1.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.2.bn1.running_mean: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.2.bn1.running_var: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.2.conv2.weight: copying a param with shape torch.Size([512, 8, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 8, 3, 3]).
size mismatch for layer2.2.bn2.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.2.bn2.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.2.bn2.running_mean: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.2.bn2.running_var: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.2.conv3.weight: copying a param with shape torch.Size([512, 512, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 256, 1, 1]).
size mismatch for layer2.3.conv1.weight: copying a param with shape torch.Size([512, 512, 1, 1]) from checkpoint, the shape in current model is torch.Size([256, 512, 1, 1]).
size mismatch for layer2.3.bn1.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.3.bn1.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.3.bn1.running_mean: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.3.bn1.running_var: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.3.conv2.weight: copying a param with shape torch.Size([512, 8, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 8, 3, 3]).
size mismatch for layer2.3.bn2.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.3.bn2.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.3.bn2.running_mean: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.3.bn2.running_var: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.3.conv3.weight: copying a param with shape torch.Size([512, 512, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 256, 1, 1]).
size mismatch for layer3.0.conv1.weight: copying a param with shape torch.Size([1024, 512, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 512, 1, 1]).
size mismatch for layer3.0.bn1.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.0.bn1.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.0.bn1.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.0.bn1.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.0.conv2.weight: copying a param with shape torch.Size([1024, 16, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 16, 3, 3]).
size mismatch for layer3.0.bn2.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.0.bn2.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.0.bn2.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.0.bn2.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.0.conv3.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 512, 1, 1]).
size mismatch for layer3.1.conv1.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 1024, 1, 1]).
size mismatch for layer3.1.bn1.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.1.bn1.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.1.bn1.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.1.bn1.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.1.conv2.weight: copying a param with shape torch.Size([1024, 16, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 16, 3, 3]).
size mismatch for layer3.1.bn2.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.1.bn2.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.1.bn2.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.1.bn2.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.1.conv3.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 512, 1, 1]).
size mismatch for layer3.2.conv1.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 1024, 1, 1]).
size mismatch for layer3.2.bn1.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.2.bn1.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.2.bn1.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.2.bn1.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.2.conv2.weight: copying a param with shape torch.Size([1024, 16, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 16, 3, 3]).
size mismatch for layer3.2.bn2.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.2.bn2.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.2.bn2.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.2.bn2.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.2.conv3.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 512, 1, 1]).
size mismatch for layer3.3.conv1.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 1024, 1, 1]).
size mismatch for layer3.3.bn1.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.3.bn1.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.3.bn1.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.3.bn1.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.3.conv2.weight: copying a param with shape torch.Size([1024, 16, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 16, 3, 3]).
size mismatch for layer3.3.bn2.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.3.bn2.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.3.bn2.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.3.bn2.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.3.conv3.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 512, 1, 1]).
size mismatch for layer3.4.conv1.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 1024, 1, 1]).
size mismatch for layer3.4.bn1.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.4.bn1.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.4.bn1.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.4.bn1.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.4.conv2.weight: copying a param with shape torch.Size([1024, 16, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 16, 3, 3]).
size mismatch for layer3.4.bn2.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.4.bn2.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.4.bn2.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.4.bn2.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.4.conv3.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 512, 1, 1]).
size mismatch for layer3.5.conv1.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 1024, 1, 1]).
size mismatch for layer3.5.bn1.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.5.bn1.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.5.bn1.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.5.bn1.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.5.conv2.weight: copying a param with shape torch.Size([1024, 16, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 16, 3, 3]).
size mismatch for layer3.5.bn2.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.5.bn2.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.5.bn2.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.5.bn2.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.5.conv3.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 512, 1, 1]).
size mismatch for layer3.6.conv1.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 1024, 1, 1]).
size mismatch for layer3.6.bn1.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.6.bn1.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.6.bn1.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.6.bn1.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.6.conv2.weight: copying a param with shape torch.Size([1024, 16, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 16, 3, 3]).
size mismatch for layer3.6.bn2.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.6.bn2.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.6.bn2.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.6.bn2.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.6.conv3.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 512, 1, 1]).
size mismatch for layer3.7.conv1.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 1024, 1, 1]).
size mismatch for layer3.7.bn1.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.7.bn1.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.7.bn1.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.7.bn1.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.7.conv2.weight: copying a param with shape torch.Size([1024, 16, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 16, 3, 3]).
size mismatch for layer3.7.bn2.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.7.bn2.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.7.bn2.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.7.bn2.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.7.conv3.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 512, 1, 1]).
size mismatch for layer3.8.conv1.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 1024, 1, 1]).
size mismatch for layer3.8.bn1.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.8.bn1.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.8.bn1.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.8.bn1.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.8.conv2.weight: copying a param with shape torch.Size([1024, 16, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 16, 3, 3]).
size mismatch for layer3.8.bn2.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.8.bn2.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.8.bn2.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.8.bn2.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.8.conv3.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 512, 1, 1]).
size mismatch for layer3.9.conv1.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 1024, 1, 1]).
size mismatch for layer3.9.bn1.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.9.bn1.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.9.bn1.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.9.bn1.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.9.conv2.weight: copying a param with shape torch.Size([1024, 16, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 16, 3, 3]).
size mismatch for layer3.9.bn2.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.9.bn2.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.9.bn2.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.9.bn2.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.9.conv3.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 512, 1, 1]).
size mismatch for layer3.10.conv1.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 1024, 1, 1]).
size mismatch for layer3.10.bn1.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.10.bn1.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.10.bn1.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.10.bn1.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.10.conv2.weight: copying a param with shape torch.Size([1024, 16, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 16, 3, 3]).
size mismatch for layer3.10.bn2.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.10.bn2.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.10.bn2.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.10.bn2.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.10.conv3.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 512, 1, 1]).
size mismatch for layer3.11.conv1.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 1024, 1, 1]).
size mismatch for layer3.11.bn1.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.11.bn1.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.11.bn1.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.11.bn1.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.11.conv2.weight: copying a param with shape torch.Size([1024, 16, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 16, 3, 3]).
size mismatch for layer3.11.bn2.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.11.bn2.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.11.bn2.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.11.bn2.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.11.conv3.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 512, 1, 1]).
size mismatch for layer3.12.conv1.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 1024, 1, 1]).
size mismatch for layer3.12.bn1.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.12.bn1.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.12.bn1.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.12.bn1.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.12.conv2.weight: copying a param with shape torch.Size([1024, 16, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 16, 3, 3]).
size mismatch for layer3.12.bn2.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.12.bn2.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.12.bn2.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.12.bn2.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.12.conv3.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 512, 1, 1]).
size mismatch for layer3.13.conv1.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 1024, 1, 1]).
size mismatch for layer3.13.bn1.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.13.bn1.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.13.bn1.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.13.bn1.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.13.conv2.weight: copying a param with shape torch.Size([1024, 16, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 16, 3, 3]).
size mismatch for layer3.13.bn2.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.13.bn2.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.13.bn2.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.13.bn2.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.13.conv3.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 512, 1, 1]).
size mismatch for layer3.14.conv1.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 1024, 1, 1]).
size mismatch for layer3.14.bn1.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.14.bn1.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.14.bn1.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.14.bn1.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.14.conv2.weight: copying a param with shape torch.Size([1024, 16, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 16, 3, 3]).
size mismatch for layer3.14.bn2.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.14.bn2.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.14.bn2.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.14.bn2.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.14.conv3.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 512, 1, 1]).
size mismatch for layer3.15.conv1.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 1024, 1, 1]).
size mismatch for layer3.15.bn1.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.15.bn1.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.15.bn1.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.15.bn1.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.15.conv2.weight: copying a param with shape torch.Size([1024, 16, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 16, 3, 3]).
size mismatch for layer3.15.bn2.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.15.bn2.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.15.bn2.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.15.bn2.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.15.conv3.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 512, 1, 1]).
size mismatch for layer3.16.conv1.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 1024, 1, 1]).
size mismatch for layer3.16.bn1.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.16.bn1.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.16.bn1.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.16.bn1.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.16.conv2.weight: copying a param with shape torch.Size([1024, 16, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 16, 3, 3]).
size mismatch for layer3.16.bn2.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.16.bn2.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.16.bn2.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.16.bn2.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.16.conv3.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 512, 1, 1]).
size mismatch for layer3.17.conv1.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 1024, 1, 1]).
size mismatch for layer3.17.bn1.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.17.bn1.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.17.bn1.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.17.bn1.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.17.conv2.weight: copying a param with shape torch.Size([1024, 16, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 16, 3, 3]).
size mismatch for layer3.17.bn2.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.17.bn2.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.17.bn2.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.17.bn2.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.17.conv3.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 512, 1, 1]).
size mismatch for layer3.18.conv1.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 1024, 1, 1]).
size mismatch for layer3.18.bn1.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.18.bn1.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.18.bn1.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.18.bn1.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.18.conv2.weight: copying a param with shape torch.Size([1024, 16, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 16, 3, 3]).
size mismatch for layer3.18.bn2.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.18.bn2.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.18.bn2.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.18.bn2.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.18.conv3.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 512, 1, 1]).
size mismatch for layer3.19.conv1.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 1024, 1, 1]).
size mismatch for layer3.19.bn1.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.19.bn1.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.19.bn1.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.19.bn1.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.19.conv2.weight: copying a param with shape torch.Size([1024, 16, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 16, 3, 3]).
size mismatch for layer3.19.bn2.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.19.bn2.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.19.bn2.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.19.bn2.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.19.conv3.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 512, 1, 1]).
size mismatch for layer3.20.conv1.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 1024, 1, 1]).
size mismatch for layer3.20.bn1.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.20.bn1.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.20.bn1.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.20.bn1.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.20.conv2.weight: copying a param with shape torch.Size([1024, 16, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 16, 3, 3]).
size mismatch for layer3.20.bn2.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.20.bn2.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.20.bn2.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.20.bn2.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.20.conv3.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 512, 1, 1]).
size mismatch for layer3.21.conv1.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 1024, 1, 1]).
size mismatch for layer3.21.bn1.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.21.bn1.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.21.bn1.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.21.bn1.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.21.conv2.weight: copying a param with shape torch.Size([1024, 16, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 16, 3, 3]).
size mismatch for layer3.21.bn2.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.21.bn2.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.21.bn2.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.21.bn2.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.21.conv3.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 512, 1, 1]).
size mismatch for layer3.22.conv1.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 1024, 1, 1]).
size mismatch for layer3.22.bn1.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.22.bn1.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.22.bn1.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.22.bn1.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.22.conv2.weight: copying a param with shape torch.Size([1024, 16, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 16, 3, 3]).
size mismatch for layer3.22.bn2.weight: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.22.bn2.bias: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.22.bn2.running_mean: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.22.bn2.running_var: copying a param with shape torch.Size([1024]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.22.conv3.weight: copying a param with shape torch.Size([1024, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 512, 1, 1]).
size mismatch for layer4.0.conv1.weight: copying a param with shape torch.Size([2048, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 1024, 1, 1]).
size mismatch for layer4.0.bn1.weight: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for layer4.0.bn1.bias: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for layer4.0.bn1.running_mean: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for layer4.0.bn1.running_var: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for layer4.0.conv2.weight: copying a param with shape torch.Size([2048, 32, 3, 3]) from checkpoint, the shape in current model is torch.Size([1024, 32, 3, 3]).
size mismatch for layer4.0.bn2.weight: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for layer4.0.bn2.bias: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for layer4.0.bn2.running_mean: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for layer4.0.bn2.running_var: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for layer4.0.conv3.weight: copying a param with shape torch.Size([2048, 2048, 1, 1]) from checkpoint, the shape in current model is torch.Size([2048, 1024, 1, 1]).
size mismatch for layer4.1.conv1.weight: copying a param with shape torch.Size([2048, 2048, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 2048, 1, 1]).
size mismatch for layer4.1.bn1.weight: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for layer4.1.bn1.bias: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for layer4.1.bn1.running_mean: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for layer4.1.bn1.running_var: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for layer4.1.conv2.weight: copying a param with shape torch.Size([2048, 32, 3, 3]) from checkpoint, the shape in current model is torch.Size([1024, 32, 3, 3]).
size mismatch for layer4.1.bn2.weight: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for layer4.1.bn2.bias: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for layer4.1.bn2.running_mean: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for layer4.1.bn2.running_var: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for layer4.1.conv3.weight: copying a param with shape torch.Size([2048, 2048, 1, 1]) from checkpoint, the shape in current model is torch.Size([2048, 1024, 1, 1]).
size mismatch for layer4.2.conv1.weight: copying a param with shape torch.Size([2048, 2048, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 2048, 1, 1]).
size mismatch for layer4.2.bn1.weight: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for layer4.2.bn1.bias: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for layer4.2.bn1.running_mean: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for layer4.2.bn1.running_var: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for layer4.2.conv2.weight: copying a param with shape torch.Size([2048, 32, 3, 3]) from checkpoint, the shape in current model is torch.Size([1024, 32, 3, 3]).
size mismatch for layer4.2.bn2.weight: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for layer4.2.bn2.bias: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for layer4.2.bn2.running_mean: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for layer4.2.bn2.running_var: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for layer4.2.conv3.weight: copying a param with shape torch.Size([2048, 2048, 1, 1]) from checkpoint, the shape in current model is torch.Size([2048, 1024, 1, 1]).
missing keys in source state_dict: layer2.0.conv2.weight_diff, layer2.0.conv2.switch.weight, layer2.0.conv2.switch.bias, layer2.0.conv2.pre_context.weight, layer2.0.conv2.pre_context.bias, layer2.0.conv2.post_context.weight, layer2.0.conv2.post_context.bias, layer2.0.conv2.offset_s.weight, layer2.0.conv2.offset_s.bias, layer2.0.conv2.offset_l.weight, layer2.0.conv2.offset_l.bias, layer2.0.rfp_conv.weight, layer2.0.rfp_conv.bias, layer2.1.conv2.weight_diff, layer2.1.conv2.switch.weight, layer2.1.conv2.switch.bias, layer2.1.conv2.pre_context.weight, layer2.1.conv2.pre_context.bias, layer2.1.conv2.post_context.weight, layer2.1.conv2.post_context.bias, layer2.1.conv2.offset_s.weight, layer2.1.conv2.offset_s.bias, layer2.1.conv2.offset_l.weight, layer2.1.conv2.offset_l.bias, layer2.2.conv2.weight_diff, layer2.2.conv2.switch.weight, layer2.2.conv2.switch.bias, layer2.2.conv2.pre_context.weight, layer2.2.conv2.pre_context.bias, layer2.2.conv2.post_context.weight, layer2.2.conv2.post_context.bias, layer2.2.conv2.offset_s.weight, layer2.2.conv2.offset_s.bias, layer2.2.conv2.offset_l.weight, layer2.2.conv2.offset_l.bias, layer2.3.conv2.weight_diff, layer2.3.conv2.switch.weight, layer2.3.conv2.switch.bias, layer2.3.conv2.pre_context.weight, layer2.3.conv2.pre_context.bias, layer2.3.conv2.post_context.weight, layer2.3.conv2.post_context.bias, layer2.3.conv2.offset_s.weight, layer2.3.conv2.offset_s.bias, layer2.3.conv2.offset_l.weight, layer2.3.conv2.offset_l.bias, layer3.0.conv2.weight_diff, layer3.0.conv2.switch.weight, layer3.0.conv2.switch.bias, layer3.0.conv2.pre_context.weight, layer3.0.conv2.pre_context.bias, layer3.0.conv2.post_context.weight, layer3.0.conv2.post_context.bias, layer3.0.conv2.offset_s.weight, layer3.0.conv2.offset_s.bias, layer3.0.conv2.offset_l.weight, layer3.0.conv2.offset_l.bias, layer3.0.rfp_conv.weight, layer3.0.rfp_conv.bias, layer3.1.conv2.weight_diff, layer3.1.conv2.switch.weight, layer3.1.conv2.switch.bias, layer3.1.conv2.pre_context.weight, layer3.1.conv2.pre_context.bias, layer3.1.conv2.post_context.weight, layer3.1.conv2.post_context.bias, layer3.1.conv2.offset_s.weight, layer3.1.conv2.offset_s.bias, layer3.1.conv2.offset_l.weight, layer3.1.conv2.offset_l.bias, layer3.2.conv2.weight_diff, layer3.2.conv2.switch.weight, layer3.2.conv2.switch.bias, layer3.2.conv2.pre_context.weight, layer3.2.conv2.pre_context.bias, layer3.2.conv2.post_context.weight, layer3.2.conv2.post_context.bias, layer3.2.conv2.offset_s.weight, layer3.2.conv2.offset_s.bias, layer3.2.conv2.offset_l.weight, layer3.2.conv2.offset_l.bias, layer3.3.conv2.weight_diff, layer3.3.conv2.switch.weight, layer3.3.conv2.switch.bias, layer3.3.conv2.pre_context.weight, layer3.3.conv2.pre_context.bias, layer3.3.conv2.post_context.weight, layer3.3.conv2.post_context.bias, layer3.3.conv2.offset_s.weight, layer3.3.conv2.offset_s.bias, layer3.3.conv2.offset_l.weight, layer3.3.conv2.offset_l.bias, layer3.4.conv2.weight_diff, layer3.4.conv2.switch.weight, layer3.4.conv2.switch.bias, layer3.4.conv2.pre_context.weight, layer3.4.conv2.pre_context.bias, layer3.4.conv2.post_context.weight, layer3.4.conv2.post_context.bias, layer3.4.conv2.offset_s.weight, layer3.4.conv2.offset_s.bias, layer3.4.conv2.offset_l.weight, layer3.4.conv2.offset_l.bias, layer3.5.conv2.weight_diff, layer3.5.conv2.switch.weight, layer3.5.conv2.switch.bias, layer3.5.conv2.pre_context.weight, layer3.5.conv2.pre_context.bias, layer3.5.conv2.post_context.weight, layer3.5.conv2.post_context.bias, layer3.5.conv2.offset_s.weight, layer3.5.conv2.offset_s.bias, layer3.5.conv2.offset_l.weight, layer3.5.conv2.offset_l.bias, layer3.6.conv2.weight_diff, layer3.6.conv2.switch.weight, layer3.6.conv2.switch.bias, layer3.6.conv2.pre_context.weight, layer3.6.conv2.pre_context.bias, layer3.6.conv2.post_context.weight, layer3.6.conv2.post_context.bias, layer3.6.conv2.offset_s.weight, layer3.6.conv2.offset_s.bias, layer3.6.conv2.offset_l.weight, layer3.6.conv2.offset_l.bias, layer3.7.conv2.weight_diff, layer3.7.conv2.switch.weight, layer3.7.conv2.switch.bias, layer3.7.conv2.pre_context.weight, layer3.7.conv2.pre_context.bias, layer3.7.conv2.post_context.weight, layer3.7.conv2.post_context.bias, layer3.7.conv2.offset_s.weight, layer3.7.conv2.offset_s.bias, layer3.7.conv2.offset_l.weight, layer3.7.conv2.offset_l.bias, layer3.8.conv2.weight_diff, layer3.8.conv2.switch.weight, layer3.8.conv2.switch.bias, layer3.8.conv2.pre_context.weight, layer3.8.conv2.pre_context.bias, layer3.8.conv2.post_context.weight, layer3.8.conv2.post_context.bias, layer3.8.conv2.offset_s.weight, layer3.8.conv2.offset_s.bias, layer3.8.conv2.offset_l.weight, layer3.8.conv2.offset_l.bias, layer3.9.conv2.weight_diff, layer3.9.conv2.switch.weight, layer3.9.conv2.switch.bias, layer3.9.conv2.pre_context.weight, layer3.9.conv2.pre_context.bias, layer3.9.conv2.post_context.weight, layer3.9.conv2.post_context.bias, layer3.9.conv2.offset_s.weight, layer3.9.conv2.offset_s.bias, layer3.9.conv2.offset_l.weight, layer3.9.conv2.offset_l.bias, layer3.10.conv2.weight_diff, layer3.10.conv2.switch.weight, layer3.10.conv2.switch.bias, layer3.10.conv2.pre_context.weight, layer3.10.conv2.pre_context.bias, layer3.10.conv2.post_context.weight, layer3.10.conv2.post_context.bias, layer3.10.conv2.offset_s.weight, layer3.10.conv2.offset_s.bias, layer3.10.conv2.offset_l.weight, layer3.10.conv2.offset_l.bias, layer3.11.conv2.weight_diff, layer3.11.conv2.switch.weight, layer3.11.conv2.switch.bias, layer3.11.conv2.pre_context.weight, layer3.11.conv2.pre_context.bias, layer3.11.conv2.post_context.weight, layer3.11.conv2.post_context.bias, layer3.11.conv2.offset_s.weight, layer3.11.conv2.offset_s.bias, layer3.11.conv2.offset_l.weight, layer3.11.conv2.offset_l.bias, layer3.12.conv2.weight_diff, layer3.12.conv2.switch.weight, layer3.12.conv2.switch.bias, layer3.12.conv2.pre_context.weight, layer3.12.conv2.pre_context.bias, layer3.12.conv2.post_context.weight, layer3.12.conv2.post_context.bias, layer3.12.conv2.offset_s.weight, layer3.12.conv2.offset_s.bias, layer3.12.conv2.offset_l.weight, layer3.12.conv2.offset_l.bias, layer3.13.conv2.weight_diff, layer3.13.conv2.switch.weight, layer3.13.conv2.switch.bias, layer3.13.conv2.pre_context.weight, layer3.13.conv2.pre_context.bias, layer3.13.conv2.post_context.weight, layer3.13.conv2.post_context.bias, layer3.13.conv2.offset_s.weight, layer3.13.conv2.offset_s.bias, layer3.13.conv2.offset_l.weight, layer3.13.conv2.offset_l.bias, layer3.14.conv2.weight_diff, layer3.14.conv2.switch.weight, layer3.14.conv2.switch.bias, layer3.14.conv2.pre_context.weight, layer3.14.conv2.pre_context.bias, layer3.14.conv2.post_context.weight, layer3.14.conv2.post_context.bias, layer3.14.conv2.offset_s.weight, layer3.14.conv2.offset_s.bias, layer3.14.conv2.offset_l.weight, layer3.14.conv2.offset_l.bias, layer3.15.conv2.weight_diff, layer3.15.conv2.switch.weight, layer3.15.conv2.switch.bias, layer3.15.conv2.pre_context.weight, layer3.15.conv2.pre_context.bias, layer3.15.conv2.post_context.weight, layer3.15.conv2.post_context.bias, layer3.15.conv2.offset_s.weight, layer3.15.conv2.offset_s.bias, layer3.15.conv2.offset_l.weight, layer3.15.conv2.offset_l.bias, layer3.16.conv2.weight_diff, layer3.16.conv2.switch.weight, layer3.16.conv2.switch.bias, layer3.16.conv2.pre_context.weight, layer3.16.conv2.pre_context.bias, layer3.16.conv2.post_context.weight, layer3.16.conv2.post_context.bias, layer3.16.conv2.offset_s.weight, layer3.16.conv2.offset_s.bias, layer3.16.conv2.offset_l.weight, layer3.16.conv2.offset_l.bias, layer3.17.conv2.weight_diff, layer3.17.conv2.switch.weight, layer3.17.conv2.switch.bias, layer3.17.conv2.pre_context.weight, layer3.17.conv2.pre_context.bias, layer3.17.conv2.post_context.weight, layer3.17.conv2.post_context.bias, layer3.17.conv2.offset_s.weight, layer3.17.conv2.offset_s.bias, layer3.17.conv2.offset_l.weight, layer3.17.conv2.offset_l.bias, layer3.18.conv2.weight_diff, layer3.18.conv2.switch.weight, layer3.18.conv2.switch.bias, layer3.18.conv2.pre_context.weight, layer3.18.conv2.pre_context.bias, layer3.18.conv2.post_context.weight, layer3.18.conv2.post_context.bias, layer3.18.conv2.offset_s.weight, layer3.18.conv2.offset_s.bias, layer3.18.conv2.offset_l.weight, layer3.18.conv2.offset_l.bias, layer3.19.conv2.weight_diff, layer3.19.conv2.switch.weight, layer3.19.conv2.switch.bias, layer3.19.conv2.pre_context.weight, layer3.19.conv2.pre_context.bias, layer3.19.conv2.post_context.weight, layer3.19.conv2.post_context.bias, layer3.19.conv2.offset_s.weight, layer3.19.conv2.offset_s.bias, layer3.19.conv2.offset_l.weight, layer3.19.conv2.offset_l.bias, layer3.20.conv2.weight_diff, layer3.20.conv2.switch.weight, layer3.20.conv2.switch.bias, layer3.20.conv2.pre_context.weight, layer3.20.conv2.pre_context.bias, layer3.20.conv2.post_context.weight, layer3.20.conv2.post_context.bias, layer3.20.conv2.offset_s.weight, layer3.20.conv2.offset_s.bias, layer3.20.conv2.offset_l.weight, layer3.20.conv2.offset_l.bias, layer3.21.conv2.weight_diff, layer3.21.conv2.switch.weight, layer3.21.conv2.switch.bias, layer3.21.conv2.pre_context.weight, layer3.21.conv2.pre_context.bias, layer3.21.conv2.post_context.weight, layer3.21.conv2.post_context.bias, layer3.21.conv2.offset_s.weight, layer3.21.conv2.offset_s.bias, layer3.21.conv2.offset_l.weight, layer3.21.conv2.offset_l.bias, layer3.22.conv2.weight_diff, layer3.22.conv2.switch.weight, layer3.22.conv2.switch.bias, layer3.22.conv2.pre_context.weight, layer3.22.conv2.pre_context.bias, layer3.22.conv2.post_context.weight, layer3.22.conv2.post_context.bias, layer3.22.conv2.offset_s.weight, layer3.22.conv2.offset_s.bias, layer3.22.conv2.offset_l.weight, layer3.22.conv2.offset_l.bias, layer4.0.conv2.weight_diff, layer4.0.conv2.switch.weight, layer4.0.conv2.switch.bias, layer4.0.conv2.pre_context.weight, layer4.0.conv2.pre_context.bias, layer4.0.conv2.post_context.weight, layer4.0.conv2.post_context.bias, layer4.0.conv2.offset_s.weight, layer4.0.conv2.offset_s.bias, layer4.0.conv2.offset_l.weight, layer4.0.conv2.offset_l.bias, layer4.0.rfp_conv.weight, layer4.0.rfp_conv.bias, layer4.1.conv2.weight_diff, layer4.1.conv2.switch.weight, layer4.1.conv2.switch.bias, layer4.1.conv2.pre_context.weight, layer4.1.conv2.pre_context.bias, layer4.1.conv2.post_context.weight, layer4.1.conv2.post_context.bias, layer4.1.conv2.offset_s.weight, layer4.1.conv2.offset_s.bias, layer4.1.conv2.offset_l.weight, layer4.1.conv2.offset_l.bias, layer4.2.conv2.weight_diff, layer4.2.conv2.switch.weight, layer4.2.conv2.switch.bias, layer4.2.conv2.pre_context.weight, layer4.2.conv2.pre_context.bias, layer4.2.conv2.post_context.weight, layer4.2.conv2.post_context.bias, layer4.2.conv2.offset_s.weight, layer4.2.conv2.offset_s.bias, layer4.2.conv2.offset_l.weight, layer4.2.conv2.offset_l.bias

2021-10-12 08:45:20,790 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2021-10-12 08:45:20,798 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-12 08:45:21,116 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2021-10-12 08:45:21,438 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.0.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.1.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.2.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.2.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.0.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.0.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.0.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.0.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.0.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.0.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.0.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.0.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.0.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.0.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.1.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.1.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.1.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.1.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.1.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.1.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.1.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.1.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.1.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.1.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.2.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.2.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.2.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.2.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.2.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.2.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.2.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.2.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.2.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.2.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.2.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.3.bn1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.3.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.3.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.3.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.3.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.3.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.3.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.3.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.3.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.3.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.3.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.3.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.3.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.0.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.0.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.0.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.0.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.0.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.0.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.0.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.0.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.0.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.0.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.1.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.1.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.1.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.1.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.1.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.1.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.1.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.1.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.1.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.1.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.2.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.2.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.2.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.2.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.2.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.2.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.2.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.2.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.2.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.2.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.2.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.3.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.3.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.3.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.3.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.3.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.3.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.3.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.3.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.3.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.3.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.3.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.3.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.3.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.4.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.4.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.4.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.4.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.4.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.4.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.4.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.4.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.4.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.4.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.4.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.4.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.4.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.5.bn1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.5.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.5.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.5.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.5.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.5.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.5.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.5.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.5.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.5.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.5.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.5.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.5.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.0.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.0.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.0.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.0.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.0.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.0.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.0.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.0.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.0.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.0.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.1.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.1.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.1.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.1.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.1.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.1.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.1.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.1.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.1.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.1.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.2.bn1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.2.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.2.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.2.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.2.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.2.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.2.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.2.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.2.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.2.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.2.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNeXt  

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.conv1.weight - torch.Size([64, 3, 7, 7]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.bn1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.bn1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.conv1.weight - torch.Size([128, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.0.conv2.weight - torch.Size([128, 4, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.0.conv3.weight - torch.Size([256, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.downsample.1.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.downsample.1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.conv1.weight - torch.Size([128, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.1.conv2.weight - torch.Size([128, 4, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.1.conv3.weight - torch.Size([256, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.conv1.weight - torch.Size([128, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.2.conv2.weight - torch.Size([128, 4, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.2.conv3.weight - torch.Size([256, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn3.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.conv1.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.conv2.weight - torch.Size([256, 8, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.conv2.weight_diff - torch.Size([256, 8, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.conv3.weight - torch.Size([512, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.downsample.1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.downsample.1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.rfp_conv.weight - torch.Size([512, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.rfp_conv.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.conv1.weight - torch.Size([256, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.conv2.weight - torch.Size([256, 8, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.conv2.weight_diff - torch.Size([256, 8, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.conv3.weight - torch.Size([512, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.conv1.weight - torch.Size([256, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.conv2.weight - torch.Size([256, 8, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.conv2.weight_diff - torch.Size([256, 8, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.conv3.weight - torch.Size([512, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.conv1.weight - torch.Size([256, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.conv2.weight - torch.Size([256, 8, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.conv2.weight_diff - torch.Size([256, 8, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.conv3.weight - torch.Size([512, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.bn3.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.conv1.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.conv2.weight - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.conv2.weight_diff - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.conv3.weight - torch.Size([1024, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.downsample.1.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.downsample.1.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.rfp_conv.weight - torch.Size([1024, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.rfp_conv.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.conv1.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.conv2.weight - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.conv2.weight_diff - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.conv3.weight - torch.Size([1024, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.conv1.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.conv2.weight - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.conv2.weight_diff - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.conv3.weight - torch.Size([1024, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.conv1.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.conv2.weight - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.conv2.weight_diff - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.conv3.weight - torch.Size([1024, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.conv1.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.conv2.weight - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.conv2.weight_diff - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.conv3.weight - torch.Size([1024, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.conv1.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.conv2.weight - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.conv2.weight_diff - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.conv3.weight - torch.Size([1024, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.6.conv1.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.conv2.weight - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.conv2.weight_diff - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.conv3.weight - torch.Size([1024, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.6.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.7.conv1.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.conv2.weight - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.conv2.weight_diff - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.conv3.weight - torch.Size([1024, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.7.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.8.conv1.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.conv2.weight - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.conv2.weight_diff - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.conv3.weight - torch.Size([1024, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.8.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.9.conv1.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.conv2.weight - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.conv2.weight_diff - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.conv3.weight - torch.Size([1024, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.9.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.10.conv1.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.conv2.weight - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.conv2.weight_diff - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.conv3.weight - torch.Size([1024, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.10.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.11.conv1.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.conv2.weight - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.conv2.weight_diff - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.conv3.weight - torch.Size([1024, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.11.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.12.conv1.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.conv2.weight - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.conv2.weight_diff - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.conv3.weight - torch.Size([1024, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.12.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.13.conv1.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.conv2.weight - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.conv2.weight_diff - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.conv3.weight - torch.Size([1024, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.13.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.14.conv1.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.conv2.weight - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.conv2.weight_diff - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.conv3.weight - torch.Size([1024, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.14.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.15.conv1.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.conv2.weight - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.conv2.weight_diff - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.conv3.weight - torch.Size([1024, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.15.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.16.conv1.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.conv2.weight - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.conv2.weight_diff - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.conv3.weight - torch.Size([1024, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.16.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.17.conv1.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.conv2.weight - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.conv2.weight_diff - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.conv3.weight - torch.Size([1024, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.17.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.18.conv1.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.conv2.weight - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.conv2.weight_diff - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.conv3.weight - torch.Size([1024, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.18.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.19.conv1.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.conv2.weight - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.conv2.weight_diff - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.conv3.weight - torch.Size([1024, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.19.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.20.conv1.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.conv2.weight - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.conv2.weight_diff - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.conv3.weight - torch.Size([1024, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.20.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.21.conv1.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.conv2.weight - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.conv2.weight_diff - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.conv3.weight - torch.Size([1024, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.21.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.22.conv1.weight - torch.Size([512, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.conv2.weight - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.conv2.weight_diff - torch.Size([512, 16, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.conv3.weight - torch.Size([1024, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.22.bn3.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.conv1.weight - torch.Size([1024, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.bn1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.bn1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.conv2.weight - torch.Size([1024, 32, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.conv2.weight_diff - torch.Size([1024, 32, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.conv2.switch.weight - torch.Size([1, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.conv2.pre_context.weight - torch.Size([1024, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.conv2.pre_context.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.conv2.post_context.weight - torch.Size([1024, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.conv2.post_context.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.conv2.offset_s.weight - torch.Size([18, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.conv2.offset_l.weight - torch.Size([18, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.bn2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.bn2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.conv3.weight - torch.Size([2048, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.downsample.1.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.downsample.1.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.rfp_conv.weight - torch.Size([2048, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.rfp_conv.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.conv1.weight - torch.Size([1024, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.bn1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.bn1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.conv2.weight - torch.Size([1024, 32, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.conv2.weight_diff - torch.Size([1024, 32, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.conv2.switch.weight - torch.Size([1, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.conv2.pre_context.weight - torch.Size([1024, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.conv2.pre_context.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.conv2.post_context.weight - torch.Size([1024, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.conv2.post_context.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.conv2.offset_s.weight - torch.Size([18, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.conv2.offset_l.weight - torch.Size([18, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.bn2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.bn2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.conv3.weight - torch.Size([2048, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.conv1.weight - torch.Size([1024, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.bn1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.bn1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.conv2.weight - torch.Size([1024, 32, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.conv2.weight_diff - torch.Size([1024, 32, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.conv2.switch.weight - torch.Size([1, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.conv2.switch.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.conv2.pre_context.weight - torch.Size([1024, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.conv2.pre_context.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.conv2.post_context.weight - torch.Size([1024, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.conv2.post_context.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.conv2.offset_s.weight - torch.Size([18, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.conv2.offset_l.weight - torch.Size([18, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.bn2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.bn2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.conv3.weight - torch.Size([2048, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.bn3.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_aspp.aspp.0.weight - torch.Size([64, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_aspp.aspp.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_aspp.aspp.1.weight - torch.Size([64, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_aspp.aspp.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_aspp.aspp.2.weight - torch.Size([64, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_aspp.aspp.2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_aspp.aspp.3.weight - torch.Size([64, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_aspp.aspp.3.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_weight.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_weight.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.0.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.1.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_cls.weight - torch.Size([11, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_cls.bias - torch.Size([11]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_reg.weight - torch.Size([4, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=normal, bias=0 

roi_head.bbox_head.2.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=normal, bias=0 
2021-10-12 08:45:25,677 - mmdet - INFO - Start running, host: root@00a46a6c3ac0, work_dir: /opt/ml/detection/object-detection-level2-cv-01/work_dirs/HTC_submission2
2021-10-12 08:45:25,678 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
after_run:
(VERY_LOW    ) WandbLoggerHook                    
 -------------------- 
2021-10-12 08:45:25,678 - mmdet - INFO - workflow: [('train', 1)], max: 50 epochs
2021-10-12 08:48:18,324 - mmdet - INFO - Epoch [1][50/1221]	lr: 1.170e-04, eta: 2 days, 8:15:14, time: 3.320, data_time: 0.056, memory: 27175, loss_rpn_cls: 0.5764, loss_rpn_bbox: 0.0453, s0.loss_cls: 0.4670, s0.acc: 89.3086, s0.loss_bbox: 0.0696, s1.loss_cls: 0.1876, s1.acc: 90.6768, s1.loss_bbox: 0.0215, s2.loss_cls: 0.1767, s2.acc: 82.3301, s2.loss_bbox: 0.0143, loss: 1.5585
